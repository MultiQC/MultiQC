name: "Integration test"
on:
  push:
    branches:
      - main
    paths-ignore:
      - "docs/**"
      - "*.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "*.md"

jobs:
  integration_test_linux:
    name: "Python ${{ matrix.python-version }}"
    runs-on: ubuntu-20.04
    needs: changes
    strategy:
      matrix:
        python-version: ["3.8", "3.12"] # Oldest and newest supported Python versions
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: "Set up Python ${{ matrix.python-version }}"
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: "Install MultiQC"
        run: pip install .

      - name: "Download test data"
        uses: actions/checkout@v4
        with:
          repository: MultiQC/test-data
          path: test-data

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            pyproject:
              - "pyproject.toml"
            modules:
              - "multiqc/modules/**"
            base_module:
              - "multiqc/modules/base_module.py"
            all_files:
              - "**"

      - name: "Run all modules if pyproject.toml has changed or needs.changes.outputs.changed_module is not null"
        run: |
          if [ ${{ ! steps.filter.outputs.changes.base_module && steps.filter.outputs.changes.n_modules == 1 }} ]; then
            multiqc -fv --strict test-data/data/modules -m ${{ steps.filter.outputs.changes.modules[0] }}
          else if [ "${{ steps.filter.outputs.changes.pyproject }}" ]; then
            multiqc -fv --strict test-data/data/modules
          fi

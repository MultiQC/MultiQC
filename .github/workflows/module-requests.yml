name: Module Request Management

on:
  # Individual request analysis
  issue_comment:
    types: [created]
  issues:
    types: [opened]

  # Weekly bulk triage
  schedule:
    - cron: "0 9 * * 1" # Mondays at 9 AM UTC

  # Manual trigger
  workflow_dispatch:
    inputs:
      mode:
        description: "Mode: analyze-single, triage-all, or dry-run"
        required: false
        default: "triage-all"
        type: choice
        options:
          - analyze-single
          - triage-all
          - dry-run
      issue_number:
        description: "Issue number for analyze-single mode"
        required: false
        type: string

permissions:
  issues: write
  contents: read
  projects: write

jobs:
  module-request-handler:
    runs-on: ubuntu-latest

    # Only run for module requests or scheduled/manual triggers
    if: |
      github.event_name == 'schedule' ||
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' &&
       contains(github.event.issue.labels.*.name, 'module: new') &&
       contains(github.event.comment.body, '@claude analyze-module')) ||
      (github.event_name == 'issues' &&
       github.event.action == 'opened' &&
       contains(github.event.issue.labels.*.name, 'module: new'))

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify Module Request Context
        id: verify
        uses: actions/github-script@v7
        with:
          script: |
            const eventName = context.eventName;
            const action = context.payload.action;

            // For scheduled and manual runs, always proceed
            if (eventName === 'schedule' || eventName === 'workflow_dispatch') {
              console.log(`✅ ${eventName} event - proceeding with bulk operations`);
              return { isModuleRequest: true };
            }

            // For issue events, verify it's a module request
            if (eventName === 'issues' || eventName === 'issue_comment') {
              const issue = context.payload.issue;
              const hasModuleLabel = issue.labels?.some(label => label.name === 'module: new');

              // Additional check: look for module request template indicators
              const issueBody = issue.body || '';
              const hasModuleContent = issueBody.includes('Name of the tool') ||
                                     issueBody.includes('Tool homepage') ||
                                     issueBody.includes('example files');

              if (hasModuleLabel) {
                console.log(`✅ Issue #${issue.number} has 'module: new' label`);
                return { isModuleRequest: true, issueNumber: issue.number };
              } else if (hasModuleContent && action === 'opened') {
                console.log(`⚠️  Issue #${issue.number} appears to be module request but missing label`);
                console.log(`Adding 'module: new' label and proceeding...`);

                // Add the missing label
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issue.number,
                  labels: ['module: new']
                });

                return { isModuleRequest: true, issueNumber: issue.number };
              } else {
                console.log(`❌ Issue #${issue.number} is not a module request`);
                return { isModuleRequest: false };
              }
            }

            return { isModuleRequest: false };
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Exit if Not Module Request
        if: fromJSON(steps.verify.outputs.result).isModuleRequest == false
        run: |
          echo "❌ Not a module request - exiting workflow"
          exit 0

      - name: Determine Operation Mode
        id: mode
        if: fromJSON(steps.verify.outputs.result).isModuleRequest == true
        run: |
          if [[ "${{ github.event_name }}" == "schedule" ]]; then
            echo "mode=triage-all" >> $GITHUB_OUTPUT
            echo "Running scheduled weekly triage"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "mode=${{ inputs.mode }}" >> $GITHUB_OUTPUT
            echo "issue_number=${{ inputs.issue_number }}" >> $GITHUB_OUTPUT
            echo "Running manual workflow: ${{ inputs.mode }}"
          elif [[ "${{ github.event_name }}" == "issues" && "${{ github.event.action }}" == "opened" ]]; then
            echo "mode=analyze-single" >> $GITHUB_OUTPUT
            echo "issue_number=$(echo '${{ steps.verify.outputs.result }}' | jq -r '.issueNumber')" >> $GITHUB_OUTPUT
            echo "Running analysis for new issue #$(echo '${{ steps.verify.outputs.result }}' | jq -r '.issueNumber')"
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            echo "mode=analyze-single" >> $GITHUB_OUTPUT
            echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
            echo "Running on-demand analysis for issue #${{ github.event.issue.number }}"
          fi

      - name: Run Module Triage
        if: fromJSON(steps.verify.outputs.result).isModuleRequest == true
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          prompt: |
            # Module Request Triage

            **Mode**: ${{ steps.mode.outputs.mode }}
            **Issue Number**: ${{ steps.mode.outputs.issue_number }}

            ## Task

            You have access to the `triaging-module-requests` skill which implements the complete triage system.

            Based on the mode:

            ### analyze-single
            Analyze issue #${{ steps.mode.outputs.issue_number }} using the triage skill:
            - Evaluate tool popularity (GitHub stars, downloads)
            - Assess request quality (completeness, example files)
            - Calculate priority score (0-100)
            - Add appropriate labels (priority: high/medium/low, needs-examples, etc.)
            - Post detailed analysis comment with recommendations

            ### triage-all
            Perform bulk triage of all open module requests:
            - Find all issues with "module: new" label
            - Skip already-triaged issues (those with priority labels)
            - Analyze each pending request
            - Add labels and post analysis comments
            - Generate summary report on issue #3219

            ### dry-run
            Same as triage-all but:
            - Don't add labels
            - Don't post comments
            - Only output analysis to workflow logs

            Use the `triaging-module-requests` skill to perform the analysis following the documented scoring rubric and workflow.

          claude_args: |
            --max-turns 15
            --model claude-sonnet-4-20250514

      - name: Report Workflow Status
        if: always() && fromJSON(steps.verify.outputs.result).isModuleRequest == true
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const mode = '${{ steps.mode.outputs.mode }}';
            const issueNumber = '${{ steps.mode.outputs.issue_number }}';

            console.log(`✅ Module triage workflow completed`);
            console.log(`Mode: ${mode}`);
            if (issueNumber) {
              console.log(`Issue: #${issueNumber}`);
            }

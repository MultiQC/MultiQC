name: "MultiQC - Linux"
on:
  push:
    branches:
      - master
    paths-ignore:
      - "docs/**"
      - "*.md"
  pull_request:
    paths-ignore:
      - "docs/**"
      - "*.md"

jobs:
  changes:
    name: Check for changes
    runs-on: ubuntu-latest
    outputs:
      files_changed: ${{ steps.filter.outputs.changes }}
      n_files_changes: ${{ steps.filter.outputs.changes.all_files_count}}
      modules: ${{ steps.filter.outputs.changes.modules }}
      n_modules: ${{ steps.filter.outputs.changes.modules_count }}
      base_module: ${{ steps.filter.outputs.changes.base_module }}
      changelog: ${{ steps.filter.outputs.changes.changelog }}

    steps:
      - uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            modules:
              - "multiqc/modules/**"
            base_module:
              - "multiqc/modules/base_module.py"
            changelog:
              - "CHANGELOG.md"
            all_files:
              - "**"

  run_multiqc:
    name: Linux - Python ${{ matrix.python-version }}
    runs-on: ubuntu-20.04
    needs: changes
    strategy:
      matrix:
        python-version: ["3.6", "3.7", "3.8", "3.9", "3.10", "3.11"]
    timeout-minutes: 10

    steps:
      - name: Check out MultiQC code
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      # For CSP checking
      - name: Install dependencies for CI tests
        run: python -m pip install --upgrade pip setuptools beautifulsoup4

      - name: Install MultiQC
        run: pip install .

      - name: Download test data
        uses: actions/checkout@v3
        with:
          repository: ewels/MultiQC_TestData
          path: test_data

      # Set the `-m` flag if only one module has changed
      - name: "Get a `-m` flag for the `multiqc` if only one module has changed"
        uses: haya14busa/action-cond@v1
        id: single_module
        with:
          cond: ${{ ! needs.changes.outputs.base_module && needs.changes.outputs.n_modules == 1 && (needs.changes.outputs.n_files_changes == 1 || needs.changes.outputs.n_files_changes == 2 && needs.changes.outputs.changelog)}}
          if_true: "-m ${{ needs.changes.outputs.modules[0] }}"
          if_false: ""

      # Run all of the tests!
      - name: Special case input data
        run: multiqc ${{ steps.single_module.outputs.value }} test_data/data --ignore test_data/data/modules/

      - name: All modules / Custom report filename
        run: multiqc ${{ steps.single_module.outputs.value }} --lint test_data/data/modules/ --filename full_report.html

      - name: All modules / Log filename as s_name, no cleaning
        run: multiqc ${{ steps.single_module.outputs.value }} --lint test_data/data/modules/ --fullnames --fn_as_s_name

      - name: Filter out all filenames (confirm no report)
        run: |
          multiqc ${{ steps.single_module.outputs.value }} test_data/data/modules/ --filename all_ignored.html --ignore-samples '*'
          [[ ! -f all_ignored.html ]]

      - name: File-list input of dirs
        run: |
          cd test_data
          multiqc --file-list data/special_cases/dir_list.txt

      - name: Specific module / Force overwrite / Prepend dirnames / Name and comment / No data dir
        run: multiqc --lint test_data/data/modules/ -m fastqc -f -d -dd 1 -i "Forced Report" -b "This command has lots of options" --filename custom_fn --no-data-dir

      - name: For overwrite / Flat plots / Tagged modules only / Exclude module / Ignore samples / Full names / zip data dir / config file
        run: multiqc ${{ steps.single_module.outputs.value }} --lint test_data/data/modules/ -f --flat --tag methylation --exclude clusterflow --ignore-samples ngi --fullnames --zip-data-dir -c test/config_example.yaml

      - name: Specfic module / named output dir / dev template / JSON data / File list
        run: |
          cd test_data
          multiqc -m star -o tests/multiqc_report_dev -t default_dev -k json --file-list data/special_cases/file_list.txt

      - name: Empty directory (confirm no report)
        run: |
          mkdir empty_dir
          multiqc -n empty empty_dir ${{ steps.single_module.outputs.value }}
          [[ ! -f empty.html ]]

      - name: Test for missing CSPs
        run: python test/print_missing_csp.py --report full_report.html --whitelist CSP.txt

# serializer version: 1
# name: TestFastqcModule.test_fastqc_snapshot[]
  dict({
    'general_stats_data': dict({
      'fastqc': dict({
        '00050101': list([
          InputRow(sample='00050101', data={'total_sequences': 873870503.0, 'percent_gc': 41.0, 'avg_sequence_length': 148.7744877446676, 'median_sequence_length': 151, 'percent_duplicates': 45.823369853892856, 'percent_fails': 9.090909090909092}),
        ]),
        'F1-1A_S1_R1_001': list([
          InputRow(sample='F1-1A_S1_R1_001', data={'total_sequences': 18529595.0, 'percent_gc': 49.0, 'avg_sequence_length': 0, 'median_sequence_length': 0, 'percent_duplicates': 79.69657795494018, 'percent_fails': 33.33333333333333}),
        ]),
        'GY10_R1': list([
          InputRow(sample='GY10_R1', data={'total_sequences': 1.0, 'percent_gc': 16.0, 'avg_sequence_length': 72.0, 'median_sequence_length': 72, 'percent_duplicates': nan, 'percent_fails': 36.36363636363637}),
        ]),
        'NMP_R1_L1_1': list([
          InputRow(sample='NMP_R1_L1_1', data={'total_sequences': 1718888.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 9.879769028698291, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_1_val_1': list([
          InputRow(sample='NMP_R1_L1_1_val_1', data={'total_sequences': 1715854.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.81053341368205, 'median_sequence_length': 100, 'percent_duplicates': 9.85745215277727, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_2': list([
          InputRow(sample='NMP_R1_L1_2', data={'total_sequences': 1718888.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 8.930020657129234, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_2_val_2': list([
          InputRow(sample='NMP_R1_L1_2_val_2', data={'total_sequences': 1715854.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.42709403014476, 'median_sequence_length': 100, 'percent_duplicates': 8.908730168722528, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L2_1': list([
          InputRow(sample='NMP_R1_L2_1', data={'total_sequences': 915009.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 5.6840731516602006, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_1_val_1': list([
          InputRow(sample='NMP_R1_L2_1_val_1', data={'total_sequences': 913687.0, 'percent_gc': 45.0, 'avg_sequence_length': 98.61605506043098, 'median_sequence_length': 100, 'percent_duplicates': 5.630751605668408, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_2': list([
          InputRow(sample='NMP_R1_L2_2', data={'total_sequences': 915009.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 4.764346620938269, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_2_val_2': list([
          InputRow(sample='NMP_R1_L2_2_val_2', data={'total_sequences': 913687.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.27514509892337, 'median_sequence_length': 100, 'percent_duplicates': 4.746483122341289, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_1': list([
          InputRow(sample='NMP_R2_L1_1', data={'total_sequences': 336288.0, 'percent_gc': 48.0, 'avg_sequence_length': 51.0, 'median_sequence_length': 51, 'percent_duplicates': 6.999149032826608, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_1_val_1': list([
          InputRow(sample='NMP_R2_L1_1_val_1', data={'total_sequences': 335361.0, 'percent_gc': 48.0, 'avg_sequence_length': 50.19924201084801, 'median_sequence_length': 51, 'percent_duplicates': 6.700923975673419, 'percent_fails': 18.181818181818183}),
        ]),
        'NMP_R2_L1_2': list([
          InputRow(sample='NMP_R2_L1_2', data={'total_sequences': 336288.0, 'percent_gc': 48.0, 'avg_sequence_length': 51.0, 'median_sequence_length': 51, 'percent_duplicates': 6.819824107853606, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_2_val_2': list([
          InputRow(sample='NMP_R2_L1_2_val_2', data={'total_sequences': 335361.0, 'percent_gc': 48.0, 'avg_sequence_length': 50.1630541416563, 'median_sequence_length': 51, 'percent_duplicates': 6.548253022571274, 'percent_fails': 18.181818181818183}),
        ]),
        'NP_D8_R1_L1_1': list([
          InputRow(sample='NP_D8_R1_L1_1', data={'total_sequences': 2567181.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 15.327251004078846, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_1_val_1': list([
          InputRow(sample='NP_D8_R1_L1_1_val_1', data={'total_sequences': 2563715.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.78742001353504, 'median_sequence_length': 100, 'percent_duplicates': 15.287553698376627, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_2': list([
          InputRow(sample='NP_D8_R1_L1_2', data={'total_sequences': 2567181.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 14.610669109892768, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_2_val_2': list([
          InputRow(sample='NP_D8_R1_L1_2_val_2', data={'total_sequences': 2563715.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.45074998586037, 'median_sequence_length': 100, 'percent_duplicates': 14.574395346230347, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_1': list([
          InputRow(sample='NP_D8_R2_L1_1', data={'total_sequences': 838907.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 11.35909418827704, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_1_val_1': list([
          InputRow(sample='NP_D8_R2_L1_1_val_1', data={'total_sequences': 838254.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.83251496563095, 'median_sequence_length': 100, 'percent_duplicates': 11.343572982075244, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_2': list([
          InputRow(sample='NP_D8_R2_L1_2', data={'total_sequences': 838907.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 11.091175156227692, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_2_val_2': list([
          InputRow(sample='NP_D8_R2_L1_2_val_2', data={'total_sequences': 838254.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.71836340774992, 'median_sequence_length': 100, 'percent_duplicates': 11.07445879896737, 'percent_fails': 0.0}),
        ]),
        'SK-GBD-000919.1': list([
          InputRow(sample='SK-GBD-000919.1', data={'total_sequences': 0.0, 'percent_gc': 0.0, 'avg_sequence_length': 0, 'median_sequence_length': 0, 'percent_duplicates': 0.0, 'percent_fails': 0.0}),
        ]),
        'SRR1067503_1': list([
          InputRow(sample='SRR1067503_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 13.158357833208953, 'percent_fails': 8.333333333333332}),
        ]),
        'SRR1067503_v10_1': list([
          InputRow(sample='SRR1067503_v10_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067503_v7_1': list([
          InputRow(sample='SRR1067503_v7_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067505_1': list([
          InputRow(sample='SRR1067505_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 8.211571393929418, 'percent_fails': 16.666666666666664}),
        ]),
        'SRR1067505_v10_1': list([
          InputRow(sample='SRR1067505_v10_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067505_v7_1': list([
          InputRow(sample='SRR1067505_v7_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'run1_2': list([
          InputRow(sample='run1_2', data={'total_sequences': 30.0, 'percent_gc': 48.0, 'avg_sequence_length': 150.7, 'median_sequence_length': 150, 'percent_duplicates': 6.666666666666671, 'percent_fails': 50.0}),
        ]),
        'sample1_S1_L001_R2_001': list([
          InputRow(sample='sample1_S1_L001_R2_001', data={'total_sequences': 82330.0, 'percent_gc': 44.0, 'avg_sequence_length': 301.0, 'median_sequence_length': 301, 'percent_duplicates': 70.25507105550832, 'percent_fails': 54.54545454545454}),
        ]),
        'single': list([
          InputRow(sample='single', data={'total_sequences': 266736.0, 'percent_gc': 50.0, 'avg_sequence_length': 100.05205146661868, 'median_sequence_length': 100, 'percent_duplicates': 1.7720375527608212, 'percent_fails': 40.0}),
        ]),
        'test': list([
          InputRow(sample='test', data={'total_sequences': 240.0, 'percent_gc': 59.0, 'avg_sequence_length': 619.0145833333333, 'median_sequence_length': 624, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'test_1': list([
          InputRow(sample='test_1', data={'total_sequences': 266736.0, 'percent_gc': 50.0, 'avg_sequence_length': 100.05205146661868, 'median_sequence_length': 100, 'percent_duplicates': 1.7720375527608212, 'percent_fails': 40.0}),
        ]),
        'test_2': list([
          InputRow(sample='test_2', data={'total_sequences': 266736.0, 'percent_gc': 48.0, 'avg_sequence_length': 100.05091551196689, 'median_sequence_length': 100, 'percent_duplicates': 0.9935368127944884, 'percent_fails': 20.0}),
        ]),
      }),
    }),
    'general_stats_headers': dict({
      'fastqc': dict({
        'avg_sequence_length': dict({
          'description': 'Average read length',
          'format': '{:,.0f}',
          'hidden': True,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn',
          'suffix': ' bp',
          'title': 'Avg len',
        }),
        'median_sequence_length': dict({
          'description': 'Median read length',
          'format': '{:,.0f}',
          'hidden': False,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn',
          'suffix': ' bp',
          'title': 'Median len',
        }),
        'percent_duplicates': dict({
          'description': '% duplicate reads',
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn-rev',
          'suffix': '%',
          'title': 'Dups',
        }),
        'percent_fails': dict({
          'description': 'Percentage of modules failed in FastQC report (includes those not plotted here)',
          'format': '{:,.0f}',
          'hidden': True,
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'Reds',
          'suffix': '%',
          'title': 'Failed',
        }),
        'percent_gc': dict({
          'description': 'Average % GC content',
          'format': '{:,.1f}',
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'PuRd',
          'suffix': '%',
          'title': 'GC',
        }),
        'total_sequences': dict({
          'description': 'Total sequences (millions)',
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'Blues',
          'shared_key': 'read_count',
          'title': 'Seqs',
        }),
      }),
    }),
    'module_info': dict({
      'anchor': 'fastqc',
      'doi': list([
      ]),
      'href': list([
        'http://www.bioinformatics.babraham.ac.uk/projects/fastqc/',
      ]),
      'info': 'Quality control tool for high throughput sequencing data',
      'name': 'FastQC',
    }),
    'saved_raw_data': dict({
      'multiqc_fastqc': dict({
        '00050101': dict({
          '%GC': 41.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': '00050101.aligned-bwa.sorted-samtools.merged.rh.dedupped.bam',
          'Sequence length': '30-151',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 873870503.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 148.774488,
          'basic_statistics': 'pass',
          'median_sequence_length': 151,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 54.17663,
        }),
        'F1-1A_S1_R1_001': dict({
          '%GC': 49.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'F1-1A_S1_R1_001.fastq.gz',
          'Sequence length': '35-151',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 18529595.0,
          'basic_statistics': 'pass',
          'overrepresented_sequences': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'fail',
          'total_deduplicated_percentage': 20.303422,
        }),
        'GY10_R1': dict({
          '%GC': 16.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'GY10_R1.fq.gz',
          'Sequence length': 72.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 72.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 72,
          'overrepresented_sequences': 'fail',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'warn',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': None,
        }),
        'NMP_R1_L1_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1718888.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 90.120231,
        }),
        'NMP_R1_L1_1_val_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1715854.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.810533,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 90.142548,
        }),
        'NMP_R1_L1_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1718888.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 91.069979,
        }),
        'NMP_R1_L1_2_val_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1715854.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.427094,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 91.09127,
        }),
        'NMP_R1_L2_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 915009.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'warn',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 94.315927,
        }),
        'NMP_R1_L2_1_val_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 913687.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 98.616055,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 94.369248,
        }),
        'NMP_R1_L2_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 915009.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'warn',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 95.235653,
        }),
        'NMP_R1_L2_2_val_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 913687.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.275145,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'warn',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 95.253517,
        }),
        'NMP_R2_L1_1': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_1.fastq.gz',
          'Sequence length': 51.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 336288.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 51.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 93.000851,
        }),
        'NMP_R2_L1_1_val_1': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_1_val_1.fq.gz',
          'Sequence length': '20-51',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 335361.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 50.199242,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.299076,
        }),
        'NMP_R2_L1_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_2.fastq.gz',
          'Sequence length': 51.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 336288.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 51.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 93.180176,
        }),
        'NMP_R2_L1_2_val_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_2_val_2.fq.gz',
          'Sequence length': '20-51',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 335361.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 50.163054,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.451747,
        }),
        'NP_D8_R1_L1_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2567181.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 84.672749,
        }),
        'NP_D8_R1_L1_1_val_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2563715.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.78742,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 84.712446,
        }),
        'NP_D8_R1_L1_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2567181.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 85.389331,
        }),
        'NP_D8_R1_L1_2_val_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2563715.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.45075,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 85.425605,
        }),
        'NP_D8_R2_L1_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838907.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 88.640906,
        }),
        'NP_D8_R2_L1_1_val_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838254.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.832515,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 88.656427,
        }),
        'NP_D8_R2_L1_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838907.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 88.908825,
        }),
        'NP_D8_R2_L1_2_val_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838254.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.718363,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 88.925541,
        }),
        'SK-GBD-000919.1': dict({
          '%GC': 0.0,
          'Encoding': 'Illumina 1.5',
          'File type': 'null',
          'Filename': 'SK-GBD-000919.1.fastq',
          'Sequence length': 0.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 0.0,
          'adapter_content': 'warn',
          'basic_statistics': 'pass',
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_sequence_gc_content': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 100.0,
        }),
        'SRR1067503_1': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_1.fastq.gz',
          'Sequence length': 36.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 30680980.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'fail',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 86.841642,
        }),
        'SRR1067503_v10_1': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_v10_1.fastq.gz',
          'Filtered Sequences': 0.0,
          'Sequence length': 36.0,
          'Total Sequences': 30680980.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067503_v7_1': dict({
          '%GC': 44.0,
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_v7_1.fastq.gz',
          'Sequence length': 36.0,
          'Total Sequences': 30680980.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067505_1': dict({
          '%GC': 47.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_1.fastq.gz',
          'Sequence length': 36.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 18361776.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'fail',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 91.788429,
        }),
        'SRR1067505_v10_1': dict({
          '%GC': 47.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_v10_1.fastq.gz',
          'Filtered Sequences': 0.0,
          'Sequence length': 36.0,
          'Total Sequences': 18361776.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'warn',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067505_v7_1': dict({
          '%GC': 47.0,
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_v7_1.fastq.gz',
          'Sequence length': 36.0,
          'Total Sequences': 18361776.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'warn',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'pass',
        }),
        'run1_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'run1_2.fq',
          'Sequence length': '150-154',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '4.5 kbp',
          'Total Sequences': 30.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 150.7,
          'basic_statistics': 'pass',
          'median_sequence_length': 150,
          'overrepresented_sequences': 'fail',
          'per_base_n_content': 'fail',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.333333,
        }),
        'sample1_S1_L001_R2_001': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'sample1_S1_L001_R2_001.fastq.gz',
          'Sequence length': 301.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 82330.0,
          'adapter_content': 'fail',
          'avg_sequence_length': 301.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 301,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'fail',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'warn',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'fail',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 29.744929,
        }),
        'single': dict({
          '%GC': 50.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'single.fastq.gz',
          'Sequence length': '91-108',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.052051,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 98.227962,
        }),
        'test': dict({
          '%GC': 59.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test.fastq_barcode01',
          'Sequence length': '135-1565',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 240.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 619.014583,
          'basic_statistics': 'pass',
          'median_sequence_length': 624,
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'test_1': dict({
          '%GC': 50.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test_1.fastq.gz',
          'Sequence length': '91-108',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.052051,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 98.227962,
        }),
        'test_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test_2.fastq.gz',
          'Sequence length': '90-107',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.050916,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 99.006463,
        }),
      }),
    }),
    'sections': list([
      dict({
        'anchor': 'fastqc_sequence_counts',
        'comment': '',
        'description': '<p>Sequence counts for each sample. Duplicate read counts are an estimate only.</p>',
        'helptext': '''
          <p>This plot show the total number of reads, broken down into unique and duplicate
          if possible (only more recent versions of FastQC give duplicate info).</p>
          <p>You can read more about duplicate calculation in the
          <a href="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/8%20Duplicate%20Sequences.html">FastQC documentation</a>.
          A small part has been copied here for convenience:</p>
          <p><em>Only sequences which first appear in the first 100,000 sequences
          in each file are analysed. This should be enough to get a good impression
          for the duplication levels in the whole file. Each sequence is tracked to
          the end of the file to give a representative count of the overall duplication level.</em></p>
          <p><em>The duplication detection requires an exact sequence match over the whole length of
          the sequence. Any reads over 75bp in length are truncated to 50bp for this analysis.</em></p>
        ''',
        'name': 'Sequence Counts',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_sequence_quality',
        'comment': '',
        'description': '<p>The mean quality value across each base position in the read.</p>',
        'helptext': '''
          <p>To enable multiple samples to be plotted on the same graph, only the mean quality
          scores are plotted (unlike the box plots seen in FastQC reports).</p>
          <p>Taken from the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/2%20Per%20Base%20Sequence%20Quality.html">FastQC help</a>:</p>
          <p><em>The y-axis on the graph shows the quality scores. The higher the score, the better
          the base call. The background of the graph divides the y axis into very good quality
          calls (green), calls of reasonable quality (orange), and calls of poor quality (red).
          The quality of calls on most platforms will degrade as the run progresses, so it is
          common to see base calls falling into the orange area towards the end of a read.</em></p>
        ''',
        'name': 'Sequence Quality Histograms',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_sequence_quality_scores',
        'comment': '',
        'description': '<p>The number of reads with average quality scores. Shows if a subset of reads has poor quality.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/3%20Per%20Sequence%20Quality%20Scores.html">FastQC help</a>:</p>
          <p><em>The per sequence quality score report allows you to see if a subset of your
          sequences have universally low quality values. It is often the case that a
          subset of sequences will have universally poor quality, however these should
          represent only a small percentage of the total sequences.</em></p>
        ''',
        'name': 'Per Sequence Quality Scores',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_sequence_content',
        'comment': '',
        'description': '<p>The proportion of each base position for which each of the four normal DNA bases has been called.</p>',
        'helptext': '''
          <p>To enable multiple samples to be shown in a single plot, the base composition data
          is shown as a heatmap. The colours represent the balance between the four bases:
          an even distribution should give an even muddy brown colour. Hover over the plot
          to see the percentage of the four bases under the cursor.</p>
          <p><strong>To see the data as a line plot, as in the original FastQC graph, click on a sample track.</strong></p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/4%20Per%20Base%20Sequence%20Content.html">FastQC help</a>:</p>
          <p><em>Per Base Sequence Content plots out the proportion of each base position in a
          file for which each of the four normal DNA bases has been called.</em></p>
          <p><em>In a random library you would expect that there would be little to no difference
          between the different bases of a sequence run, so the lines in this plot should
          run parallel with each other. The relative amount of each base should reflect
          the overall amount of these bases in your genome, but in any case they should
          not be hugely imbalanced from each other.</em></p>
          <p><em>It's worth noting that some types of library will always produce biased sequence
          composition, normally at the start of the read. Libraries produced by priming
          using random hexamers (including nearly all RNA-Seq libraries) and those which
          were fragmented using transposases inherit an intrinsic bias in the positions
          at which reads start. This bias does not concern an absolute sequence, but instead
          provides enrichement of a number of different K-mers at the 5' end of the reads.
          Whilst this is a true technical bias, it isn't something which can be corrected
          by trimming and in most cases doesn't seem to adversely affect the downstream
          analysis.</em></p>
        ''',
        'name': 'Per Base Sequence Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_sequence_gc_content',
        'comment': '',
        'description': '<p><strong>The dashed black line shows theoretical GC content:</strong> <code>Human Genome</code></p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/5%20Per%20Sequence%20GC%20Content.html">FastQC help</a>:</p>
          <p><em>This module measures the GC content across the whole length of each sequence
          in a file and compares it to a modelled normal distribution of GC content.</em></p>
          <p><em>In a normal random library you would expect to see a roughly normal distribution
          of GC content where the central peak corresponds to the overall GC content of
          the underlying genome. Since we don't know the GC content of the genome the
          modal GC content is calculated from the observed data and used to build a
          reference distribution.</em></p>
          <p><em>An unusually shaped distribution could indicate a contaminated library or
          some other kinds of biased subset. A normal distribution which is shifted
          indicates some systematic bias which is independent of base position. If there
          is a systematic bias which creates a shifted normal distribution then this won't
          be flagged as an error by the module since it doesn't know what your genome's
          GC content should be.</em></p>
        ''',
        'name': 'Per Sequence GC Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_n_content',
        'comment': '',
        'description': '<p>The percentage of base calls at each position for which an <code>N</code> was called.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/6%20Per%20Base%20N%20Content.html">FastQC help</a>:</p>
          <p><em>If a sequencer is unable to make a base call with sufficient confidence then it will
          normally substitute an <code>N</code> rather than a conventional base call. This graph shows the
          percentage of base calls at each position for which an <code>N</code> was called.</em></p>
          <p><em>It's not unusual to see a very low proportion of Ns appearing in a sequence, especially
          nearer the end of a sequence. However, if this proportion rises above a few percent
          it suggests that the analysis pipeline was unable to interpret the data well enough to
          make valid base calls.</em></p>
        ''',
        'name': 'Per Base N Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_sequence_length_distribution',
        'comment': '',
        'description': '<p>The distribution of fragment sizes (read lengths) found. See the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/7%20Sequence%20Length%20Distribution.html">FastQC help</a></p>',
        'helptext': '',
        'name': 'Sequence Length Distribution',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_sequence_duplication_levels',
        'comment': '',
        'description': '<p>The relative level of duplication found for every sequence.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/8%20Duplicate%20Sequences.html">FastQC Help</a>:</p>
          <p><em>In a diverse library most sequences will occur only once in the final set.
          A low level of duplication may indicate a very high level of coverage of the
          target sequence, but a high level of duplication is more likely to indicate
          some kind of enrichment bias (e.g. PCR over amplification). This graph shows
          the degree of duplication for every sequence in a library: the relative
          number of sequences with different degrees of duplication.</em></p>
          <p><em>Only sequences which first appear in the first 100,000 sequences
          in each file are analysed. This should be enough to get a good impression
          for the duplication levels in the whole file. Each sequence is tracked to
          the end of the file to give a representative count of the overall duplication level.</em></p>
          <p><em>The duplication detection requires an exact sequence match over the whole length of
          the sequence. Any reads over 75bp in length are truncated to 50bp for this analysis.</em></p>
          <p><em>In a properly diverse library most sequences should fall into the far left of the
          plot in both the red and blue lines. A general level of enrichment, indicating broad
          oversequencing in the library will tend to flatten the lines, lowering the low end
          and generally raising other categories. More specific enrichments of subsets, or
          the presence of low complexity contaminants will tend to produce spikes towards the
          right of the plot.</em></p>
        ''',
        'name': 'Sequence Duplication Levels',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_overrepresented_sequences',
        'comment': '',
        'description': '<p>The total amount of overrepresented sequences found in each library.</p>',
        'helptext': '''
          <p>FastQC calculates and lists overrepresented sequences in FastQ files. It would not be
          possible to show this for all samples in a MultiQC report, so instead this plot shows
          the <em>number of sequences</em> categorized as overrepresented.</p>
          <p>Sometimes, a single sequence  may account for a large number of reads in a dataset.
          To show this, the bars are split into two: the first shows the overrepresented reads
          that come from the single most common sequence. The second shows the total count
          from all remaining overrepresented sequences.</p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/9%20Overrepresented%20Sequences.html">FastQC Help</a>:</p>
          <p><em>A normal high-throughput library will contain a diverse set of sequences, with no
          individual sequence making up a tiny fraction of the whole. Finding that a single
          sequence is very overrepresented in the set either means that it is highly biologically
          significant, or indicates that the library is contaminated, or not as diverse as you expected.</em></p>
          <p><em>FastQC lists all the sequences which make up more than 0.1% of the total.
          To conserve memory only sequences which appear in the first 100,000 sequences are tracked
          to the end of the file. It is therefore possible that a sequence which is overrepresented
          but doesn't appear at the start of the file for some reason could be missed by this module.</em></p>
        ''',
        'name': 'Overrepresented sequences by sample',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_top_overrepresented_sequences',
        'comment': '',
        'description': '''
          <p>Top overrepresented sequences across all samples. The table shows 20
          most overrepresented sequences across all samples, ranked by the number of samples they occur in.</p>
        ''',
        'helptext': '',
        'name': 'Top overrepresented sequences',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_adapter_content',
        'comment': '',
        'description': '''
          <p>The cumulative percentage count of the proportion of your
                      library which has seen each of the adapter sequences at each position.</p>
        ''',
        'helptext': '''
          <p>Note that only samples with ≥ 0.1% adapter contamination are shown.</p>
          <p>There may be several lines per sample, as one is shown for each adapter
          detected in the file.</p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/10%20Adapter%20Content.html">FastQC Help</a>:</p>
          <p><em>The plot shows a cumulative percentage count of the proportion
          of your library which has seen each of the adapter sequences at each position.
          Once a sequence has been seen in a read it is counted as being present
          right through to the end of the read so the percentages you see will only
          increase as the read length goes on.</em></p>
        ''',
        'name': 'Adapter Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_status_checks',
        'comment': '',
        'description': '''
          <p>Status for each FastQC section showing whether results seem entirely normal (green),
          slightly abnormal (orange) or very unusual (red).</p>
        ''',
        'helptext': '''
          <p>FastQC assigns a status for each section of the report.
          These give a quick evaluation of whether the results of the analysis seem
          entirely normal (green), slightly abnormal (orange) or very unusual (red).</p>
          <p>It is important to stress that although the analysis results appear to give a pass/fail result,
          these evaluations must be taken in the context of what you expect from your library.
          A 'normal' sample as far as FastQC is concerned is random and diverse.
          Some experiments may be expected to produce libraries which are biased in particular ways.
          You should treat the summary evaluations therefore as pointers to where you should concentrate
          your attention and understand why your library may not look random and diverse.</p>
          <p>Specific guidance on how to interpret the output of each module can be found in the relevant
          report section, or in the <a href="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/">FastQC help</a>.</p>
          <p>In this heatmap, we summarise all of these into a single heatmap for a quick overview.
          Note that not all FastQC sections have plots in MultiQC reports, but all status checks
          are shown in this heatmap.</p>
        ''',
        'name': 'Status Checks',
        'plot_id': None,
        'plot_type': None,
      }),
    ]),
    'software_versions': dict({
      'FastQC': list([
        tuple(
          <Version('0.7.2')>,
          '0.7.2',
        ),
        tuple(
          <Version('0.10.1')>,
          '0.10.1',
        ),
        tuple(
          <Version('0.11.2')>,
          '0.11.2',
        ),
        tuple(
          <Version('0.11.5')>,
          '0.11.5',
        ),
        tuple(
          <Version('0.11.8')>,
          '0.11.8',
        ),
        tuple(
          <Version('0.11.9')>,
          '0.11.9',
        ),
        tuple(
          <Version('0.12.1')>,
          '0.12.1',
        ),
      ]),
    }),
  })
# ---
# name: TestFastqcModule.test_fastqc_snapshot[groups]
  dict({
    'general_stats_data': dict({
      'fastqc': dict({
        '00050101': list([
          InputRow(sample='00050101', data={'total_sequences': 873870503.0, 'percent_gc': 41.0, 'avg_sequence_length': 148.7744877446676, 'median_sequence_length': 151, 'percent_duplicates': 45.823369853892856, 'percent_fails': 9.090909090909092}),
        ]),
        'F1-1A_S1_R1_001': list([
          InputRow(sample='F1-1A_S1_R1_001', data={'total_sequences': 18529595.0, 'percent_gc': 49.0, 'avg_sequence_length': 0, 'median_sequence_length': 0, 'percent_duplicates': 79.69657795494018, 'percent_fails': 33.33333333333333}),
        ]),
        'GY10_R1': list([
          InputRow(sample='GY10_R1', data={'total_sequences': 1.0, 'percent_gc': 16.0, 'avg_sequence_length': 72.0, 'median_sequence_length': 72, 'percent_duplicates': nan, 'percent_fails': 36.36363636363637}),
        ]),
        'NMP_R1_L1_1': list([
          InputRow(sample='NMP_R1_L1_1', data={'total_sequences': 1718888.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 9.879769028698291, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_1_val_1': list([
          InputRow(sample='NMP_R1_L1_1_val_1', data={'total_sequences': 1715854.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.81053341368205, 'median_sequence_length': 100, 'percent_duplicates': 9.85745215277727, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_2': list([
          InputRow(sample='NMP_R1_L1_2', data={'total_sequences': 1718888.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 8.930020657129234, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_2_val_2': list([
          InputRow(sample='NMP_R1_L1_2_val_2', data={'total_sequences': 1715854.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.42709403014476, 'median_sequence_length': 100, 'percent_duplicates': 8.908730168722528, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L2_1': list([
          InputRow(sample='NMP_R1_L2_1', data={'total_sequences': 915009.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 5.6840731516602006, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_1_val_1': list([
          InputRow(sample='NMP_R1_L2_1_val_1', data={'total_sequences': 913687.0, 'percent_gc': 45.0, 'avg_sequence_length': 98.61605506043098, 'median_sequence_length': 100, 'percent_duplicates': 5.630751605668408, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_2': list([
          InputRow(sample='NMP_R1_L2_2', data={'total_sequences': 915009.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 4.764346620938269, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_2_val_2': list([
          InputRow(sample='NMP_R1_L2_2_val_2', data={'total_sequences': 913687.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.27514509892337, 'median_sequence_length': 100, 'percent_duplicates': 4.746483122341289, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_1': list([
          InputRow(sample='NMP_R2_L1_1', data={'total_sequences': 336288.0, 'percent_gc': 48.0, 'avg_sequence_length': 51.0, 'median_sequence_length': 51, 'percent_duplicates': 6.999149032826608, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_1_val_1': list([
          InputRow(sample='NMP_R2_L1_1_val_1', data={'total_sequences': 335361.0, 'percent_gc': 48.0, 'avg_sequence_length': 50.19924201084801, 'median_sequence_length': 51, 'percent_duplicates': 6.700923975673419, 'percent_fails': 18.181818181818183}),
        ]),
        'NMP_R2_L1_2': list([
          InputRow(sample='NMP_R2_L1_2', data={'total_sequences': 336288.0, 'percent_gc': 48.0, 'avg_sequence_length': 51.0, 'median_sequence_length': 51, 'percent_duplicates': 6.819824107853606, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_2_val_2': list([
          InputRow(sample='NMP_R2_L1_2_val_2', data={'total_sequences': 335361.0, 'percent_gc': 48.0, 'avg_sequence_length': 50.1630541416563, 'median_sequence_length': 51, 'percent_duplicates': 6.548253022571274, 'percent_fails': 18.181818181818183}),
        ]),
        'NP_D8_R1_L1_1': list([
          InputRow(sample='NP_D8_R1_L1_1', data={'total_sequences': 2567181.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 15.327251004078846, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_1_val_1': list([
          InputRow(sample='NP_D8_R1_L1_1_val_1', data={'total_sequences': 2563715.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.78742001353504, 'median_sequence_length': 100, 'percent_duplicates': 15.287553698376627, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_2': list([
          InputRow(sample='NP_D8_R1_L1_2', data={'total_sequences': 2567181.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 14.610669109892768, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_2_val_2': list([
          InputRow(sample='NP_D8_R1_L1_2_val_2', data={'total_sequences': 2563715.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.45074998586037, 'median_sequence_length': 100, 'percent_duplicates': 14.574395346230347, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_1': list([
          InputRow(sample='NP_D8_R2_L1_1', data={'total_sequences': 838907.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 11.35909418827704, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_1_val_1': list([
          InputRow(sample='NP_D8_R2_L1_1_val_1', data={'total_sequences': 838254.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.83251496563095, 'median_sequence_length': 100, 'percent_duplicates': 11.343572982075244, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_2': list([
          InputRow(sample='NP_D8_R2_L1_2', data={'total_sequences': 838907.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 11.091175156227692, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_2_val_2': list([
          InputRow(sample='NP_D8_R2_L1_2_val_2', data={'total_sequences': 838254.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.71836340774992, 'median_sequence_length': 100, 'percent_duplicates': 11.07445879896737, 'percent_fails': 0.0}),
        ]),
        'SK-GBD-000919.1': list([
          InputRow(sample='SK-GBD-000919.1', data={'total_sequences': 0.0, 'percent_gc': 0.0, 'avg_sequence_length': 0, 'median_sequence_length': 0, 'percent_duplicates': 0.0, 'percent_fails': 0.0}),
        ]),
        'SRR1067503_1': list([
          InputRow(sample='SRR1067503_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 13.158357833208953, 'percent_fails': 8.333333333333332}),
        ]),
        'SRR1067503_v10_1': list([
          InputRow(sample='SRR1067503_v10_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067503_v7_1': list([
          InputRow(sample='SRR1067503_v7_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067505_1': list([
          InputRow(sample='SRR1067505_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 8.211571393929418, 'percent_fails': 16.666666666666664}),
        ]),
        'SRR1067505_v10_1': list([
          InputRow(sample='SRR1067505_v10_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067505_v7_1': list([
          InputRow(sample='SRR1067505_v7_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'run1_2': list([
          InputRow(sample='run1_2', data={'total_sequences': 30.0, 'percent_gc': 48.0, 'avg_sequence_length': 150.7, 'median_sequence_length': 150, 'percent_duplicates': 6.666666666666671, 'percent_fails': 50.0}),
        ]),
        'sample1_S1_L001_R2_001': list([
          InputRow(sample='sample1_S1_L001_R2_001', data={'total_sequences': 82330.0, 'percent_gc': 44.0, 'avg_sequence_length': 301.0, 'median_sequence_length': 301, 'percent_duplicates': 70.25507105550832, 'percent_fails': 54.54545454545454}),
        ]),
        'single': list([
          InputRow(sample='single', data={'total_sequences': 266736.0, 'percent_gc': 50.0, 'avg_sequence_length': 100.05205146661868, 'median_sequence_length': 100, 'percent_duplicates': 1.7720375527608212, 'percent_fails': 40.0}),
        ]),
        'test': list([
          InputRow(sample='test', data={'total_sequences': 240.0, 'percent_gc': 59.0, 'avg_sequence_length': 619.0145833333333, 'median_sequence_length': 624, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'test_1': list([
          InputRow(sample='test_1', data={'total_sequences': 266736.0, 'percent_gc': 50.0, 'avg_sequence_length': 100.05205146661868, 'median_sequence_length': 100, 'percent_duplicates': 1.7720375527608212, 'percent_fails': 40.0}),
        ]),
        'test_2': list([
          InputRow(sample='test_2', data={'total_sequences': 266736.0, 'percent_gc': 48.0, 'avg_sequence_length': 100.05091551196689, 'median_sequence_length': 100, 'percent_duplicates': 0.9935368127944884, 'percent_fails': 20.0}),
        ]),
      }),
    }),
    'general_stats_headers': dict({
      'fastqc': dict({
        'avg_sequence_length': dict({
          'description': 'Average read length',
          'format': '{:,.0f}',
          'hidden': True,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn',
          'suffix': ' bp',
          'title': 'Avg len',
        }),
        'median_sequence_length': dict({
          'description': 'Median read length',
          'format': '{:,.0f}',
          'hidden': False,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn',
          'suffix': ' bp',
          'title': 'Median len',
        }),
        'percent_duplicates': dict({
          'description': '% duplicate reads',
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn-rev',
          'suffix': '%',
          'title': 'Dups',
        }),
        'percent_fails': dict({
          'description': 'Percentage of modules failed in FastQC report (includes those not plotted here)',
          'format': '{:,.0f}',
          'hidden': True,
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'Reds',
          'suffix': '%',
          'title': 'Failed',
        }),
        'percent_gc': dict({
          'description': 'Average % GC content',
          'format': '{:,.1f}',
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'PuRd',
          'suffix': '%',
          'title': 'GC',
        }),
        'total_sequences': dict({
          'description': 'Total sequences (millions)',
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'Blues',
          'shared_key': 'read_count',
          'title': 'Seqs',
        }),
      }),
    }),
    'module_info': dict({
      'anchor': 'fastqc',
      'doi': list([
      ]),
      'href': list([
        'http://www.bioinformatics.babraham.ac.uk/projects/fastqc/',
      ]),
      'info': 'Quality control tool for high throughput sequencing data',
      'name': 'FastQC',
    }),
    'saved_raw_data': dict({
      'multiqc_fastqc': dict({
        '00050101': dict({
          '%GC': 41.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': '00050101.aligned-bwa.sorted-samtools.merged.rh.dedupped.bam',
          'Sequence length': '30-151',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 873870503.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 148.774488,
          'basic_statistics': 'pass',
          'median_sequence_length': 151,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 54.17663,
        }),
        'F1-1A_S1_R1_001': dict({
          '%GC': 49.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'F1-1A_S1_R1_001.fastq.gz',
          'Sequence length': '35-151',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 18529595.0,
          'basic_statistics': 'pass',
          'overrepresented_sequences': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'fail',
          'total_deduplicated_percentage': 20.303422,
        }),
        'GY10_R1': dict({
          '%GC': 16.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'GY10_R1.fq.gz',
          'Sequence length': 72.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 72.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 72,
          'overrepresented_sequences': 'fail',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'warn',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': None,
        }),
        'NMP_R1_L1_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1718888.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 90.120231,
        }),
        'NMP_R1_L1_1_val_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1715854.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.810533,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 90.142548,
        }),
        'NMP_R1_L1_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1718888.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 91.069979,
        }),
        'NMP_R1_L1_2_val_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1715854.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.427094,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 91.09127,
        }),
        'NMP_R1_L2_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 915009.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'warn',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 94.315927,
        }),
        'NMP_R1_L2_1_val_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 913687.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 98.616055,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 94.369248,
        }),
        'NMP_R1_L2_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 915009.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'warn',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 95.235653,
        }),
        'NMP_R1_L2_2_val_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 913687.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.275145,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'warn',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 95.253517,
        }),
        'NMP_R2_L1_1': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_1.fastq.gz',
          'Sequence length': 51.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 336288.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 51.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 93.000851,
        }),
        'NMP_R2_L1_1_val_1': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_1_val_1.fq.gz',
          'Sequence length': '20-51',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 335361.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 50.199242,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.299076,
        }),
        'NMP_R2_L1_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_2.fastq.gz',
          'Sequence length': 51.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 336288.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 51.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 93.180176,
        }),
        'NMP_R2_L1_2_val_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_2_val_2.fq.gz',
          'Sequence length': '20-51',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 335361.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 50.163054,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.451747,
        }),
        'NP_D8_R1_L1_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2567181.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 84.672749,
        }),
        'NP_D8_R1_L1_1_val_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2563715.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.78742,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 84.712446,
        }),
        'NP_D8_R1_L1_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2567181.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 85.389331,
        }),
        'NP_D8_R1_L1_2_val_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2563715.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.45075,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 85.425605,
        }),
        'NP_D8_R2_L1_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838907.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 88.640906,
        }),
        'NP_D8_R2_L1_1_val_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838254.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.832515,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 88.656427,
        }),
        'NP_D8_R2_L1_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838907.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 88.908825,
        }),
        'NP_D8_R2_L1_2_val_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838254.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.718363,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 88.925541,
        }),
        'SK-GBD-000919.1': dict({
          '%GC': 0.0,
          'Encoding': 'Illumina 1.5',
          'File type': 'null',
          'Filename': 'SK-GBD-000919.1.fastq',
          'Sequence length': 0.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 0.0,
          'adapter_content': 'warn',
          'basic_statistics': 'pass',
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_sequence_gc_content': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 100.0,
        }),
        'SRR1067503_1': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_1.fastq.gz',
          'Sequence length': 36.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 30680980.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'fail',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 86.841642,
        }),
        'SRR1067503_v10_1': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_v10_1.fastq.gz',
          'Filtered Sequences': 0.0,
          'Sequence length': 36.0,
          'Total Sequences': 30680980.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067503_v7_1': dict({
          '%GC': 44.0,
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_v7_1.fastq.gz',
          'Sequence length': 36.0,
          'Total Sequences': 30680980.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067505_1': dict({
          '%GC': 47.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_1.fastq.gz',
          'Sequence length': 36.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 18361776.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'fail',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 91.788429,
        }),
        'SRR1067505_v10_1': dict({
          '%GC': 47.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_v10_1.fastq.gz',
          'Filtered Sequences': 0.0,
          'Sequence length': 36.0,
          'Total Sequences': 18361776.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'warn',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067505_v7_1': dict({
          '%GC': 47.0,
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_v7_1.fastq.gz',
          'Sequence length': 36.0,
          'Total Sequences': 18361776.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'warn',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'pass',
        }),
        'run1_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'run1_2.fq',
          'Sequence length': '150-154',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '4.5 kbp',
          'Total Sequences': 30.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 150.7,
          'basic_statistics': 'pass',
          'median_sequence_length': 150,
          'overrepresented_sequences': 'fail',
          'per_base_n_content': 'fail',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.333333,
        }),
        'sample1_S1_L001_R2_001': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'sample1_S1_L001_R2_001.fastq.gz',
          'Sequence length': 301.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 82330.0,
          'adapter_content': 'fail',
          'avg_sequence_length': 301.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 301,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'fail',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'warn',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'fail',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 29.744929,
        }),
        'single': dict({
          '%GC': 50.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'single.fastq.gz',
          'Sequence length': '91-108',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.052051,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 98.227962,
        }),
        'test': dict({
          '%GC': 59.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test.fastq_barcode01',
          'Sequence length': '135-1565',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 240.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 619.014583,
          'basic_statistics': 'pass',
          'median_sequence_length': 624,
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'test_1': dict({
          '%GC': 50.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test_1.fastq.gz',
          'Sequence length': '91-108',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.052051,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 98.227962,
        }),
        'test_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test_2.fastq.gz',
          'Sequence length': '90-107',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.050916,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 99.006463,
        }),
      }),
    }),
    'sections': list([
      dict({
        'anchor': 'fastqc_sequence_counts',
        'comment': '',
        'description': '<p>Sequence counts for each sample. Duplicate read counts are an estimate only.</p>',
        'helptext': '''
          <p>This plot show the total number of reads, broken down into unique and duplicate
          if possible (only more recent versions of FastQC give duplicate info).</p>
          <p>You can read more about duplicate calculation in the
          <a href="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/8%20Duplicate%20Sequences.html">FastQC documentation</a>.
          A small part has been copied here for convenience:</p>
          <p><em>Only sequences which first appear in the first 100,000 sequences
          in each file are analysed. This should be enough to get a good impression
          for the duplication levels in the whole file. Each sequence is tracked to
          the end of the file to give a representative count of the overall duplication level.</em></p>
          <p><em>The duplication detection requires an exact sequence match over the whole length of
          the sequence. Any reads over 75bp in length are truncated to 50bp for this analysis.</em></p>
        ''',
        'name': 'Sequence Counts',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_sequence_quality',
        'comment': '',
        'description': '<p>The mean quality value across each base position in the read.</p>',
        'helptext': '''
          <p>To enable multiple samples to be plotted on the same graph, only the mean quality
          scores are plotted (unlike the box plots seen in FastQC reports).</p>
          <p>Taken from the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/2%20Per%20Base%20Sequence%20Quality.html">FastQC help</a>:</p>
          <p><em>The y-axis on the graph shows the quality scores. The higher the score, the better
          the base call. The background of the graph divides the y axis into very good quality
          calls (green), calls of reasonable quality (orange), and calls of poor quality (red).
          The quality of calls on most platforms will degrade as the run progresses, so it is
          common to see base calls falling into the orange area towards the end of a read.</em></p>
        ''',
        'name': 'Sequence Quality Histograms',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_sequence_quality_scores',
        'comment': '',
        'description': '<p>The number of reads with average quality scores. Shows if a subset of reads has poor quality.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/3%20Per%20Sequence%20Quality%20Scores.html">FastQC help</a>:</p>
          <p><em>The per sequence quality score report allows you to see if a subset of your
          sequences have universally low quality values. It is often the case that a
          subset of sequences will have universally poor quality, however these should
          represent only a small percentage of the total sequences.</em></p>
        ''',
        'name': 'Per Sequence Quality Scores',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_sequence_content',
        'comment': '',
        'description': '<p>The proportion of each base position for which each of the four normal DNA bases has been called.</p>',
        'helptext': '''
          <p>To enable multiple samples to be shown in a single plot, the base composition data
          is shown as a heatmap. The colours represent the balance between the four bases:
          an even distribution should give an even muddy brown colour. Hover over the plot
          to see the percentage of the four bases under the cursor.</p>
          <p><strong>To see the data as a line plot, as in the original FastQC graph, click on a sample track.</strong></p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/4%20Per%20Base%20Sequence%20Content.html">FastQC help</a>:</p>
          <p><em>Per Base Sequence Content plots out the proportion of each base position in a
          file for which each of the four normal DNA bases has been called.</em></p>
          <p><em>In a random library you would expect that there would be little to no difference
          between the different bases of a sequence run, so the lines in this plot should
          run parallel with each other. The relative amount of each base should reflect
          the overall amount of these bases in your genome, but in any case they should
          not be hugely imbalanced from each other.</em></p>
          <p><em>It's worth noting that some types of library will always produce biased sequence
          composition, normally at the start of the read. Libraries produced by priming
          using random hexamers (including nearly all RNA-Seq libraries) and those which
          were fragmented using transposases inherit an intrinsic bias in the positions
          at which reads start. This bias does not concern an absolute sequence, but instead
          provides enrichement of a number of different K-mers at the 5' end of the reads.
          Whilst this is a true technical bias, it isn't something which can be corrected
          by trimming and in most cases doesn't seem to adversely affect the downstream
          analysis.</em></p>
        ''',
        'name': 'Per Base Sequence Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_sequence_gc_content',
        'comment': '',
        'description': '<p><strong>The dashed black line shows theoretical GC content:</strong> <code>Human Genome</code></p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/5%20Per%20Sequence%20GC%20Content.html">FastQC help</a>:</p>
          <p><em>This module measures the GC content across the whole length of each sequence
          in a file and compares it to a modelled normal distribution of GC content.</em></p>
          <p><em>In a normal random library you would expect to see a roughly normal distribution
          of GC content where the central peak corresponds to the overall GC content of
          the underlying genome. Since we don't know the GC content of the genome the
          modal GC content is calculated from the observed data and used to build a
          reference distribution.</em></p>
          <p><em>An unusually shaped distribution could indicate a contaminated library or
          some other kinds of biased subset. A normal distribution which is shifted
          indicates some systematic bias which is independent of base position. If there
          is a systematic bias which creates a shifted normal distribution then this won't
          be flagged as an error by the module since it doesn't know what your genome's
          GC content should be.</em></p>
        ''',
        'name': 'Per Sequence GC Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_n_content',
        'comment': '',
        'description': '<p>The percentage of base calls at each position for which an <code>N</code> was called.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/6%20Per%20Base%20N%20Content.html">FastQC help</a>:</p>
          <p><em>If a sequencer is unable to make a base call with sufficient confidence then it will
          normally substitute an <code>N</code> rather than a conventional base call. This graph shows the
          percentage of base calls at each position for which an <code>N</code> was called.</em></p>
          <p><em>It's not unusual to see a very low proportion of Ns appearing in a sequence, especially
          nearer the end of a sequence. However, if this proportion rises above a few percent
          it suggests that the analysis pipeline was unable to interpret the data well enough to
          make valid base calls.</em></p>
        ''',
        'name': 'Per Base N Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_sequence_length_distribution',
        'comment': '',
        'description': '<p>The distribution of fragment sizes (read lengths) found. See the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/7%20Sequence%20Length%20Distribution.html">FastQC help</a></p>',
        'helptext': '',
        'name': 'Sequence Length Distribution',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_sequence_duplication_levels',
        'comment': '',
        'description': '<p>The relative level of duplication found for every sequence.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/8%20Duplicate%20Sequences.html">FastQC Help</a>:</p>
          <p><em>In a diverse library most sequences will occur only once in the final set.
          A low level of duplication may indicate a very high level of coverage of the
          target sequence, but a high level of duplication is more likely to indicate
          some kind of enrichment bias (e.g. PCR over amplification). This graph shows
          the degree of duplication for every sequence in a library: the relative
          number of sequences with different degrees of duplication.</em></p>
          <p><em>Only sequences which first appear in the first 100,000 sequences
          in each file are analysed. This should be enough to get a good impression
          for the duplication levels in the whole file. Each sequence is tracked to
          the end of the file to give a representative count of the overall duplication level.</em></p>
          <p><em>The duplication detection requires an exact sequence match over the whole length of
          the sequence. Any reads over 75bp in length are truncated to 50bp for this analysis.</em></p>
          <p><em>In a properly diverse library most sequences should fall into the far left of the
          plot in both the red and blue lines. A general level of enrichment, indicating broad
          oversequencing in the library will tend to flatten the lines, lowering the low end
          and generally raising other categories. More specific enrichments of subsets, or
          the presence of low complexity contaminants will tend to produce spikes towards the
          right of the plot.</em></p>
        ''',
        'name': 'Sequence Duplication Levels',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_overrepresented_sequences',
        'comment': '',
        'description': '<p>The total amount of overrepresented sequences found in each library.</p>',
        'helptext': '''
          <p>FastQC calculates and lists overrepresented sequences in FastQ files. It would not be
          possible to show this for all samples in a MultiQC report, so instead this plot shows
          the <em>number of sequences</em> categorized as overrepresented.</p>
          <p>Sometimes, a single sequence  may account for a large number of reads in a dataset.
          To show this, the bars are split into two: the first shows the overrepresented reads
          that come from the single most common sequence. The second shows the total count
          from all remaining overrepresented sequences.</p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/9%20Overrepresented%20Sequences.html">FastQC Help</a>:</p>
          <p><em>A normal high-throughput library will contain a diverse set of sequences, with no
          individual sequence making up a tiny fraction of the whole. Finding that a single
          sequence is very overrepresented in the set either means that it is highly biologically
          significant, or indicates that the library is contaminated, or not as diverse as you expected.</em></p>
          <p><em>FastQC lists all the sequences which make up more than 0.1% of the total.
          To conserve memory only sequences which appear in the first 100,000 sequences are tracked
          to the end of the file. It is therefore possible that a sequence which is overrepresented
          but doesn't appear at the start of the file for some reason could be missed by this module.</em></p>
        ''',
        'name': 'Overrepresented sequences by sample',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_top_overrepresented_sequences',
        'comment': '',
        'description': '''
          <p>Top overrepresented sequences across all samples. The table shows 20
          most overrepresented sequences across all samples, ranked by the number of samples they occur in.</p>
        ''',
        'helptext': '',
        'name': 'Top overrepresented sequences',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_adapter_content',
        'comment': '',
        'description': '''
          <p>The cumulative percentage count of the proportion of your
                      library which has seen each of the adapter sequences at each position.</p>
        ''',
        'helptext': '''
          <p>Note that only samples with ≥ 0.1% adapter contamination are shown.</p>
          <p>There may be several lines per sample, as one is shown for each adapter
          detected in the file.</p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/10%20Adapter%20Content.html">FastQC Help</a>:</p>
          <p><em>The plot shows a cumulative percentage count of the proportion
          of your library which has seen each of the adapter sequences at each position.
          Once a sequence has been seen in a read it is counted as being present
          right through to the end of the read so the percentages you see will only
          increase as the read length goes on.</em></p>
        ''',
        'name': 'Adapter Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_status_checks',
        'comment': '',
        'description': '''
          <p>Status for each FastQC section showing whether results seem entirely normal (green),
          slightly abnormal (orange) or very unusual (red).</p>
        ''',
        'helptext': '''
          <p>FastQC assigns a status for each section of the report.
          These give a quick evaluation of whether the results of the analysis seem
          entirely normal (green), slightly abnormal (orange) or very unusual (red).</p>
          <p>It is important to stress that although the analysis results appear to give a pass/fail result,
          these evaluations must be taken in the context of what you expect from your library.
          A 'normal' sample as far as FastQC is concerned is random and diverse.
          Some experiments may be expected to produce libraries which are biased in particular ways.
          You should treat the summary evaluations therefore as pointers to where you should concentrate
          your attention and understand why your library may not look random and diverse.</p>
          <p>Specific guidance on how to interpret the output of each module can be found in the relevant
          report section, or in the <a href="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/">FastQC help</a>.</p>
          <p>In this heatmap, we summarise all of these into a single heatmap for a quick overview.
          Note that not all FastQC sections have plots in MultiQC reports, but all status checks
          are shown in this heatmap.</p>
        ''',
        'name': 'Status Checks',
        'plot_id': None,
        'plot_type': None,
      }),
    ]),
    'software_versions': dict({
      'FastQC': list([
        tuple(
          <Version('0.7.2')>,
          '0.7.2',
        ),
        tuple(
          <Version('0.10.1')>,
          '0.10.1',
        ),
        tuple(
          <Version('0.11.2')>,
          '0.11.2',
        ),
        tuple(
          <Version('0.11.5')>,
          '0.11.5',
        ),
        tuple(
          <Version('0.11.8')>,
          '0.11.8',
        ),
        tuple(
          <Version('0.11.9')>,
          '0.11.9',
        ),
        tuple(
          <Version('0.12.1')>,
          '0.12.1',
        ),
      ]),
    }),
  })
# ---
# name: TestFastqcModule.test_fastqc_snapshot[issue_1941_unicode]
  dict({
    'general_stats_data': dict({
      'fastqc': dict({
        '00050101': list([
          InputRow(sample='00050101', data={'total_sequences': 873870503.0, 'percent_gc': 41.0, 'avg_sequence_length': 148.7744877446676, 'median_sequence_length': 151, 'percent_duplicates': 45.823369853892856, 'percent_fails': 9.090909090909092}),
        ]),
        'F1-1A_S1_R1_001': list([
          InputRow(sample='F1-1A_S1_R1_001', data={'total_sequences': 18529595.0, 'percent_gc': 49.0, 'avg_sequence_length': 0, 'median_sequence_length': 0, 'percent_duplicates': 79.69657795494018, 'percent_fails': 33.33333333333333}),
        ]),
        'GY10_R1': list([
          InputRow(sample='GY10_R1', data={'total_sequences': 1.0, 'percent_gc': 16.0, 'avg_sequence_length': 72.0, 'median_sequence_length': 72, 'percent_duplicates': nan, 'percent_fails': 36.36363636363637}),
        ]),
        'NMP_R1_L1_1': list([
          InputRow(sample='NMP_R1_L1_1', data={'total_sequences': 1718888.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 9.879769028698291, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_1_val_1': list([
          InputRow(sample='NMP_R1_L1_1_val_1', data={'total_sequences': 1715854.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.81053341368205, 'median_sequence_length': 100, 'percent_duplicates': 9.85745215277727, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_2': list([
          InputRow(sample='NMP_R1_L1_2', data={'total_sequences': 1718888.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 8.930020657129234, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_2_val_2': list([
          InputRow(sample='NMP_R1_L1_2_val_2', data={'total_sequences': 1715854.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.42709403014476, 'median_sequence_length': 100, 'percent_duplicates': 8.908730168722528, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L2_1': list([
          InputRow(sample='NMP_R1_L2_1', data={'total_sequences': 915009.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 5.6840731516602006, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_1_val_1': list([
          InputRow(sample='NMP_R1_L2_1_val_1', data={'total_sequences': 913687.0, 'percent_gc': 45.0, 'avg_sequence_length': 98.61605506043098, 'median_sequence_length': 100, 'percent_duplicates': 5.630751605668408, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_2': list([
          InputRow(sample='NMP_R1_L2_2', data={'total_sequences': 915009.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 4.764346620938269, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_2_val_2': list([
          InputRow(sample='NMP_R1_L2_2_val_2', data={'total_sequences': 913687.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.27514509892337, 'median_sequence_length': 100, 'percent_duplicates': 4.746483122341289, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_1': list([
          InputRow(sample='NMP_R2_L1_1', data={'total_sequences': 336288.0, 'percent_gc': 48.0, 'avg_sequence_length': 51.0, 'median_sequence_length': 51, 'percent_duplicates': 6.999149032826608, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_1_val_1': list([
          InputRow(sample='NMP_R2_L1_1_val_1', data={'total_sequences': 335361.0, 'percent_gc': 48.0, 'avg_sequence_length': 50.19924201084801, 'median_sequence_length': 51, 'percent_duplicates': 6.700923975673419, 'percent_fails': 18.181818181818183}),
        ]),
        'NMP_R2_L1_2': list([
          InputRow(sample='NMP_R2_L1_2', data={'total_sequences': 336288.0, 'percent_gc': 48.0, 'avg_sequence_length': 51.0, 'median_sequence_length': 51, 'percent_duplicates': 6.819824107853606, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_2_val_2': list([
          InputRow(sample='NMP_R2_L1_2_val_2', data={'total_sequences': 335361.0, 'percent_gc': 48.0, 'avg_sequence_length': 50.1630541416563, 'median_sequence_length': 51, 'percent_duplicates': 6.548253022571274, 'percent_fails': 18.181818181818183}),
        ]),
        'NP_D8_R1_L1_1': list([
          InputRow(sample='NP_D8_R1_L1_1', data={'total_sequences': 2567181.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 15.327251004078846, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_1_val_1': list([
          InputRow(sample='NP_D8_R1_L1_1_val_1', data={'total_sequences': 2563715.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.78742001353504, 'median_sequence_length': 100, 'percent_duplicates': 15.287553698376627, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_2': list([
          InputRow(sample='NP_D8_R1_L1_2', data={'total_sequences': 2567181.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 14.610669109892768, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_2_val_2': list([
          InputRow(sample='NP_D8_R1_L1_2_val_2', data={'total_sequences': 2563715.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.45074998586037, 'median_sequence_length': 100, 'percent_duplicates': 14.574395346230347, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_1': list([
          InputRow(sample='NP_D8_R2_L1_1', data={'total_sequences': 838907.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 11.35909418827704, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_1_val_1': list([
          InputRow(sample='NP_D8_R2_L1_1_val_1', data={'total_sequences': 838254.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.83251496563095, 'median_sequence_length': 100, 'percent_duplicates': 11.343572982075244, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_2': list([
          InputRow(sample='NP_D8_R2_L1_2', data={'total_sequences': 838907.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 11.091175156227692, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_2_val_2': list([
          InputRow(sample='NP_D8_R2_L1_2_val_2', data={'total_sequences': 838254.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.71836340774992, 'median_sequence_length': 100, 'percent_duplicates': 11.07445879896737, 'percent_fails': 0.0}),
        ]),
        'SK-GBD-000919.1': list([
          InputRow(sample='SK-GBD-000919.1', data={'total_sequences': 0.0, 'percent_gc': 0.0, 'avg_sequence_length': 0, 'median_sequence_length': 0, 'percent_duplicates': 0.0, 'percent_fails': 0.0}),
        ]),
        'SRR1067503_1': list([
          InputRow(sample='SRR1067503_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 13.158357833208953, 'percent_fails': 8.333333333333332}),
        ]),
        'SRR1067503_v10_1': list([
          InputRow(sample='SRR1067503_v10_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067503_v7_1': list([
          InputRow(sample='SRR1067503_v7_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067505_1': list([
          InputRow(sample='SRR1067505_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 8.211571393929418, 'percent_fails': 16.666666666666664}),
        ]),
        'SRR1067505_v10_1': list([
          InputRow(sample='SRR1067505_v10_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067505_v7_1': list([
          InputRow(sample='SRR1067505_v7_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'run1_2': list([
          InputRow(sample='run1_2', data={'total_sequences': 30.0, 'percent_gc': 48.0, 'avg_sequence_length': 150.7, 'median_sequence_length': 150, 'percent_duplicates': 6.666666666666671, 'percent_fails': 50.0}),
        ]),
        'sample1_S1_L001_R2_001': list([
          InputRow(sample='sample1_S1_L001_R2_001', data={'total_sequences': 82330.0, 'percent_gc': 44.0, 'avg_sequence_length': 301.0, 'median_sequence_length': 301, 'percent_duplicates': 70.25507105550832, 'percent_fails': 54.54545454545454}),
        ]),
        'single': list([
          InputRow(sample='single', data={'total_sequences': 266736.0, 'percent_gc': 50.0, 'avg_sequence_length': 100.05205146661868, 'median_sequence_length': 100, 'percent_duplicates': 1.7720375527608212, 'percent_fails': 40.0}),
        ]),
        'test': list([
          InputRow(sample='test', data={'total_sequences': 240.0, 'percent_gc': 59.0, 'avg_sequence_length': 619.0145833333333, 'median_sequence_length': 624, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'test_1': list([
          InputRow(sample='test_1', data={'total_sequences': 266736.0, 'percent_gc': 50.0, 'avg_sequence_length': 100.05205146661868, 'median_sequence_length': 100, 'percent_duplicates': 1.7720375527608212, 'percent_fails': 40.0}),
        ]),
        'test_2': list([
          InputRow(sample='test_2', data={'total_sequences': 266736.0, 'percent_gc': 48.0, 'avg_sequence_length': 100.05091551196689, 'median_sequence_length': 100, 'percent_duplicates': 0.9935368127944884, 'percent_fails': 20.0}),
        ]),
      }),
    }),
    'general_stats_headers': dict({
      'fastqc': dict({
        'avg_sequence_length': dict({
          'description': 'Average read length',
          'format': '{:,.0f}',
          'hidden': True,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn',
          'suffix': ' bp',
          'title': 'Avg len',
        }),
        'median_sequence_length': dict({
          'description': 'Median read length',
          'format': '{:,.0f}',
          'hidden': False,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn',
          'suffix': ' bp',
          'title': 'Median len',
        }),
        'percent_duplicates': dict({
          'description': '% duplicate reads',
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn-rev',
          'suffix': '%',
          'title': 'Dups',
        }),
        'percent_fails': dict({
          'description': 'Percentage of modules failed in FastQC report (includes those not plotted here)',
          'format': '{:,.0f}',
          'hidden': True,
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'Reds',
          'suffix': '%',
          'title': 'Failed',
        }),
        'percent_gc': dict({
          'description': 'Average % GC content',
          'format': '{:,.1f}',
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'PuRd',
          'suffix': '%',
          'title': 'GC',
        }),
        'total_sequences': dict({
          'description': 'Total sequences (millions)',
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'Blues',
          'shared_key': 'read_count',
          'title': 'Seqs',
        }),
      }),
    }),
    'module_info': dict({
      'anchor': 'fastqc',
      'doi': list([
      ]),
      'href': list([
        'http://www.bioinformatics.babraham.ac.uk/projects/fastqc/',
      ]),
      'info': 'Quality control tool for high throughput sequencing data',
      'name': 'FastQC',
    }),
    'saved_raw_data': dict({
      'multiqc_fastqc': dict({
        '00050101': dict({
          '%GC': 41.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': '00050101.aligned-bwa.sorted-samtools.merged.rh.dedupped.bam',
          'Sequence length': '30-151',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 873870503.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 148.774488,
          'basic_statistics': 'pass',
          'median_sequence_length': 151,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 54.17663,
        }),
        'F1-1A_S1_R1_001': dict({
          '%GC': 49.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'F1-1A_S1_R1_001.fastq.gz',
          'Sequence length': '35-151',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 18529595.0,
          'basic_statistics': 'pass',
          'overrepresented_sequences': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'fail',
          'total_deduplicated_percentage': 20.303422,
        }),
        'GY10_R1': dict({
          '%GC': 16.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'GY10_R1.fq.gz',
          'Sequence length': 72.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 72.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 72,
          'overrepresented_sequences': 'fail',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'warn',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': None,
        }),
        'NMP_R1_L1_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1718888.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 90.120231,
        }),
        'NMP_R1_L1_1_val_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1715854.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.810533,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 90.142548,
        }),
        'NMP_R1_L1_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1718888.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 91.069979,
        }),
        'NMP_R1_L1_2_val_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1715854.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.427094,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 91.09127,
        }),
        'NMP_R1_L2_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 915009.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'warn',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 94.315927,
        }),
        'NMP_R1_L2_1_val_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 913687.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 98.616055,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 94.369248,
        }),
        'NMP_R1_L2_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 915009.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'warn',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 95.235653,
        }),
        'NMP_R1_L2_2_val_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 913687.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.275145,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'warn',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 95.253517,
        }),
        'NMP_R2_L1_1': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_1.fastq.gz',
          'Sequence length': 51.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 336288.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 51.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 93.000851,
        }),
        'NMP_R2_L1_1_val_1': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_1_val_1.fq.gz',
          'Sequence length': '20-51',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 335361.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 50.199242,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.299076,
        }),
        'NMP_R2_L1_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_2.fastq.gz',
          'Sequence length': 51.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 336288.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 51.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 93.180176,
        }),
        'NMP_R2_L1_2_val_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_2_val_2.fq.gz',
          'Sequence length': '20-51',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 335361.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 50.163054,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.451747,
        }),
        'NP_D8_R1_L1_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2567181.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 84.672749,
        }),
        'NP_D8_R1_L1_1_val_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2563715.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.78742,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 84.712446,
        }),
        'NP_D8_R1_L1_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2567181.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 85.389331,
        }),
        'NP_D8_R1_L1_2_val_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2563715.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.45075,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 85.425605,
        }),
        'NP_D8_R2_L1_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838907.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 88.640906,
        }),
        'NP_D8_R2_L1_1_val_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838254.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.832515,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 88.656427,
        }),
        'NP_D8_R2_L1_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838907.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 88.908825,
        }),
        'NP_D8_R2_L1_2_val_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838254.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.718363,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 88.925541,
        }),
        'SK-GBD-000919.1': dict({
          '%GC': 0.0,
          'Encoding': 'Illumina 1.5',
          'File type': 'null',
          'Filename': 'SK-GBD-000919.1.fastq',
          'Sequence length': 0.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 0.0,
          'adapter_content': 'warn',
          'basic_statistics': 'pass',
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_sequence_gc_content': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 100.0,
        }),
        'SRR1067503_1': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_1.fastq.gz',
          'Sequence length': 36.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 30680980.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'fail',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 86.841642,
        }),
        'SRR1067503_v10_1': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_v10_1.fastq.gz',
          'Filtered Sequences': 0.0,
          'Sequence length': 36.0,
          'Total Sequences': 30680980.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067503_v7_1': dict({
          '%GC': 44.0,
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_v7_1.fastq.gz',
          'Sequence length': 36.0,
          'Total Sequences': 30680980.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067505_1': dict({
          '%GC': 47.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_1.fastq.gz',
          'Sequence length': 36.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 18361776.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'fail',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 91.788429,
        }),
        'SRR1067505_v10_1': dict({
          '%GC': 47.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_v10_1.fastq.gz',
          'Filtered Sequences': 0.0,
          'Sequence length': 36.0,
          'Total Sequences': 18361776.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'warn',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067505_v7_1': dict({
          '%GC': 47.0,
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_v7_1.fastq.gz',
          'Sequence length': 36.0,
          'Total Sequences': 18361776.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'warn',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'pass',
        }),
        'run1_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'run1_2.fq',
          'Sequence length': '150-154',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '4.5 kbp',
          'Total Sequences': 30.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 150.7,
          'basic_statistics': 'pass',
          'median_sequence_length': 150,
          'overrepresented_sequences': 'fail',
          'per_base_n_content': 'fail',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.333333,
        }),
        'sample1_S1_L001_R2_001': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'sample1_S1_L001_R2_001.fastq.gz',
          'Sequence length': 301.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 82330.0,
          'adapter_content': 'fail',
          'avg_sequence_length': 301.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 301,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'fail',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'warn',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'fail',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 29.744929,
        }),
        'single': dict({
          '%GC': 50.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'single.fastq.gz',
          'Sequence length': '91-108',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.052051,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 98.227962,
        }),
        'test': dict({
          '%GC': 59.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test.fastq_barcode01',
          'Sequence length': '135-1565',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 240.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 619.014583,
          'basic_statistics': 'pass',
          'median_sequence_length': 624,
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'test_1': dict({
          '%GC': 50.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test_1.fastq.gz',
          'Sequence length': '91-108',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.052051,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 98.227962,
        }),
        'test_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test_2.fastq.gz',
          'Sequence length': '90-107',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.050916,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 99.006463,
        }),
      }),
    }),
    'sections': list([
      dict({
        'anchor': 'fastqc_sequence_counts',
        'comment': '',
        'description': '<p>Sequence counts for each sample. Duplicate read counts are an estimate only.</p>',
        'helptext': '''
          <p>This plot show the total number of reads, broken down into unique and duplicate
          if possible (only more recent versions of FastQC give duplicate info).</p>
          <p>You can read more about duplicate calculation in the
          <a href="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/8%20Duplicate%20Sequences.html">FastQC documentation</a>.
          A small part has been copied here for convenience:</p>
          <p><em>Only sequences which first appear in the first 100,000 sequences
          in each file are analysed. This should be enough to get a good impression
          for the duplication levels in the whole file. Each sequence is tracked to
          the end of the file to give a representative count of the overall duplication level.</em></p>
          <p><em>The duplication detection requires an exact sequence match over the whole length of
          the sequence. Any reads over 75bp in length are truncated to 50bp for this analysis.</em></p>
        ''',
        'name': 'Sequence Counts',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_sequence_quality',
        'comment': '',
        'description': '<p>The mean quality value across each base position in the read.</p>',
        'helptext': '''
          <p>To enable multiple samples to be plotted on the same graph, only the mean quality
          scores are plotted (unlike the box plots seen in FastQC reports).</p>
          <p>Taken from the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/2%20Per%20Base%20Sequence%20Quality.html">FastQC help</a>:</p>
          <p><em>The y-axis on the graph shows the quality scores. The higher the score, the better
          the base call. The background of the graph divides the y axis into very good quality
          calls (green), calls of reasonable quality (orange), and calls of poor quality (red).
          The quality of calls on most platforms will degrade as the run progresses, so it is
          common to see base calls falling into the orange area towards the end of a read.</em></p>
        ''',
        'name': 'Sequence Quality Histograms',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_sequence_quality_scores',
        'comment': '',
        'description': '<p>The number of reads with average quality scores. Shows if a subset of reads has poor quality.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/3%20Per%20Sequence%20Quality%20Scores.html">FastQC help</a>:</p>
          <p><em>The per sequence quality score report allows you to see if a subset of your
          sequences have universally low quality values. It is often the case that a
          subset of sequences will have universally poor quality, however these should
          represent only a small percentage of the total sequences.</em></p>
        ''',
        'name': 'Per Sequence Quality Scores',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_sequence_content',
        'comment': '',
        'description': '<p>The proportion of each base position for which each of the four normal DNA bases has been called.</p>',
        'helptext': '''
          <p>To enable multiple samples to be shown in a single plot, the base composition data
          is shown as a heatmap. The colours represent the balance between the four bases:
          an even distribution should give an even muddy brown colour. Hover over the plot
          to see the percentage of the four bases under the cursor.</p>
          <p><strong>To see the data as a line plot, as in the original FastQC graph, click on a sample track.</strong></p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/4%20Per%20Base%20Sequence%20Content.html">FastQC help</a>:</p>
          <p><em>Per Base Sequence Content plots out the proportion of each base position in a
          file for which each of the four normal DNA bases has been called.</em></p>
          <p><em>In a random library you would expect that there would be little to no difference
          between the different bases of a sequence run, so the lines in this plot should
          run parallel with each other. The relative amount of each base should reflect
          the overall amount of these bases in your genome, but in any case they should
          not be hugely imbalanced from each other.</em></p>
          <p><em>It's worth noting that some types of library will always produce biased sequence
          composition, normally at the start of the read. Libraries produced by priming
          using random hexamers (including nearly all RNA-Seq libraries) and those which
          were fragmented using transposases inherit an intrinsic bias in the positions
          at which reads start. This bias does not concern an absolute sequence, but instead
          provides enrichement of a number of different K-mers at the 5' end of the reads.
          Whilst this is a true technical bias, it isn't something which can be corrected
          by trimming and in most cases doesn't seem to adversely affect the downstream
          analysis.</em></p>
        ''',
        'name': 'Per Base Sequence Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_sequence_gc_content',
        'comment': '',
        'description': '<p><strong>The dashed black line shows theoretical GC content:</strong> <code>Human Genome</code></p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/5%20Per%20Sequence%20GC%20Content.html">FastQC help</a>:</p>
          <p><em>This module measures the GC content across the whole length of each sequence
          in a file and compares it to a modelled normal distribution of GC content.</em></p>
          <p><em>In a normal random library you would expect to see a roughly normal distribution
          of GC content where the central peak corresponds to the overall GC content of
          the underlying genome. Since we don't know the GC content of the genome the
          modal GC content is calculated from the observed data and used to build a
          reference distribution.</em></p>
          <p><em>An unusually shaped distribution could indicate a contaminated library or
          some other kinds of biased subset. A normal distribution which is shifted
          indicates some systematic bias which is independent of base position. If there
          is a systematic bias which creates a shifted normal distribution then this won't
          be flagged as an error by the module since it doesn't know what your genome's
          GC content should be.</em></p>
        ''',
        'name': 'Per Sequence GC Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_n_content',
        'comment': '',
        'description': '<p>The percentage of base calls at each position for which an <code>N</code> was called.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/6%20Per%20Base%20N%20Content.html">FastQC help</a>:</p>
          <p><em>If a sequencer is unable to make a base call with sufficient confidence then it will
          normally substitute an <code>N</code> rather than a conventional base call. This graph shows the
          percentage of base calls at each position for which an <code>N</code> was called.</em></p>
          <p><em>It's not unusual to see a very low proportion of Ns appearing in a sequence, especially
          nearer the end of a sequence. However, if this proportion rises above a few percent
          it suggests that the analysis pipeline was unable to interpret the data well enough to
          make valid base calls.</em></p>
        ''',
        'name': 'Per Base N Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_sequence_length_distribution',
        'comment': '',
        'description': '<p>The distribution of fragment sizes (read lengths) found. See the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/7%20Sequence%20Length%20Distribution.html">FastQC help</a></p>',
        'helptext': '',
        'name': 'Sequence Length Distribution',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_sequence_duplication_levels',
        'comment': '',
        'description': '<p>The relative level of duplication found for every sequence.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/8%20Duplicate%20Sequences.html">FastQC Help</a>:</p>
          <p><em>In a diverse library most sequences will occur only once in the final set.
          A low level of duplication may indicate a very high level of coverage of the
          target sequence, but a high level of duplication is more likely to indicate
          some kind of enrichment bias (e.g. PCR over amplification). This graph shows
          the degree of duplication for every sequence in a library: the relative
          number of sequences with different degrees of duplication.</em></p>
          <p><em>Only sequences which first appear in the first 100,000 sequences
          in each file are analysed. This should be enough to get a good impression
          for the duplication levels in the whole file. Each sequence is tracked to
          the end of the file to give a representative count of the overall duplication level.</em></p>
          <p><em>The duplication detection requires an exact sequence match over the whole length of
          the sequence. Any reads over 75bp in length are truncated to 50bp for this analysis.</em></p>
          <p><em>In a properly diverse library most sequences should fall into the far left of the
          plot in both the red and blue lines. A general level of enrichment, indicating broad
          oversequencing in the library will tend to flatten the lines, lowering the low end
          and generally raising other categories. More specific enrichments of subsets, or
          the presence of low complexity contaminants will tend to produce spikes towards the
          right of the plot.</em></p>
        ''',
        'name': 'Sequence Duplication Levels',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_overrepresented_sequences',
        'comment': '',
        'description': '<p>The total amount of overrepresented sequences found in each library.</p>',
        'helptext': '''
          <p>FastQC calculates and lists overrepresented sequences in FastQ files. It would not be
          possible to show this for all samples in a MultiQC report, so instead this plot shows
          the <em>number of sequences</em> categorized as overrepresented.</p>
          <p>Sometimes, a single sequence  may account for a large number of reads in a dataset.
          To show this, the bars are split into two: the first shows the overrepresented reads
          that come from the single most common sequence. The second shows the total count
          from all remaining overrepresented sequences.</p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/9%20Overrepresented%20Sequences.html">FastQC Help</a>:</p>
          <p><em>A normal high-throughput library will contain a diverse set of sequences, with no
          individual sequence making up a tiny fraction of the whole. Finding that a single
          sequence is very overrepresented in the set either means that it is highly biologically
          significant, or indicates that the library is contaminated, or not as diverse as you expected.</em></p>
          <p><em>FastQC lists all the sequences which make up more than 0.1% of the total.
          To conserve memory only sequences which appear in the first 100,000 sequences are tracked
          to the end of the file. It is therefore possible that a sequence which is overrepresented
          but doesn't appear at the start of the file for some reason could be missed by this module.</em></p>
        ''',
        'name': 'Overrepresented sequences by sample',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_top_overrepresented_sequences',
        'comment': '',
        'description': '''
          <p>Top overrepresented sequences across all samples. The table shows 20
          most overrepresented sequences across all samples, ranked by the number of samples they occur in.</p>
        ''',
        'helptext': '',
        'name': 'Top overrepresented sequences',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_adapter_content',
        'comment': '',
        'description': '''
          <p>The cumulative percentage count of the proportion of your
                      library which has seen each of the adapter sequences at each position.</p>
        ''',
        'helptext': '''
          <p>Note that only samples with ≥ 0.1% adapter contamination are shown.</p>
          <p>There may be several lines per sample, as one is shown for each adapter
          detected in the file.</p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/10%20Adapter%20Content.html">FastQC Help</a>:</p>
          <p><em>The plot shows a cumulative percentage count of the proportion
          of your library which has seen each of the adapter sequences at each position.
          Once a sequence has been seen in a read it is counted as being present
          right through to the end of the read so the percentages you see will only
          increase as the read length goes on.</em></p>
        ''',
        'name': 'Adapter Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_status_checks',
        'comment': '',
        'description': '''
          <p>Status for each FastQC section showing whether results seem entirely normal (green),
          slightly abnormal (orange) or very unusual (red).</p>
        ''',
        'helptext': '''
          <p>FastQC assigns a status for each section of the report.
          These give a quick evaluation of whether the results of the analysis seem
          entirely normal (green), slightly abnormal (orange) or very unusual (red).</p>
          <p>It is important to stress that although the analysis results appear to give a pass/fail result,
          these evaluations must be taken in the context of what you expect from your library.
          A 'normal' sample as far as FastQC is concerned is random and diverse.
          Some experiments may be expected to produce libraries which are biased in particular ways.
          You should treat the summary evaluations therefore as pointers to where you should concentrate
          your attention and understand why your library may not look random and diverse.</p>
          <p>Specific guidance on how to interpret the output of each module can be found in the relevant
          report section, or in the <a href="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/">FastQC help</a>.</p>
          <p>In this heatmap, we summarise all of these into a single heatmap for a quick overview.
          Note that not all FastQC sections have plots in MultiQC reports, but all status checks
          are shown in this heatmap.</p>
        ''',
        'name': 'Status Checks',
        'plot_id': None,
        'plot_type': None,
      }),
    ]),
    'software_versions': dict({
      'FastQC': list([
        tuple(
          <Version('0.7.2')>,
          '0.7.2',
        ),
        tuple(
          <Version('0.10.1')>,
          '0.10.1',
        ),
        tuple(
          <Version('0.11.2')>,
          '0.11.2',
        ),
        tuple(
          <Version('0.11.5')>,
          '0.11.5',
        ),
        tuple(
          <Version('0.11.8')>,
          '0.11.8',
        ),
        tuple(
          <Version('0.11.9')>,
          '0.11.9',
        ),
        tuple(
          <Version('0.12.1')>,
          '0.12.1',
        ),
      ]),
    }),
  })
# ---
# name: TestFastqcModule.test_fastqc_snapshot[issue_2343_numerical_samples]
  dict({
    'general_stats_data': dict({
      'fastqc': dict({
        '00050101': list([
          InputRow(sample='00050101', data={'total_sequences': 873870503.0, 'percent_gc': 41.0, 'avg_sequence_length': 148.7744877446676, 'median_sequence_length': 151, 'percent_duplicates': 45.823369853892856, 'percent_fails': 9.090909090909092}),
        ]),
        'F1-1A_S1_R1_001': list([
          InputRow(sample='F1-1A_S1_R1_001', data={'total_sequences': 18529595.0, 'percent_gc': 49.0, 'avg_sequence_length': 0, 'median_sequence_length': 0, 'percent_duplicates': 79.69657795494018, 'percent_fails': 33.33333333333333}),
        ]),
        'GY10_R1': list([
          InputRow(sample='GY10_R1', data={'total_sequences': 1.0, 'percent_gc': 16.0, 'avg_sequence_length': 72.0, 'median_sequence_length': 72, 'percent_duplicates': nan, 'percent_fails': 36.36363636363637}),
        ]),
        'NMP_R1_L1_1': list([
          InputRow(sample='NMP_R1_L1_1', data={'total_sequences': 1718888.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 9.879769028698291, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_1_val_1': list([
          InputRow(sample='NMP_R1_L1_1_val_1', data={'total_sequences': 1715854.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.81053341368205, 'median_sequence_length': 100, 'percent_duplicates': 9.85745215277727, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_2': list([
          InputRow(sample='NMP_R1_L1_2', data={'total_sequences': 1718888.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 8.930020657129234, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_2_val_2': list([
          InputRow(sample='NMP_R1_L1_2_val_2', data={'total_sequences': 1715854.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.42709403014476, 'median_sequence_length': 100, 'percent_duplicates': 8.908730168722528, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L2_1': list([
          InputRow(sample='NMP_R1_L2_1', data={'total_sequences': 915009.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 5.6840731516602006, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_1_val_1': list([
          InputRow(sample='NMP_R1_L2_1_val_1', data={'total_sequences': 913687.0, 'percent_gc': 45.0, 'avg_sequence_length': 98.61605506043098, 'median_sequence_length': 100, 'percent_duplicates': 5.630751605668408, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_2': list([
          InputRow(sample='NMP_R1_L2_2', data={'total_sequences': 915009.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 4.764346620938269, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_2_val_2': list([
          InputRow(sample='NMP_R1_L2_2_val_2', data={'total_sequences': 913687.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.27514509892337, 'median_sequence_length': 100, 'percent_duplicates': 4.746483122341289, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_1': list([
          InputRow(sample='NMP_R2_L1_1', data={'total_sequences': 336288.0, 'percent_gc': 48.0, 'avg_sequence_length': 51.0, 'median_sequence_length': 51, 'percent_duplicates': 6.999149032826608, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_1_val_1': list([
          InputRow(sample='NMP_R2_L1_1_val_1', data={'total_sequences': 335361.0, 'percent_gc': 48.0, 'avg_sequence_length': 50.19924201084801, 'median_sequence_length': 51, 'percent_duplicates': 6.700923975673419, 'percent_fails': 18.181818181818183}),
        ]),
        'NMP_R2_L1_2': list([
          InputRow(sample='NMP_R2_L1_2', data={'total_sequences': 336288.0, 'percent_gc': 48.0, 'avg_sequence_length': 51.0, 'median_sequence_length': 51, 'percent_duplicates': 6.819824107853606, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_2_val_2': list([
          InputRow(sample='NMP_R2_L1_2_val_2', data={'total_sequences': 335361.0, 'percent_gc': 48.0, 'avg_sequence_length': 50.1630541416563, 'median_sequence_length': 51, 'percent_duplicates': 6.548253022571274, 'percent_fails': 18.181818181818183}),
        ]),
        'NP_D8_R1_L1_1': list([
          InputRow(sample='NP_D8_R1_L1_1', data={'total_sequences': 2567181.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 15.327251004078846, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_1_val_1': list([
          InputRow(sample='NP_D8_R1_L1_1_val_1', data={'total_sequences': 2563715.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.78742001353504, 'median_sequence_length': 100, 'percent_duplicates': 15.287553698376627, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_2': list([
          InputRow(sample='NP_D8_R1_L1_2', data={'total_sequences': 2567181.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 14.610669109892768, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_2_val_2': list([
          InputRow(sample='NP_D8_R1_L1_2_val_2', data={'total_sequences': 2563715.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.45074998586037, 'median_sequence_length': 100, 'percent_duplicates': 14.574395346230347, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_1': list([
          InputRow(sample='NP_D8_R2_L1_1', data={'total_sequences': 838907.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 11.35909418827704, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_1_val_1': list([
          InputRow(sample='NP_D8_R2_L1_1_val_1', data={'total_sequences': 838254.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.83251496563095, 'median_sequence_length': 100, 'percent_duplicates': 11.343572982075244, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_2': list([
          InputRow(sample='NP_D8_R2_L1_2', data={'total_sequences': 838907.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 11.091175156227692, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_2_val_2': list([
          InputRow(sample='NP_D8_R2_L1_2_val_2', data={'total_sequences': 838254.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.71836340774992, 'median_sequence_length': 100, 'percent_duplicates': 11.07445879896737, 'percent_fails': 0.0}),
        ]),
        'SK-GBD-000919.1': list([
          InputRow(sample='SK-GBD-000919.1', data={'total_sequences': 0.0, 'percent_gc': 0.0, 'avg_sequence_length': 0, 'median_sequence_length': 0, 'percent_duplicates': 0.0, 'percent_fails': 0.0}),
        ]),
        'SRR1067503_1': list([
          InputRow(sample='SRR1067503_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 13.158357833208953, 'percent_fails': 8.333333333333332}),
        ]),
        'SRR1067503_v10_1': list([
          InputRow(sample='SRR1067503_v10_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067503_v7_1': list([
          InputRow(sample='SRR1067503_v7_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067505_1': list([
          InputRow(sample='SRR1067505_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 8.211571393929418, 'percent_fails': 16.666666666666664}),
        ]),
        'SRR1067505_v10_1': list([
          InputRow(sample='SRR1067505_v10_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067505_v7_1': list([
          InputRow(sample='SRR1067505_v7_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'run1_2': list([
          InputRow(sample='run1_2', data={'total_sequences': 30.0, 'percent_gc': 48.0, 'avg_sequence_length': 150.7, 'median_sequence_length': 150, 'percent_duplicates': 6.666666666666671, 'percent_fails': 50.0}),
        ]),
        'sample1_S1_L001_R2_001': list([
          InputRow(sample='sample1_S1_L001_R2_001', data={'total_sequences': 82330.0, 'percent_gc': 44.0, 'avg_sequence_length': 301.0, 'median_sequence_length': 301, 'percent_duplicates': 70.25507105550832, 'percent_fails': 54.54545454545454}),
        ]),
        'single': list([
          InputRow(sample='single', data={'total_sequences': 266736.0, 'percent_gc': 50.0, 'avg_sequence_length': 100.05205146661868, 'median_sequence_length': 100, 'percent_duplicates': 1.7720375527608212, 'percent_fails': 40.0}),
        ]),
        'test': list([
          InputRow(sample='test', data={'total_sequences': 240.0, 'percent_gc': 59.0, 'avg_sequence_length': 619.0145833333333, 'median_sequence_length': 624, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'test_1': list([
          InputRow(sample='test_1', data={'total_sequences': 266736.0, 'percent_gc': 50.0, 'avg_sequence_length': 100.05205146661868, 'median_sequence_length': 100, 'percent_duplicates': 1.7720375527608212, 'percent_fails': 40.0}),
        ]),
        'test_2': list([
          InputRow(sample='test_2', data={'total_sequences': 266736.0, 'percent_gc': 48.0, 'avg_sequence_length': 100.05091551196689, 'median_sequence_length': 100, 'percent_duplicates': 0.9935368127944884, 'percent_fails': 20.0}),
        ]),
      }),
    }),
    'general_stats_headers': dict({
      'fastqc': dict({
        'avg_sequence_length': dict({
          'description': 'Average read length',
          'format': '{:,.0f}',
          'hidden': True,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn',
          'suffix': ' bp',
          'title': 'Avg len',
        }),
        'median_sequence_length': dict({
          'description': 'Median read length',
          'format': '{:,.0f}',
          'hidden': False,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn',
          'suffix': ' bp',
          'title': 'Median len',
        }),
        'percent_duplicates': dict({
          'description': '% duplicate reads',
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn-rev',
          'suffix': '%',
          'title': 'Dups',
        }),
        'percent_fails': dict({
          'description': 'Percentage of modules failed in FastQC report (includes those not plotted here)',
          'format': '{:,.0f}',
          'hidden': True,
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'Reds',
          'suffix': '%',
          'title': 'Failed',
        }),
        'percent_gc': dict({
          'description': 'Average % GC content',
          'format': '{:,.1f}',
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'PuRd',
          'suffix': '%',
          'title': 'GC',
        }),
        'total_sequences': dict({
          'description': 'Total sequences (millions)',
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'Blues',
          'shared_key': 'read_count',
          'title': 'Seqs',
        }),
      }),
    }),
    'module_info': dict({
      'anchor': 'fastqc',
      'doi': list([
      ]),
      'href': list([
        'http://www.bioinformatics.babraham.ac.uk/projects/fastqc/',
      ]),
      'info': 'Quality control tool for high throughput sequencing data',
      'name': 'FastQC',
    }),
    'saved_raw_data': dict({
      'multiqc_fastqc': dict({
        '00050101': dict({
          '%GC': 41.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': '00050101.aligned-bwa.sorted-samtools.merged.rh.dedupped.bam',
          'Sequence length': '30-151',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 873870503.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 148.774488,
          'basic_statistics': 'pass',
          'median_sequence_length': 151,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 54.17663,
        }),
        'F1-1A_S1_R1_001': dict({
          '%GC': 49.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'F1-1A_S1_R1_001.fastq.gz',
          'Sequence length': '35-151',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 18529595.0,
          'basic_statistics': 'pass',
          'overrepresented_sequences': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'fail',
          'total_deduplicated_percentage': 20.303422,
        }),
        'GY10_R1': dict({
          '%GC': 16.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'GY10_R1.fq.gz',
          'Sequence length': 72.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 72.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 72,
          'overrepresented_sequences': 'fail',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'warn',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': None,
        }),
        'NMP_R1_L1_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1718888.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 90.120231,
        }),
        'NMP_R1_L1_1_val_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1715854.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.810533,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 90.142548,
        }),
        'NMP_R1_L1_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1718888.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 91.069979,
        }),
        'NMP_R1_L1_2_val_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1715854.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.427094,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 91.09127,
        }),
        'NMP_R1_L2_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 915009.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'warn',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 94.315927,
        }),
        'NMP_R1_L2_1_val_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 913687.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 98.616055,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 94.369248,
        }),
        'NMP_R1_L2_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 915009.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'warn',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 95.235653,
        }),
        'NMP_R1_L2_2_val_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 913687.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.275145,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'warn',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 95.253517,
        }),
        'NMP_R2_L1_1': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_1.fastq.gz',
          'Sequence length': 51.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 336288.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 51.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 93.000851,
        }),
        'NMP_R2_L1_1_val_1': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_1_val_1.fq.gz',
          'Sequence length': '20-51',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 335361.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 50.199242,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.299076,
        }),
        'NMP_R2_L1_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_2.fastq.gz',
          'Sequence length': 51.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 336288.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 51.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 93.180176,
        }),
        'NMP_R2_L1_2_val_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_2_val_2.fq.gz',
          'Sequence length': '20-51',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 335361.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 50.163054,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.451747,
        }),
        'NP_D8_R1_L1_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2567181.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 84.672749,
        }),
        'NP_D8_R1_L1_1_val_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2563715.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.78742,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 84.712446,
        }),
        'NP_D8_R1_L1_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2567181.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 85.389331,
        }),
        'NP_D8_R1_L1_2_val_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2563715.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.45075,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 85.425605,
        }),
        'NP_D8_R2_L1_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838907.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 88.640906,
        }),
        'NP_D8_R2_L1_1_val_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838254.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.832515,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 88.656427,
        }),
        'NP_D8_R2_L1_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838907.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 88.908825,
        }),
        'NP_D8_R2_L1_2_val_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838254.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.718363,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 88.925541,
        }),
        'SK-GBD-000919.1': dict({
          '%GC': 0.0,
          'Encoding': 'Illumina 1.5',
          'File type': 'null',
          'Filename': 'SK-GBD-000919.1.fastq',
          'Sequence length': 0.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 0.0,
          'adapter_content': 'warn',
          'basic_statistics': 'pass',
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_sequence_gc_content': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 100.0,
        }),
        'SRR1067503_1': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_1.fastq.gz',
          'Sequence length': 36.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 30680980.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'fail',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 86.841642,
        }),
        'SRR1067503_v10_1': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_v10_1.fastq.gz',
          'Filtered Sequences': 0.0,
          'Sequence length': 36.0,
          'Total Sequences': 30680980.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067503_v7_1': dict({
          '%GC': 44.0,
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_v7_1.fastq.gz',
          'Sequence length': 36.0,
          'Total Sequences': 30680980.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067505_1': dict({
          '%GC': 47.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_1.fastq.gz',
          'Sequence length': 36.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 18361776.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'fail',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 91.788429,
        }),
        'SRR1067505_v10_1': dict({
          '%GC': 47.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_v10_1.fastq.gz',
          'Filtered Sequences': 0.0,
          'Sequence length': 36.0,
          'Total Sequences': 18361776.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'warn',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067505_v7_1': dict({
          '%GC': 47.0,
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_v7_1.fastq.gz',
          'Sequence length': 36.0,
          'Total Sequences': 18361776.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'warn',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'pass',
        }),
        'run1_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'run1_2.fq',
          'Sequence length': '150-154',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '4.5 kbp',
          'Total Sequences': 30.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 150.7,
          'basic_statistics': 'pass',
          'median_sequence_length': 150,
          'overrepresented_sequences': 'fail',
          'per_base_n_content': 'fail',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.333333,
        }),
        'sample1_S1_L001_R2_001': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'sample1_S1_L001_R2_001.fastq.gz',
          'Sequence length': 301.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 82330.0,
          'adapter_content': 'fail',
          'avg_sequence_length': 301.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 301,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'fail',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'warn',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'fail',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 29.744929,
        }),
        'single': dict({
          '%GC': 50.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'single.fastq.gz',
          'Sequence length': '91-108',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.052051,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 98.227962,
        }),
        'test': dict({
          '%GC': 59.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test.fastq_barcode01',
          'Sequence length': '135-1565',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 240.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 619.014583,
          'basic_statistics': 'pass',
          'median_sequence_length': 624,
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'test_1': dict({
          '%GC': 50.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test_1.fastq.gz',
          'Sequence length': '91-108',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.052051,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 98.227962,
        }),
        'test_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test_2.fastq.gz',
          'Sequence length': '90-107',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.050916,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 99.006463,
        }),
      }),
    }),
    'sections': list([
      dict({
        'anchor': 'fastqc_sequence_counts',
        'comment': '',
        'description': '<p>Sequence counts for each sample. Duplicate read counts are an estimate only.</p>',
        'helptext': '''
          <p>This plot show the total number of reads, broken down into unique and duplicate
          if possible (only more recent versions of FastQC give duplicate info).</p>
          <p>You can read more about duplicate calculation in the
          <a href="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/8%20Duplicate%20Sequences.html">FastQC documentation</a>.
          A small part has been copied here for convenience:</p>
          <p><em>Only sequences which first appear in the first 100,000 sequences
          in each file are analysed. This should be enough to get a good impression
          for the duplication levels in the whole file. Each sequence is tracked to
          the end of the file to give a representative count of the overall duplication level.</em></p>
          <p><em>The duplication detection requires an exact sequence match over the whole length of
          the sequence. Any reads over 75bp in length are truncated to 50bp for this analysis.</em></p>
        ''',
        'name': 'Sequence Counts',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_sequence_quality',
        'comment': '',
        'description': '<p>The mean quality value across each base position in the read.</p>',
        'helptext': '''
          <p>To enable multiple samples to be plotted on the same graph, only the mean quality
          scores are plotted (unlike the box plots seen in FastQC reports).</p>
          <p>Taken from the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/2%20Per%20Base%20Sequence%20Quality.html">FastQC help</a>:</p>
          <p><em>The y-axis on the graph shows the quality scores. The higher the score, the better
          the base call. The background of the graph divides the y axis into very good quality
          calls (green), calls of reasonable quality (orange), and calls of poor quality (red).
          The quality of calls on most platforms will degrade as the run progresses, so it is
          common to see base calls falling into the orange area towards the end of a read.</em></p>
        ''',
        'name': 'Sequence Quality Histograms',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_sequence_quality_scores',
        'comment': '',
        'description': '<p>The number of reads with average quality scores. Shows if a subset of reads has poor quality.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/3%20Per%20Sequence%20Quality%20Scores.html">FastQC help</a>:</p>
          <p><em>The per sequence quality score report allows you to see if a subset of your
          sequences have universally low quality values. It is often the case that a
          subset of sequences will have universally poor quality, however these should
          represent only a small percentage of the total sequences.</em></p>
        ''',
        'name': 'Per Sequence Quality Scores',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_sequence_content',
        'comment': '',
        'description': '<p>The proportion of each base position for which each of the four normal DNA bases has been called.</p>',
        'helptext': '''
          <p>To enable multiple samples to be shown in a single plot, the base composition data
          is shown as a heatmap. The colours represent the balance between the four bases:
          an even distribution should give an even muddy brown colour. Hover over the plot
          to see the percentage of the four bases under the cursor.</p>
          <p><strong>To see the data as a line plot, as in the original FastQC graph, click on a sample track.</strong></p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/4%20Per%20Base%20Sequence%20Content.html">FastQC help</a>:</p>
          <p><em>Per Base Sequence Content plots out the proportion of each base position in a
          file for which each of the four normal DNA bases has been called.</em></p>
          <p><em>In a random library you would expect that there would be little to no difference
          between the different bases of a sequence run, so the lines in this plot should
          run parallel with each other. The relative amount of each base should reflect
          the overall amount of these bases in your genome, but in any case they should
          not be hugely imbalanced from each other.</em></p>
          <p><em>It's worth noting that some types of library will always produce biased sequence
          composition, normally at the start of the read. Libraries produced by priming
          using random hexamers (including nearly all RNA-Seq libraries) and those which
          were fragmented using transposases inherit an intrinsic bias in the positions
          at which reads start. This bias does not concern an absolute sequence, but instead
          provides enrichement of a number of different K-mers at the 5' end of the reads.
          Whilst this is a true technical bias, it isn't something which can be corrected
          by trimming and in most cases doesn't seem to adversely affect the downstream
          analysis.</em></p>
        ''',
        'name': 'Per Base Sequence Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_sequence_gc_content',
        'comment': '',
        'description': '<p><strong>The dashed black line shows theoretical GC content:</strong> <code>Human Genome</code></p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/5%20Per%20Sequence%20GC%20Content.html">FastQC help</a>:</p>
          <p><em>This module measures the GC content across the whole length of each sequence
          in a file and compares it to a modelled normal distribution of GC content.</em></p>
          <p><em>In a normal random library you would expect to see a roughly normal distribution
          of GC content where the central peak corresponds to the overall GC content of
          the underlying genome. Since we don't know the GC content of the genome the
          modal GC content is calculated from the observed data and used to build a
          reference distribution.</em></p>
          <p><em>An unusually shaped distribution could indicate a contaminated library or
          some other kinds of biased subset. A normal distribution which is shifted
          indicates some systematic bias which is independent of base position. If there
          is a systematic bias which creates a shifted normal distribution then this won't
          be flagged as an error by the module since it doesn't know what your genome's
          GC content should be.</em></p>
        ''',
        'name': 'Per Sequence GC Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_n_content',
        'comment': '',
        'description': '<p>The percentage of base calls at each position for which an <code>N</code> was called.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/6%20Per%20Base%20N%20Content.html">FastQC help</a>:</p>
          <p><em>If a sequencer is unable to make a base call with sufficient confidence then it will
          normally substitute an <code>N</code> rather than a conventional base call. This graph shows the
          percentage of base calls at each position for which an <code>N</code> was called.</em></p>
          <p><em>It's not unusual to see a very low proportion of Ns appearing in a sequence, especially
          nearer the end of a sequence. However, if this proportion rises above a few percent
          it suggests that the analysis pipeline was unable to interpret the data well enough to
          make valid base calls.</em></p>
        ''',
        'name': 'Per Base N Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_sequence_length_distribution',
        'comment': '',
        'description': '<p>The distribution of fragment sizes (read lengths) found. See the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/7%20Sequence%20Length%20Distribution.html">FastQC help</a></p>',
        'helptext': '',
        'name': 'Sequence Length Distribution',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_sequence_duplication_levels',
        'comment': '',
        'description': '<p>The relative level of duplication found for every sequence.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/8%20Duplicate%20Sequences.html">FastQC Help</a>:</p>
          <p><em>In a diverse library most sequences will occur only once in the final set.
          A low level of duplication may indicate a very high level of coverage of the
          target sequence, but a high level of duplication is more likely to indicate
          some kind of enrichment bias (e.g. PCR over amplification). This graph shows
          the degree of duplication for every sequence in a library: the relative
          number of sequences with different degrees of duplication.</em></p>
          <p><em>Only sequences which first appear in the first 100,000 sequences
          in each file are analysed. This should be enough to get a good impression
          for the duplication levels in the whole file. Each sequence is tracked to
          the end of the file to give a representative count of the overall duplication level.</em></p>
          <p><em>The duplication detection requires an exact sequence match over the whole length of
          the sequence. Any reads over 75bp in length are truncated to 50bp for this analysis.</em></p>
          <p><em>In a properly diverse library most sequences should fall into the far left of the
          plot in both the red and blue lines. A general level of enrichment, indicating broad
          oversequencing in the library will tend to flatten the lines, lowering the low end
          and generally raising other categories. More specific enrichments of subsets, or
          the presence of low complexity contaminants will tend to produce spikes towards the
          right of the plot.</em></p>
        ''',
        'name': 'Sequence Duplication Levels',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_overrepresented_sequences',
        'comment': '',
        'description': '<p>The total amount of overrepresented sequences found in each library.</p>',
        'helptext': '''
          <p>FastQC calculates and lists overrepresented sequences in FastQ files. It would not be
          possible to show this for all samples in a MultiQC report, so instead this plot shows
          the <em>number of sequences</em> categorized as overrepresented.</p>
          <p>Sometimes, a single sequence  may account for a large number of reads in a dataset.
          To show this, the bars are split into two: the first shows the overrepresented reads
          that come from the single most common sequence. The second shows the total count
          from all remaining overrepresented sequences.</p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/9%20Overrepresented%20Sequences.html">FastQC Help</a>:</p>
          <p><em>A normal high-throughput library will contain a diverse set of sequences, with no
          individual sequence making up a tiny fraction of the whole. Finding that a single
          sequence is very overrepresented in the set either means that it is highly biologically
          significant, or indicates that the library is contaminated, or not as diverse as you expected.</em></p>
          <p><em>FastQC lists all the sequences which make up more than 0.1% of the total.
          To conserve memory only sequences which appear in the first 100,000 sequences are tracked
          to the end of the file. It is therefore possible that a sequence which is overrepresented
          but doesn't appear at the start of the file for some reason could be missed by this module.</em></p>
        ''',
        'name': 'Overrepresented sequences by sample',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_top_overrepresented_sequences',
        'comment': '',
        'description': '''
          <p>Top overrepresented sequences across all samples. The table shows 20
          most overrepresented sequences across all samples, ranked by the number of samples they occur in.</p>
        ''',
        'helptext': '',
        'name': 'Top overrepresented sequences',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_adapter_content',
        'comment': '',
        'description': '''
          <p>The cumulative percentage count of the proportion of your
                      library which has seen each of the adapter sequences at each position.</p>
        ''',
        'helptext': '''
          <p>Note that only samples with ≥ 0.1% adapter contamination are shown.</p>
          <p>There may be several lines per sample, as one is shown for each adapter
          detected in the file.</p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/10%20Adapter%20Content.html">FastQC Help</a>:</p>
          <p><em>The plot shows a cumulative percentage count of the proportion
          of your library which has seen each of the adapter sequences at each position.
          Once a sequence has been seen in a read it is counted as being present
          right through to the end of the read so the percentages you see will only
          increase as the read length goes on.</em></p>
        ''',
        'name': 'Adapter Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_status_checks',
        'comment': '',
        'description': '''
          <p>Status for each FastQC section showing whether results seem entirely normal (green),
          slightly abnormal (orange) or very unusual (red).</p>
        ''',
        'helptext': '''
          <p>FastQC assigns a status for each section of the report.
          These give a quick evaluation of whether the results of the analysis seem
          entirely normal (green), slightly abnormal (orange) or very unusual (red).</p>
          <p>It is important to stress that although the analysis results appear to give a pass/fail result,
          these evaluations must be taken in the context of what you expect from your library.
          A 'normal' sample as far as FastQC is concerned is random and diverse.
          Some experiments may be expected to produce libraries which are biased in particular ways.
          You should treat the summary evaluations therefore as pointers to where you should concentrate
          your attention and understand why your library may not look random and diverse.</p>
          <p>Specific guidance on how to interpret the output of each module can be found in the relevant
          report section, or in the <a href="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/">FastQC help</a>.</p>
          <p>In this heatmap, we summarise all of these into a single heatmap for a quick overview.
          Note that not all FastQC sections have plots in MultiQC reports, but all status checks
          are shown in this heatmap.</p>
        ''',
        'name': 'Status Checks',
        'plot_id': None,
        'plot_type': None,
      }),
    ]),
    'software_versions': dict({
      'FastQC': list([
        tuple(
          <Version('0.7.2')>,
          '0.7.2',
        ),
        tuple(
          <Version('0.10.1')>,
          '0.10.1',
        ),
        tuple(
          <Version('0.11.2')>,
          '0.11.2',
        ),
        tuple(
          <Version('0.11.5')>,
          '0.11.5',
        ),
        tuple(
          <Version('0.11.8')>,
          '0.11.8',
        ),
        tuple(
          <Version('0.11.9')>,
          '0.11.9',
        ),
        tuple(
          <Version('0.12.1')>,
          '0.12.1',
        ),
      ]),
    }),
  })
# ---
# name: TestFastqcModule.test_fastqc_snapshot[nan_reads]
  dict({
    'general_stats_data': dict({
      'fastqc': dict({
        '00050101': list([
          InputRow(sample='00050101', data={'total_sequences': 873870503.0, 'percent_gc': 41.0, 'avg_sequence_length': 148.7744877446676, 'median_sequence_length': 151, 'percent_duplicates': 45.823369853892856, 'percent_fails': 9.090909090909092}),
        ]),
        'F1-1A_S1_R1_001': list([
          InputRow(sample='F1-1A_S1_R1_001', data={'total_sequences': 18529595.0, 'percent_gc': 49.0, 'avg_sequence_length': 0, 'median_sequence_length': 0, 'percent_duplicates': 79.69657795494018, 'percent_fails': 33.33333333333333}),
        ]),
        'GY10_R1': list([
          InputRow(sample='GY10_R1', data={'total_sequences': 1.0, 'percent_gc': 16.0, 'avg_sequence_length': 72.0, 'median_sequence_length': 72, 'percent_duplicates': nan, 'percent_fails': 36.36363636363637}),
        ]),
        'NMP_R1_L1_1': list([
          InputRow(sample='NMP_R1_L1_1', data={'total_sequences': 1718888.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 9.879769028698291, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_1_val_1': list([
          InputRow(sample='NMP_R1_L1_1_val_1', data={'total_sequences': 1715854.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.81053341368205, 'median_sequence_length': 100, 'percent_duplicates': 9.85745215277727, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_2': list([
          InputRow(sample='NMP_R1_L1_2', data={'total_sequences': 1718888.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 8.930020657129234, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_2_val_2': list([
          InputRow(sample='NMP_R1_L1_2_val_2', data={'total_sequences': 1715854.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.42709403014476, 'median_sequence_length': 100, 'percent_duplicates': 8.908730168722528, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L2_1': list([
          InputRow(sample='NMP_R1_L2_1', data={'total_sequences': 915009.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 5.6840731516602006, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_1_val_1': list([
          InputRow(sample='NMP_R1_L2_1_val_1', data={'total_sequences': 913687.0, 'percent_gc': 45.0, 'avg_sequence_length': 98.61605506043098, 'median_sequence_length': 100, 'percent_duplicates': 5.630751605668408, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_2': list([
          InputRow(sample='NMP_R1_L2_2', data={'total_sequences': 915009.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 4.764346620938269, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_2_val_2': list([
          InputRow(sample='NMP_R1_L2_2_val_2', data={'total_sequences': 913687.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.27514509892337, 'median_sequence_length': 100, 'percent_duplicates': 4.746483122341289, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_1': list([
          InputRow(sample='NMP_R2_L1_1', data={'total_sequences': 336288.0, 'percent_gc': 48.0, 'avg_sequence_length': 51.0, 'median_sequence_length': 51, 'percent_duplicates': 6.999149032826608, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_1_val_1': list([
          InputRow(sample='NMP_R2_L1_1_val_1', data={'total_sequences': 335361.0, 'percent_gc': 48.0, 'avg_sequence_length': 50.19924201084801, 'median_sequence_length': 51, 'percent_duplicates': 6.700923975673419, 'percent_fails': 18.181818181818183}),
        ]),
        'NMP_R2_L1_2': list([
          InputRow(sample='NMP_R2_L1_2', data={'total_sequences': 336288.0, 'percent_gc': 48.0, 'avg_sequence_length': 51.0, 'median_sequence_length': 51, 'percent_duplicates': 6.819824107853606, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_2_val_2': list([
          InputRow(sample='NMP_R2_L1_2_val_2', data={'total_sequences': 335361.0, 'percent_gc': 48.0, 'avg_sequence_length': 50.1630541416563, 'median_sequence_length': 51, 'percent_duplicates': 6.548253022571274, 'percent_fails': 18.181818181818183}),
        ]),
        'NP_D8_R1_L1_1': list([
          InputRow(sample='NP_D8_R1_L1_1', data={'total_sequences': 2567181.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 15.327251004078846, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_1_val_1': list([
          InputRow(sample='NP_D8_R1_L1_1_val_1', data={'total_sequences': 2563715.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.78742001353504, 'median_sequence_length': 100, 'percent_duplicates': 15.287553698376627, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_2': list([
          InputRow(sample='NP_D8_R1_L1_2', data={'total_sequences': 2567181.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 14.610669109892768, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_2_val_2': list([
          InputRow(sample='NP_D8_R1_L1_2_val_2', data={'total_sequences': 2563715.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.45074998586037, 'median_sequence_length': 100, 'percent_duplicates': 14.574395346230347, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_1': list([
          InputRow(sample='NP_D8_R2_L1_1', data={'total_sequences': 838907.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 11.35909418827704, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_1_val_1': list([
          InputRow(sample='NP_D8_R2_L1_1_val_1', data={'total_sequences': 838254.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.83251496563095, 'median_sequence_length': 100, 'percent_duplicates': 11.343572982075244, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_2': list([
          InputRow(sample='NP_D8_R2_L1_2', data={'total_sequences': 838907.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 11.091175156227692, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_2_val_2': list([
          InputRow(sample='NP_D8_R2_L1_2_val_2', data={'total_sequences': 838254.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.71836340774992, 'median_sequence_length': 100, 'percent_duplicates': 11.07445879896737, 'percent_fails': 0.0}),
        ]),
        'SK-GBD-000919.1': list([
          InputRow(sample='SK-GBD-000919.1', data={'total_sequences': 0.0, 'percent_gc': 0.0, 'avg_sequence_length': 0, 'median_sequence_length': 0, 'percent_duplicates': 0.0, 'percent_fails': 0.0}),
        ]),
        'SRR1067503_1': list([
          InputRow(sample='SRR1067503_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 13.158357833208953, 'percent_fails': 8.333333333333332}),
        ]),
        'SRR1067503_v10_1': list([
          InputRow(sample='SRR1067503_v10_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067503_v7_1': list([
          InputRow(sample='SRR1067503_v7_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067505_1': list([
          InputRow(sample='SRR1067505_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 8.211571393929418, 'percent_fails': 16.666666666666664}),
        ]),
        'SRR1067505_v10_1': list([
          InputRow(sample='SRR1067505_v10_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067505_v7_1': list([
          InputRow(sample='SRR1067505_v7_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'run1_2': list([
          InputRow(sample='run1_2', data={'total_sequences': 30.0, 'percent_gc': 48.0, 'avg_sequence_length': 150.7, 'median_sequence_length': 150, 'percent_duplicates': 6.666666666666671, 'percent_fails': 50.0}),
        ]),
        'sample1_S1_L001_R2_001': list([
          InputRow(sample='sample1_S1_L001_R2_001', data={'total_sequences': 82330.0, 'percent_gc': 44.0, 'avg_sequence_length': 301.0, 'median_sequence_length': 301, 'percent_duplicates': 70.25507105550832, 'percent_fails': 54.54545454545454}),
        ]),
        'single': list([
          InputRow(sample='single', data={'total_sequences': 266736.0, 'percent_gc': 50.0, 'avg_sequence_length': 100.05205146661868, 'median_sequence_length': 100, 'percent_duplicates': 1.7720375527608212, 'percent_fails': 40.0}),
        ]),
        'test': list([
          InputRow(sample='test', data={'total_sequences': 240.0, 'percent_gc': 59.0, 'avg_sequence_length': 619.0145833333333, 'median_sequence_length': 624, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'test_1': list([
          InputRow(sample='test_1', data={'total_sequences': 266736.0, 'percent_gc': 50.0, 'avg_sequence_length': 100.05205146661868, 'median_sequence_length': 100, 'percent_duplicates': 1.7720375527608212, 'percent_fails': 40.0}),
        ]),
        'test_2': list([
          InputRow(sample='test_2', data={'total_sequences': 266736.0, 'percent_gc': 48.0, 'avg_sequence_length': 100.05091551196689, 'median_sequence_length': 100, 'percent_duplicates': 0.9935368127944884, 'percent_fails': 20.0}),
        ]),
      }),
    }),
    'general_stats_headers': dict({
      'fastqc': dict({
        'avg_sequence_length': dict({
          'description': 'Average read length',
          'format': '{:,.0f}',
          'hidden': True,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn',
          'suffix': ' bp',
          'title': 'Avg len',
        }),
        'median_sequence_length': dict({
          'description': 'Median read length',
          'format': '{:,.0f}',
          'hidden': False,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn',
          'suffix': ' bp',
          'title': 'Median len',
        }),
        'percent_duplicates': dict({
          'description': '% duplicate reads',
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn-rev',
          'suffix': '%',
          'title': 'Dups',
        }),
        'percent_fails': dict({
          'description': 'Percentage of modules failed in FastQC report (includes those not plotted here)',
          'format': '{:,.0f}',
          'hidden': True,
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'Reds',
          'suffix': '%',
          'title': 'Failed',
        }),
        'percent_gc': dict({
          'description': 'Average % GC content',
          'format': '{:,.1f}',
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'PuRd',
          'suffix': '%',
          'title': 'GC',
        }),
        'total_sequences': dict({
          'description': 'Total sequences (millions)',
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'Blues',
          'shared_key': 'read_count',
          'title': 'Seqs',
        }),
      }),
    }),
    'module_info': dict({
      'anchor': 'fastqc',
      'doi': list([
      ]),
      'href': list([
        'http://www.bioinformatics.babraham.ac.uk/projects/fastqc/',
      ]),
      'info': 'Quality control tool for high throughput sequencing data',
      'name': 'FastQC',
    }),
    'saved_raw_data': dict({
      'multiqc_fastqc': dict({
        '00050101': dict({
          '%GC': 41.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': '00050101.aligned-bwa.sorted-samtools.merged.rh.dedupped.bam',
          'Sequence length': '30-151',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 873870503.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 148.774488,
          'basic_statistics': 'pass',
          'median_sequence_length': 151,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 54.17663,
        }),
        'F1-1A_S1_R1_001': dict({
          '%GC': 49.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'F1-1A_S1_R1_001.fastq.gz',
          'Sequence length': '35-151',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 18529595.0,
          'basic_statistics': 'pass',
          'overrepresented_sequences': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'fail',
          'total_deduplicated_percentage': 20.303422,
        }),
        'GY10_R1': dict({
          '%GC': 16.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'GY10_R1.fq.gz',
          'Sequence length': 72.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 72.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 72,
          'overrepresented_sequences': 'fail',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'warn',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': None,
        }),
        'NMP_R1_L1_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1718888.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 90.120231,
        }),
        'NMP_R1_L1_1_val_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1715854.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.810533,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 90.142548,
        }),
        'NMP_R1_L1_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1718888.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 91.069979,
        }),
        'NMP_R1_L1_2_val_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1715854.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.427094,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 91.09127,
        }),
        'NMP_R1_L2_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 915009.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'warn',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 94.315927,
        }),
        'NMP_R1_L2_1_val_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 913687.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 98.616055,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 94.369248,
        }),
        'NMP_R1_L2_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 915009.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'warn',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 95.235653,
        }),
        'NMP_R1_L2_2_val_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 913687.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.275145,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'warn',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 95.253517,
        }),
        'NMP_R2_L1_1': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_1.fastq.gz',
          'Sequence length': 51.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 336288.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 51.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 93.000851,
        }),
        'NMP_R2_L1_1_val_1': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_1_val_1.fq.gz',
          'Sequence length': '20-51',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 335361.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 50.199242,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.299076,
        }),
        'NMP_R2_L1_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_2.fastq.gz',
          'Sequence length': 51.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 336288.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 51.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 93.180176,
        }),
        'NMP_R2_L1_2_val_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_2_val_2.fq.gz',
          'Sequence length': '20-51',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 335361.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 50.163054,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.451747,
        }),
        'NP_D8_R1_L1_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2567181.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 84.672749,
        }),
        'NP_D8_R1_L1_1_val_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2563715.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.78742,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 84.712446,
        }),
        'NP_D8_R1_L1_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2567181.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 85.389331,
        }),
        'NP_D8_R1_L1_2_val_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2563715.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.45075,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 85.425605,
        }),
        'NP_D8_R2_L1_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838907.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 88.640906,
        }),
        'NP_D8_R2_L1_1_val_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838254.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.832515,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 88.656427,
        }),
        'NP_D8_R2_L1_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838907.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 88.908825,
        }),
        'NP_D8_R2_L1_2_val_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838254.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.718363,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 88.925541,
        }),
        'SK-GBD-000919.1': dict({
          '%GC': 0.0,
          'Encoding': 'Illumina 1.5',
          'File type': 'null',
          'Filename': 'SK-GBD-000919.1.fastq',
          'Sequence length': 0.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 0.0,
          'adapter_content': 'warn',
          'basic_statistics': 'pass',
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_sequence_gc_content': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 100.0,
        }),
        'SRR1067503_1': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_1.fastq.gz',
          'Sequence length': 36.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 30680980.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'fail',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 86.841642,
        }),
        'SRR1067503_v10_1': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_v10_1.fastq.gz',
          'Filtered Sequences': 0.0,
          'Sequence length': 36.0,
          'Total Sequences': 30680980.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067503_v7_1': dict({
          '%GC': 44.0,
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_v7_1.fastq.gz',
          'Sequence length': 36.0,
          'Total Sequences': 30680980.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067505_1': dict({
          '%GC': 47.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_1.fastq.gz',
          'Sequence length': 36.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 18361776.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'fail',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 91.788429,
        }),
        'SRR1067505_v10_1': dict({
          '%GC': 47.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_v10_1.fastq.gz',
          'Filtered Sequences': 0.0,
          'Sequence length': 36.0,
          'Total Sequences': 18361776.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'warn',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067505_v7_1': dict({
          '%GC': 47.0,
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_v7_1.fastq.gz',
          'Sequence length': 36.0,
          'Total Sequences': 18361776.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'warn',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'pass',
        }),
        'run1_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'run1_2.fq',
          'Sequence length': '150-154',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '4.5 kbp',
          'Total Sequences': 30.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 150.7,
          'basic_statistics': 'pass',
          'median_sequence_length': 150,
          'overrepresented_sequences': 'fail',
          'per_base_n_content': 'fail',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.333333,
        }),
        'sample1_S1_L001_R2_001': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'sample1_S1_L001_R2_001.fastq.gz',
          'Sequence length': 301.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 82330.0,
          'adapter_content': 'fail',
          'avg_sequence_length': 301.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 301,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'fail',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'warn',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'fail',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 29.744929,
        }),
        'single': dict({
          '%GC': 50.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'single.fastq.gz',
          'Sequence length': '91-108',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.052051,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 98.227962,
        }),
        'test': dict({
          '%GC': 59.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test.fastq_barcode01',
          'Sequence length': '135-1565',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 240.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 619.014583,
          'basic_statistics': 'pass',
          'median_sequence_length': 624,
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'test_1': dict({
          '%GC': 50.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test_1.fastq.gz',
          'Sequence length': '91-108',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.052051,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 98.227962,
        }),
        'test_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test_2.fastq.gz',
          'Sequence length': '90-107',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.050916,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 99.006463,
        }),
      }),
    }),
    'sections': list([
      dict({
        'anchor': 'fastqc_sequence_counts',
        'comment': '',
        'description': '<p>Sequence counts for each sample. Duplicate read counts are an estimate only.</p>',
        'helptext': '''
          <p>This plot show the total number of reads, broken down into unique and duplicate
          if possible (only more recent versions of FastQC give duplicate info).</p>
          <p>You can read more about duplicate calculation in the
          <a href="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/8%20Duplicate%20Sequences.html">FastQC documentation</a>.
          A small part has been copied here for convenience:</p>
          <p><em>Only sequences which first appear in the first 100,000 sequences
          in each file are analysed. This should be enough to get a good impression
          for the duplication levels in the whole file. Each sequence is tracked to
          the end of the file to give a representative count of the overall duplication level.</em></p>
          <p><em>The duplication detection requires an exact sequence match over the whole length of
          the sequence. Any reads over 75bp in length are truncated to 50bp for this analysis.</em></p>
        ''',
        'name': 'Sequence Counts',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_sequence_quality',
        'comment': '',
        'description': '<p>The mean quality value across each base position in the read.</p>',
        'helptext': '''
          <p>To enable multiple samples to be plotted on the same graph, only the mean quality
          scores are plotted (unlike the box plots seen in FastQC reports).</p>
          <p>Taken from the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/2%20Per%20Base%20Sequence%20Quality.html">FastQC help</a>:</p>
          <p><em>The y-axis on the graph shows the quality scores. The higher the score, the better
          the base call. The background of the graph divides the y axis into very good quality
          calls (green), calls of reasonable quality (orange), and calls of poor quality (red).
          The quality of calls on most platforms will degrade as the run progresses, so it is
          common to see base calls falling into the orange area towards the end of a read.</em></p>
        ''',
        'name': 'Sequence Quality Histograms',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_sequence_quality_scores',
        'comment': '',
        'description': '<p>The number of reads with average quality scores. Shows if a subset of reads has poor quality.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/3%20Per%20Sequence%20Quality%20Scores.html">FastQC help</a>:</p>
          <p><em>The per sequence quality score report allows you to see if a subset of your
          sequences have universally low quality values. It is often the case that a
          subset of sequences will have universally poor quality, however these should
          represent only a small percentage of the total sequences.</em></p>
        ''',
        'name': 'Per Sequence Quality Scores',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_sequence_content',
        'comment': '',
        'description': '<p>The proportion of each base position for which each of the four normal DNA bases has been called.</p>',
        'helptext': '''
          <p>To enable multiple samples to be shown in a single plot, the base composition data
          is shown as a heatmap. The colours represent the balance between the four bases:
          an even distribution should give an even muddy brown colour. Hover over the plot
          to see the percentage of the four bases under the cursor.</p>
          <p><strong>To see the data as a line plot, as in the original FastQC graph, click on a sample track.</strong></p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/4%20Per%20Base%20Sequence%20Content.html">FastQC help</a>:</p>
          <p><em>Per Base Sequence Content plots out the proportion of each base position in a
          file for which each of the four normal DNA bases has been called.</em></p>
          <p><em>In a random library you would expect that there would be little to no difference
          between the different bases of a sequence run, so the lines in this plot should
          run parallel with each other. The relative amount of each base should reflect
          the overall amount of these bases in your genome, but in any case they should
          not be hugely imbalanced from each other.</em></p>
          <p><em>It's worth noting that some types of library will always produce biased sequence
          composition, normally at the start of the read. Libraries produced by priming
          using random hexamers (including nearly all RNA-Seq libraries) and those which
          were fragmented using transposases inherit an intrinsic bias in the positions
          at which reads start. This bias does not concern an absolute sequence, but instead
          provides enrichement of a number of different K-mers at the 5' end of the reads.
          Whilst this is a true technical bias, it isn't something which can be corrected
          by trimming and in most cases doesn't seem to adversely affect the downstream
          analysis.</em></p>
        ''',
        'name': 'Per Base Sequence Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_sequence_gc_content',
        'comment': '',
        'description': '<p><strong>The dashed black line shows theoretical GC content:</strong> <code>Human Genome</code></p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/5%20Per%20Sequence%20GC%20Content.html">FastQC help</a>:</p>
          <p><em>This module measures the GC content across the whole length of each sequence
          in a file and compares it to a modelled normal distribution of GC content.</em></p>
          <p><em>In a normal random library you would expect to see a roughly normal distribution
          of GC content where the central peak corresponds to the overall GC content of
          the underlying genome. Since we don't know the GC content of the genome the
          modal GC content is calculated from the observed data and used to build a
          reference distribution.</em></p>
          <p><em>An unusually shaped distribution could indicate a contaminated library or
          some other kinds of biased subset. A normal distribution which is shifted
          indicates some systematic bias which is independent of base position. If there
          is a systematic bias which creates a shifted normal distribution then this won't
          be flagged as an error by the module since it doesn't know what your genome's
          GC content should be.</em></p>
        ''',
        'name': 'Per Sequence GC Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_n_content',
        'comment': '',
        'description': '<p>The percentage of base calls at each position for which an <code>N</code> was called.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/6%20Per%20Base%20N%20Content.html">FastQC help</a>:</p>
          <p><em>If a sequencer is unable to make a base call with sufficient confidence then it will
          normally substitute an <code>N</code> rather than a conventional base call. This graph shows the
          percentage of base calls at each position for which an <code>N</code> was called.</em></p>
          <p><em>It's not unusual to see a very low proportion of Ns appearing in a sequence, especially
          nearer the end of a sequence. However, if this proportion rises above a few percent
          it suggests that the analysis pipeline was unable to interpret the data well enough to
          make valid base calls.</em></p>
        ''',
        'name': 'Per Base N Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_sequence_length_distribution',
        'comment': '',
        'description': '<p>The distribution of fragment sizes (read lengths) found. See the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/7%20Sequence%20Length%20Distribution.html">FastQC help</a></p>',
        'helptext': '',
        'name': 'Sequence Length Distribution',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_sequence_duplication_levels',
        'comment': '',
        'description': '<p>The relative level of duplication found for every sequence.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/8%20Duplicate%20Sequences.html">FastQC Help</a>:</p>
          <p><em>In a diverse library most sequences will occur only once in the final set.
          A low level of duplication may indicate a very high level of coverage of the
          target sequence, but a high level of duplication is more likely to indicate
          some kind of enrichment bias (e.g. PCR over amplification). This graph shows
          the degree of duplication for every sequence in a library: the relative
          number of sequences with different degrees of duplication.</em></p>
          <p><em>Only sequences which first appear in the first 100,000 sequences
          in each file are analysed. This should be enough to get a good impression
          for the duplication levels in the whole file. Each sequence is tracked to
          the end of the file to give a representative count of the overall duplication level.</em></p>
          <p><em>The duplication detection requires an exact sequence match over the whole length of
          the sequence. Any reads over 75bp in length are truncated to 50bp for this analysis.</em></p>
          <p><em>In a properly diverse library most sequences should fall into the far left of the
          plot in both the red and blue lines. A general level of enrichment, indicating broad
          oversequencing in the library will tend to flatten the lines, lowering the low end
          and generally raising other categories. More specific enrichments of subsets, or
          the presence of low complexity contaminants will tend to produce spikes towards the
          right of the plot.</em></p>
        ''',
        'name': 'Sequence Duplication Levels',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_overrepresented_sequences',
        'comment': '',
        'description': '<p>The total amount of overrepresented sequences found in each library.</p>',
        'helptext': '''
          <p>FastQC calculates and lists overrepresented sequences in FastQ files. It would not be
          possible to show this for all samples in a MultiQC report, so instead this plot shows
          the <em>number of sequences</em> categorized as overrepresented.</p>
          <p>Sometimes, a single sequence  may account for a large number of reads in a dataset.
          To show this, the bars are split into two: the first shows the overrepresented reads
          that come from the single most common sequence. The second shows the total count
          from all remaining overrepresented sequences.</p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/9%20Overrepresented%20Sequences.html">FastQC Help</a>:</p>
          <p><em>A normal high-throughput library will contain a diverse set of sequences, with no
          individual sequence making up a tiny fraction of the whole. Finding that a single
          sequence is very overrepresented in the set either means that it is highly biologically
          significant, or indicates that the library is contaminated, or not as diverse as you expected.</em></p>
          <p><em>FastQC lists all the sequences which make up more than 0.1% of the total.
          To conserve memory only sequences which appear in the first 100,000 sequences are tracked
          to the end of the file. It is therefore possible that a sequence which is overrepresented
          but doesn't appear at the start of the file for some reason could be missed by this module.</em></p>
        ''',
        'name': 'Overrepresented sequences by sample',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_top_overrepresented_sequences',
        'comment': '',
        'description': '''
          <p>Top overrepresented sequences across all samples. The table shows 20
          most overrepresented sequences across all samples, ranked by the number of samples they occur in.</p>
        ''',
        'helptext': '',
        'name': 'Top overrepresented sequences',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_adapter_content',
        'comment': '',
        'description': '''
          <p>The cumulative percentage count of the proportion of your
                      library which has seen each of the adapter sequences at each position.</p>
        ''',
        'helptext': '''
          <p>Note that only samples with ≥ 0.1% adapter contamination are shown.</p>
          <p>There may be several lines per sample, as one is shown for each adapter
          detected in the file.</p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/10%20Adapter%20Content.html">FastQC Help</a>:</p>
          <p><em>The plot shows a cumulative percentage count of the proportion
          of your library which has seen each of the adapter sequences at each position.
          Once a sequence has been seen in a read it is counted as being present
          right through to the end of the read so the percentages you see will only
          increase as the read length goes on.</em></p>
        ''',
        'name': 'Adapter Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_status_checks',
        'comment': '',
        'description': '''
          <p>Status for each FastQC section showing whether results seem entirely normal (green),
          slightly abnormal (orange) or very unusual (red).</p>
        ''',
        'helptext': '''
          <p>FastQC assigns a status for each section of the report.
          These give a quick evaluation of whether the results of the analysis seem
          entirely normal (green), slightly abnormal (orange) or very unusual (red).</p>
          <p>It is important to stress that although the analysis results appear to give a pass/fail result,
          these evaluations must be taken in the context of what you expect from your library.
          A 'normal' sample as far as FastQC is concerned is random and diverse.
          Some experiments may be expected to produce libraries which are biased in particular ways.
          You should treat the summary evaluations therefore as pointers to where you should concentrate
          your attention and understand why your library may not look random and diverse.</p>
          <p>Specific guidance on how to interpret the output of each module can be found in the relevant
          report section, or in the <a href="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/">FastQC help</a>.</p>
          <p>In this heatmap, we summarise all of these into a single heatmap for a quick overview.
          Note that not all FastQC sections have plots in MultiQC reports, but all status checks
          are shown in this heatmap.</p>
        ''',
        'name': 'Status Checks',
        'plot_id': None,
        'plot_type': None,
      }),
    ]),
    'software_versions': dict({
      'FastQC': list([
        tuple(
          <Version('0.7.2')>,
          '0.7.2',
        ),
        tuple(
          <Version('0.10.1')>,
          '0.10.1',
        ),
        tuple(
          <Version('0.11.2')>,
          '0.11.2',
        ),
        tuple(
          <Version('0.11.5')>,
          '0.11.5',
        ),
        tuple(
          <Version('0.11.8')>,
          '0.11.8',
        ),
        tuple(
          <Version('0.11.9')>,
          '0.11.9',
        ),
        tuple(
          <Version('0.12.1')>,
          '0.12.1',
        ),
      ]),
    }),
  })
# ---
# name: TestFastqcModule.test_fastqc_snapshot[v0.11.2]
  dict({
    'general_stats_data': dict({
      'fastqc': dict({
        '00050101': list([
          InputRow(sample='00050101', data={'total_sequences': 873870503.0, 'percent_gc': 41.0, 'avg_sequence_length': 148.7744877446676, 'median_sequence_length': 151, 'percent_duplicates': 45.823369853892856, 'percent_fails': 9.090909090909092}),
        ]),
        'F1-1A_S1_R1_001': list([
          InputRow(sample='F1-1A_S1_R1_001', data={'total_sequences': 18529595.0, 'percent_gc': 49.0, 'avg_sequence_length': 0, 'median_sequence_length': 0, 'percent_duplicates': 79.69657795494018, 'percent_fails': 33.33333333333333}),
        ]),
        'GY10_R1': list([
          InputRow(sample='GY10_R1', data={'total_sequences': 1.0, 'percent_gc': 16.0, 'avg_sequence_length': 72.0, 'median_sequence_length': 72, 'percent_duplicates': nan, 'percent_fails': 36.36363636363637}),
        ]),
        'NMP_R1_L1_1': list([
          InputRow(sample='NMP_R1_L1_1', data={'total_sequences': 1718888.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 9.879769028698291, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_1_val_1': list([
          InputRow(sample='NMP_R1_L1_1_val_1', data={'total_sequences': 1715854.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.81053341368205, 'median_sequence_length': 100, 'percent_duplicates': 9.85745215277727, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_2': list([
          InputRow(sample='NMP_R1_L1_2', data={'total_sequences': 1718888.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 8.930020657129234, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_2_val_2': list([
          InputRow(sample='NMP_R1_L1_2_val_2', data={'total_sequences': 1715854.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.42709403014476, 'median_sequence_length': 100, 'percent_duplicates': 8.908730168722528, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L2_1': list([
          InputRow(sample='NMP_R1_L2_1', data={'total_sequences': 915009.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 5.6840731516602006, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_1_val_1': list([
          InputRow(sample='NMP_R1_L2_1_val_1', data={'total_sequences': 913687.0, 'percent_gc': 45.0, 'avg_sequence_length': 98.61605506043098, 'median_sequence_length': 100, 'percent_duplicates': 5.630751605668408, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_2': list([
          InputRow(sample='NMP_R1_L2_2', data={'total_sequences': 915009.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 4.764346620938269, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_2_val_2': list([
          InputRow(sample='NMP_R1_L2_2_val_2', data={'total_sequences': 913687.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.27514509892337, 'median_sequence_length': 100, 'percent_duplicates': 4.746483122341289, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_1': list([
          InputRow(sample='NMP_R2_L1_1', data={'total_sequences': 336288.0, 'percent_gc': 48.0, 'avg_sequence_length': 51.0, 'median_sequence_length': 51, 'percent_duplicates': 6.999149032826608, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_1_val_1': list([
          InputRow(sample='NMP_R2_L1_1_val_1', data={'total_sequences': 335361.0, 'percent_gc': 48.0, 'avg_sequence_length': 50.19924201084801, 'median_sequence_length': 51, 'percent_duplicates': 6.700923975673419, 'percent_fails': 18.181818181818183}),
        ]),
        'NMP_R2_L1_2': list([
          InputRow(sample='NMP_R2_L1_2', data={'total_sequences': 336288.0, 'percent_gc': 48.0, 'avg_sequence_length': 51.0, 'median_sequence_length': 51, 'percent_duplicates': 6.819824107853606, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_2_val_2': list([
          InputRow(sample='NMP_R2_L1_2_val_2', data={'total_sequences': 335361.0, 'percent_gc': 48.0, 'avg_sequence_length': 50.1630541416563, 'median_sequence_length': 51, 'percent_duplicates': 6.548253022571274, 'percent_fails': 18.181818181818183}),
        ]),
        'NP_D8_R1_L1_1': list([
          InputRow(sample='NP_D8_R1_L1_1', data={'total_sequences': 2567181.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 15.327251004078846, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_1_val_1': list([
          InputRow(sample='NP_D8_R1_L1_1_val_1', data={'total_sequences': 2563715.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.78742001353504, 'median_sequence_length': 100, 'percent_duplicates': 15.287553698376627, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_2': list([
          InputRow(sample='NP_D8_R1_L1_2', data={'total_sequences': 2567181.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 14.610669109892768, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_2_val_2': list([
          InputRow(sample='NP_D8_R1_L1_2_val_2', data={'total_sequences': 2563715.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.45074998586037, 'median_sequence_length': 100, 'percent_duplicates': 14.574395346230347, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_1': list([
          InputRow(sample='NP_D8_R2_L1_1', data={'total_sequences': 838907.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 11.35909418827704, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_1_val_1': list([
          InputRow(sample='NP_D8_R2_L1_1_val_1', data={'total_sequences': 838254.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.83251496563095, 'median_sequence_length': 100, 'percent_duplicates': 11.343572982075244, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_2': list([
          InputRow(sample='NP_D8_R2_L1_2', data={'total_sequences': 838907.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 11.091175156227692, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_2_val_2': list([
          InputRow(sample='NP_D8_R2_L1_2_val_2', data={'total_sequences': 838254.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.71836340774992, 'median_sequence_length': 100, 'percent_duplicates': 11.07445879896737, 'percent_fails': 0.0}),
        ]),
        'SK-GBD-000919.1': list([
          InputRow(sample='SK-GBD-000919.1', data={'total_sequences': 0.0, 'percent_gc': 0.0, 'avg_sequence_length': 0, 'median_sequence_length': 0, 'percent_duplicates': 0.0, 'percent_fails': 0.0}),
        ]),
        'SRR1067503_1': list([
          InputRow(sample='SRR1067503_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 13.158357833208953, 'percent_fails': 8.333333333333332}),
        ]),
        'SRR1067503_v10_1': list([
          InputRow(sample='SRR1067503_v10_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067503_v7_1': list([
          InputRow(sample='SRR1067503_v7_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067505_1': list([
          InputRow(sample='SRR1067505_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 8.211571393929418, 'percent_fails': 16.666666666666664}),
        ]),
        'SRR1067505_v10_1': list([
          InputRow(sample='SRR1067505_v10_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067505_v7_1': list([
          InputRow(sample='SRR1067505_v7_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'run1_2': list([
          InputRow(sample='run1_2', data={'total_sequences': 30.0, 'percent_gc': 48.0, 'avg_sequence_length': 150.7, 'median_sequence_length': 150, 'percent_duplicates': 6.666666666666671, 'percent_fails': 50.0}),
        ]),
        'sample1_S1_L001_R2_001': list([
          InputRow(sample='sample1_S1_L001_R2_001', data={'total_sequences': 82330.0, 'percent_gc': 44.0, 'avg_sequence_length': 301.0, 'median_sequence_length': 301, 'percent_duplicates': 70.25507105550832, 'percent_fails': 54.54545454545454}),
        ]),
        'single': list([
          InputRow(sample='single', data={'total_sequences': 266736.0, 'percent_gc': 50.0, 'avg_sequence_length': 100.05205146661868, 'median_sequence_length': 100, 'percent_duplicates': 1.7720375527608212, 'percent_fails': 40.0}),
        ]),
        'test': list([
          InputRow(sample='test', data={'total_sequences': 240.0, 'percent_gc': 59.0, 'avg_sequence_length': 619.0145833333333, 'median_sequence_length': 624, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'test_1': list([
          InputRow(sample='test_1', data={'total_sequences': 266736.0, 'percent_gc': 50.0, 'avg_sequence_length': 100.05205146661868, 'median_sequence_length': 100, 'percent_duplicates': 1.7720375527608212, 'percent_fails': 40.0}),
        ]),
        'test_2': list([
          InputRow(sample='test_2', data={'total_sequences': 266736.0, 'percent_gc': 48.0, 'avg_sequence_length': 100.05091551196689, 'median_sequence_length': 100, 'percent_duplicates': 0.9935368127944884, 'percent_fails': 20.0}),
        ]),
      }),
    }),
    'general_stats_headers': dict({
      'fastqc': dict({
        'avg_sequence_length': dict({
          'description': 'Average read length',
          'format': '{:,.0f}',
          'hidden': True,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn',
          'suffix': ' bp',
          'title': 'Avg len',
        }),
        'median_sequence_length': dict({
          'description': 'Median read length',
          'format': '{:,.0f}',
          'hidden': False,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn',
          'suffix': ' bp',
          'title': 'Median len',
        }),
        'percent_duplicates': dict({
          'description': '% duplicate reads',
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn-rev',
          'suffix': '%',
          'title': 'Dups',
        }),
        'percent_fails': dict({
          'description': 'Percentage of modules failed in FastQC report (includes those not plotted here)',
          'format': '{:,.0f}',
          'hidden': True,
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'Reds',
          'suffix': '%',
          'title': 'Failed',
        }),
        'percent_gc': dict({
          'description': 'Average % GC content',
          'format': '{:,.1f}',
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'PuRd',
          'suffix': '%',
          'title': 'GC',
        }),
        'total_sequences': dict({
          'description': 'Total sequences (millions)',
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'Blues',
          'shared_key': 'read_count',
          'title': 'Seqs',
        }),
      }),
    }),
    'module_info': dict({
      'anchor': 'fastqc',
      'doi': list([
      ]),
      'href': list([
        'http://www.bioinformatics.babraham.ac.uk/projects/fastqc/',
      ]),
      'info': 'Quality control tool for high throughput sequencing data',
      'name': 'FastQC',
    }),
    'saved_raw_data': dict({
      'multiqc_fastqc': dict({
        '00050101': dict({
          '%GC': 41.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': '00050101.aligned-bwa.sorted-samtools.merged.rh.dedupped.bam',
          'Sequence length': '30-151',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 873870503.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 148.774488,
          'basic_statistics': 'pass',
          'median_sequence_length': 151,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 54.17663,
        }),
        'F1-1A_S1_R1_001': dict({
          '%GC': 49.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'F1-1A_S1_R1_001.fastq.gz',
          'Sequence length': '35-151',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 18529595.0,
          'basic_statistics': 'pass',
          'overrepresented_sequences': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'fail',
          'total_deduplicated_percentage': 20.303422,
        }),
        'GY10_R1': dict({
          '%GC': 16.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'GY10_R1.fq.gz',
          'Sequence length': 72.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 72.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 72,
          'overrepresented_sequences': 'fail',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'warn',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': None,
        }),
        'NMP_R1_L1_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1718888.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 90.120231,
        }),
        'NMP_R1_L1_1_val_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1715854.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.810533,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 90.142548,
        }),
        'NMP_R1_L1_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1718888.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 91.069979,
        }),
        'NMP_R1_L1_2_val_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1715854.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.427094,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 91.09127,
        }),
        'NMP_R1_L2_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 915009.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'warn',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 94.315927,
        }),
        'NMP_R1_L2_1_val_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 913687.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 98.616055,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 94.369248,
        }),
        'NMP_R1_L2_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 915009.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'warn',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 95.235653,
        }),
        'NMP_R1_L2_2_val_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 913687.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.275145,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'warn',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 95.253517,
        }),
        'NMP_R2_L1_1': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_1.fastq.gz',
          'Sequence length': 51.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 336288.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 51.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 93.000851,
        }),
        'NMP_R2_L1_1_val_1': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_1_val_1.fq.gz',
          'Sequence length': '20-51',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 335361.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 50.199242,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.299076,
        }),
        'NMP_R2_L1_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_2.fastq.gz',
          'Sequence length': 51.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 336288.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 51.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 93.180176,
        }),
        'NMP_R2_L1_2_val_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_2_val_2.fq.gz',
          'Sequence length': '20-51',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 335361.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 50.163054,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.451747,
        }),
        'NP_D8_R1_L1_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2567181.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 84.672749,
        }),
        'NP_D8_R1_L1_1_val_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2563715.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.78742,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 84.712446,
        }),
        'NP_D8_R1_L1_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2567181.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 85.389331,
        }),
        'NP_D8_R1_L1_2_val_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2563715.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.45075,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 85.425605,
        }),
        'NP_D8_R2_L1_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838907.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 88.640906,
        }),
        'NP_D8_R2_L1_1_val_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838254.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.832515,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 88.656427,
        }),
        'NP_D8_R2_L1_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838907.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 88.908825,
        }),
        'NP_D8_R2_L1_2_val_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838254.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.718363,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 88.925541,
        }),
        'SK-GBD-000919.1': dict({
          '%GC': 0.0,
          'Encoding': 'Illumina 1.5',
          'File type': 'null',
          'Filename': 'SK-GBD-000919.1.fastq',
          'Sequence length': 0.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 0.0,
          'adapter_content': 'warn',
          'basic_statistics': 'pass',
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_sequence_gc_content': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 100.0,
        }),
        'SRR1067503_1': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_1.fastq.gz',
          'Sequence length': 36.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 30680980.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'fail',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 86.841642,
        }),
        'SRR1067503_v10_1': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_v10_1.fastq.gz',
          'Filtered Sequences': 0.0,
          'Sequence length': 36.0,
          'Total Sequences': 30680980.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067503_v7_1': dict({
          '%GC': 44.0,
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_v7_1.fastq.gz',
          'Sequence length': 36.0,
          'Total Sequences': 30680980.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067505_1': dict({
          '%GC': 47.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_1.fastq.gz',
          'Sequence length': 36.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 18361776.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'fail',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 91.788429,
        }),
        'SRR1067505_v10_1': dict({
          '%GC': 47.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_v10_1.fastq.gz',
          'Filtered Sequences': 0.0,
          'Sequence length': 36.0,
          'Total Sequences': 18361776.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'warn',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067505_v7_1': dict({
          '%GC': 47.0,
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_v7_1.fastq.gz',
          'Sequence length': 36.0,
          'Total Sequences': 18361776.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'warn',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'pass',
        }),
        'run1_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'run1_2.fq',
          'Sequence length': '150-154',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '4.5 kbp',
          'Total Sequences': 30.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 150.7,
          'basic_statistics': 'pass',
          'median_sequence_length': 150,
          'overrepresented_sequences': 'fail',
          'per_base_n_content': 'fail',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.333333,
        }),
        'sample1_S1_L001_R2_001': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'sample1_S1_L001_R2_001.fastq.gz',
          'Sequence length': 301.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 82330.0,
          'adapter_content': 'fail',
          'avg_sequence_length': 301.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 301,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'fail',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'warn',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'fail',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 29.744929,
        }),
        'single': dict({
          '%GC': 50.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'single.fastq.gz',
          'Sequence length': '91-108',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.052051,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 98.227962,
        }),
        'test': dict({
          '%GC': 59.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test.fastq_barcode01',
          'Sequence length': '135-1565',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 240.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 619.014583,
          'basic_statistics': 'pass',
          'median_sequence_length': 624,
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'test_1': dict({
          '%GC': 50.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test_1.fastq.gz',
          'Sequence length': '91-108',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.052051,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 98.227962,
        }),
        'test_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test_2.fastq.gz',
          'Sequence length': '90-107',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.050916,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 99.006463,
        }),
      }),
    }),
    'sections': list([
      dict({
        'anchor': 'fastqc_sequence_counts',
        'comment': '',
        'description': '<p>Sequence counts for each sample. Duplicate read counts are an estimate only.</p>',
        'helptext': '''
          <p>This plot show the total number of reads, broken down into unique and duplicate
          if possible (only more recent versions of FastQC give duplicate info).</p>
          <p>You can read more about duplicate calculation in the
          <a href="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/8%20Duplicate%20Sequences.html">FastQC documentation</a>.
          A small part has been copied here for convenience:</p>
          <p><em>Only sequences which first appear in the first 100,000 sequences
          in each file are analysed. This should be enough to get a good impression
          for the duplication levels in the whole file. Each sequence is tracked to
          the end of the file to give a representative count of the overall duplication level.</em></p>
          <p><em>The duplication detection requires an exact sequence match over the whole length of
          the sequence. Any reads over 75bp in length are truncated to 50bp for this analysis.</em></p>
        ''',
        'name': 'Sequence Counts',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_sequence_quality',
        'comment': '',
        'description': '<p>The mean quality value across each base position in the read.</p>',
        'helptext': '''
          <p>To enable multiple samples to be plotted on the same graph, only the mean quality
          scores are plotted (unlike the box plots seen in FastQC reports).</p>
          <p>Taken from the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/2%20Per%20Base%20Sequence%20Quality.html">FastQC help</a>:</p>
          <p><em>The y-axis on the graph shows the quality scores. The higher the score, the better
          the base call. The background of the graph divides the y axis into very good quality
          calls (green), calls of reasonable quality (orange), and calls of poor quality (red).
          The quality of calls on most platforms will degrade as the run progresses, so it is
          common to see base calls falling into the orange area towards the end of a read.</em></p>
        ''',
        'name': 'Sequence Quality Histograms',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_sequence_quality_scores',
        'comment': '',
        'description': '<p>The number of reads with average quality scores. Shows if a subset of reads has poor quality.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/3%20Per%20Sequence%20Quality%20Scores.html">FastQC help</a>:</p>
          <p><em>The per sequence quality score report allows you to see if a subset of your
          sequences have universally low quality values. It is often the case that a
          subset of sequences will have universally poor quality, however these should
          represent only a small percentage of the total sequences.</em></p>
        ''',
        'name': 'Per Sequence Quality Scores',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_sequence_content',
        'comment': '',
        'description': '<p>The proportion of each base position for which each of the four normal DNA bases has been called.</p>',
        'helptext': '''
          <p>To enable multiple samples to be shown in a single plot, the base composition data
          is shown as a heatmap. The colours represent the balance between the four bases:
          an even distribution should give an even muddy brown colour. Hover over the plot
          to see the percentage of the four bases under the cursor.</p>
          <p><strong>To see the data as a line plot, as in the original FastQC graph, click on a sample track.</strong></p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/4%20Per%20Base%20Sequence%20Content.html">FastQC help</a>:</p>
          <p><em>Per Base Sequence Content plots out the proportion of each base position in a
          file for which each of the four normal DNA bases has been called.</em></p>
          <p><em>In a random library you would expect that there would be little to no difference
          between the different bases of a sequence run, so the lines in this plot should
          run parallel with each other. The relative amount of each base should reflect
          the overall amount of these bases in your genome, but in any case they should
          not be hugely imbalanced from each other.</em></p>
          <p><em>It's worth noting that some types of library will always produce biased sequence
          composition, normally at the start of the read. Libraries produced by priming
          using random hexamers (including nearly all RNA-Seq libraries) and those which
          were fragmented using transposases inherit an intrinsic bias in the positions
          at which reads start. This bias does not concern an absolute sequence, but instead
          provides enrichement of a number of different K-mers at the 5' end of the reads.
          Whilst this is a true technical bias, it isn't something which can be corrected
          by trimming and in most cases doesn't seem to adversely affect the downstream
          analysis.</em></p>
        ''',
        'name': 'Per Base Sequence Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_sequence_gc_content',
        'comment': '',
        'description': '<p><strong>The dashed black line shows theoretical GC content:</strong> <code>Human Genome</code></p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/5%20Per%20Sequence%20GC%20Content.html">FastQC help</a>:</p>
          <p><em>This module measures the GC content across the whole length of each sequence
          in a file and compares it to a modelled normal distribution of GC content.</em></p>
          <p><em>In a normal random library you would expect to see a roughly normal distribution
          of GC content where the central peak corresponds to the overall GC content of
          the underlying genome. Since we don't know the GC content of the genome the
          modal GC content is calculated from the observed data and used to build a
          reference distribution.</em></p>
          <p><em>An unusually shaped distribution could indicate a contaminated library or
          some other kinds of biased subset. A normal distribution which is shifted
          indicates some systematic bias which is independent of base position. If there
          is a systematic bias which creates a shifted normal distribution then this won't
          be flagged as an error by the module since it doesn't know what your genome's
          GC content should be.</em></p>
        ''',
        'name': 'Per Sequence GC Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_n_content',
        'comment': '',
        'description': '<p>The percentage of base calls at each position for which an <code>N</code> was called.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/6%20Per%20Base%20N%20Content.html">FastQC help</a>:</p>
          <p><em>If a sequencer is unable to make a base call with sufficient confidence then it will
          normally substitute an <code>N</code> rather than a conventional base call. This graph shows the
          percentage of base calls at each position for which an <code>N</code> was called.</em></p>
          <p><em>It's not unusual to see a very low proportion of Ns appearing in a sequence, especially
          nearer the end of a sequence. However, if this proportion rises above a few percent
          it suggests that the analysis pipeline was unable to interpret the data well enough to
          make valid base calls.</em></p>
        ''',
        'name': 'Per Base N Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_sequence_length_distribution',
        'comment': '',
        'description': '<p>The distribution of fragment sizes (read lengths) found. See the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/7%20Sequence%20Length%20Distribution.html">FastQC help</a></p>',
        'helptext': '',
        'name': 'Sequence Length Distribution',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_sequence_duplication_levels',
        'comment': '',
        'description': '<p>The relative level of duplication found for every sequence.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/8%20Duplicate%20Sequences.html">FastQC Help</a>:</p>
          <p><em>In a diverse library most sequences will occur only once in the final set.
          A low level of duplication may indicate a very high level of coverage of the
          target sequence, but a high level of duplication is more likely to indicate
          some kind of enrichment bias (e.g. PCR over amplification). This graph shows
          the degree of duplication for every sequence in a library: the relative
          number of sequences with different degrees of duplication.</em></p>
          <p><em>Only sequences which first appear in the first 100,000 sequences
          in each file are analysed. This should be enough to get a good impression
          for the duplication levels in the whole file. Each sequence is tracked to
          the end of the file to give a representative count of the overall duplication level.</em></p>
          <p><em>The duplication detection requires an exact sequence match over the whole length of
          the sequence. Any reads over 75bp in length are truncated to 50bp for this analysis.</em></p>
          <p><em>In a properly diverse library most sequences should fall into the far left of the
          plot in both the red and blue lines. A general level of enrichment, indicating broad
          oversequencing in the library will tend to flatten the lines, lowering the low end
          and generally raising other categories. More specific enrichments of subsets, or
          the presence of low complexity contaminants will tend to produce spikes towards the
          right of the plot.</em></p>
        ''',
        'name': 'Sequence Duplication Levels',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_overrepresented_sequences',
        'comment': '',
        'description': '<p>The total amount of overrepresented sequences found in each library.</p>',
        'helptext': '''
          <p>FastQC calculates and lists overrepresented sequences in FastQ files. It would not be
          possible to show this for all samples in a MultiQC report, so instead this plot shows
          the <em>number of sequences</em> categorized as overrepresented.</p>
          <p>Sometimes, a single sequence  may account for a large number of reads in a dataset.
          To show this, the bars are split into two: the first shows the overrepresented reads
          that come from the single most common sequence. The second shows the total count
          from all remaining overrepresented sequences.</p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/9%20Overrepresented%20Sequences.html">FastQC Help</a>:</p>
          <p><em>A normal high-throughput library will contain a diverse set of sequences, with no
          individual sequence making up a tiny fraction of the whole. Finding that a single
          sequence is very overrepresented in the set either means that it is highly biologically
          significant, or indicates that the library is contaminated, or not as diverse as you expected.</em></p>
          <p><em>FastQC lists all the sequences which make up more than 0.1% of the total.
          To conserve memory only sequences which appear in the first 100,000 sequences are tracked
          to the end of the file. It is therefore possible that a sequence which is overrepresented
          but doesn't appear at the start of the file for some reason could be missed by this module.</em></p>
        ''',
        'name': 'Overrepresented sequences by sample',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_top_overrepresented_sequences',
        'comment': '',
        'description': '''
          <p>Top overrepresented sequences across all samples. The table shows 20
          most overrepresented sequences across all samples, ranked by the number of samples they occur in.</p>
        ''',
        'helptext': '',
        'name': 'Top overrepresented sequences',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_adapter_content',
        'comment': '',
        'description': '''
          <p>The cumulative percentage count of the proportion of your
                      library which has seen each of the adapter sequences at each position.</p>
        ''',
        'helptext': '''
          <p>Note that only samples with ≥ 0.1% adapter contamination are shown.</p>
          <p>There may be several lines per sample, as one is shown for each adapter
          detected in the file.</p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/10%20Adapter%20Content.html">FastQC Help</a>:</p>
          <p><em>The plot shows a cumulative percentage count of the proportion
          of your library which has seen each of the adapter sequences at each position.
          Once a sequence has been seen in a read it is counted as being present
          right through to the end of the read so the percentages you see will only
          increase as the read length goes on.</em></p>
        ''',
        'name': 'Adapter Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_status_checks',
        'comment': '',
        'description': '''
          <p>Status for each FastQC section showing whether results seem entirely normal (green),
          slightly abnormal (orange) or very unusual (red).</p>
        ''',
        'helptext': '''
          <p>FastQC assigns a status for each section of the report.
          These give a quick evaluation of whether the results of the analysis seem
          entirely normal (green), slightly abnormal (orange) or very unusual (red).</p>
          <p>It is important to stress that although the analysis results appear to give a pass/fail result,
          these evaluations must be taken in the context of what you expect from your library.
          A 'normal' sample as far as FastQC is concerned is random and diverse.
          Some experiments may be expected to produce libraries which are biased in particular ways.
          You should treat the summary evaluations therefore as pointers to where you should concentrate
          your attention and understand why your library may not look random and diverse.</p>
          <p>Specific guidance on how to interpret the output of each module can be found in the relevant
          report section, or in the <a href="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/">FastQC help</a>.</p>
          <p>In this heatmap, we summarise all of these into a single heatmap for a quick overview.
          Note that not all FastQC sections have plots in MultiQC reports, but all status checks
          are shown in this heatmap.</p>
        ''',
        'name': 'Status Checks',
        'plot_id': None,
        'plot_type': None,
      }),
    ]),
    'software_versions': dict({
      'FastQC': list([
        tuple(
          <Version('0.7.2')>,
          '0.7.2',
        ),
        tuple(
          <Version('0.10.1')>,
          '0.10.1',
        ),
        tuple(
          <Version('0.11.2')>,
          '0.11.2',
        ),
        tuple(
          <Version('0.11.5')>,
          '0.11.5',
        ),
        tuple(
          <Version('0.11.8')>,
          '0.11.8',
        ),
        tuple(
          <Version('0.11.9')>,
          '0.11.9',
        ),
        tuple(
          <Version('0.12.1')>,
          '0.12.1',
        ),
      ]),
    }),
  })
# ---
# name: TestFastqcModule.test_fastqc_snapshot[zero_reads]
  dict({
    'general_stats_data': dict({
      'fastqc': dict({
        '00050101': list([
          InputRow(sample='00050101', data={'total_sequences': 873870503.0, 'percent_gc': 41.0, 'avg_sequence_length': 148.7744877446676, 'median_sequence_length': 151, 'percent_duplicates': 45.823369853892856, 'percent_fails': 9.090909090909092}),
        ]),
        'F1-1A_S1_R1_001': list([
          InputRow(sample='F1-1A_S1_R1_001', data={'total_sequences': 18529595.0, 'percent_gc': 49.0, 'avg_sequence_length': 0, 'median_sequence_length': 0, 'percent_duplicates': 79.69657795494018, 'percent_fails': 33.33333333333333}),
        ]),
        'GY10_R1': list([
          InputRow(sample='GY10_R1', data={'total_sequences': 1.0, 'percent_gc': 16.0, 'avg_sequence_length': 72.0, 'median_sequence_length': 72, 'percent_duplicates': nan, 'percent_fails': 36.36363636363637}),
        ]),
        'NMP_R1_L1_1': list([
          InputRow(sample='NMP_R1_L1_1', data={'total_sequences': 1718888.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 9.879769028698291, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_1_val_1': list([
          InputRow(sample='NMP_R1_L1_1_val_1', data={'total_sequences': 1715854.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.81053341368205, 'median_sequence_length': 100, 'percent_duplicates': 9.85745215277727, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_2': list([
          InputRow(sample='NMP_R1_L1_2', data={'total_sequences': 1718888.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 8.930020657129234, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L1_2_val_2': list([
          InputRow(sample='NMP_R1_L1_2_val_2', data={'total_sequences': 1715854.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.42709403014476, 'median_sequence_length': 100, 'percent_duplicates': 8.908730168722528, 'percent_fails': 0.0}),
        ]),
        'NMP_R1_L2_1': list([
          InputRow(sample='NMP_R1_L2_1', data={'total_sequences': 915009.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 5.6840731516602006, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_1_val_1': list([
          InputRow(sample='NMP_R1_L2_1_val_1', data={'total_sequences': 913687.0, 'percent_gc': 45.0, 'avg_sequence_length': 98.61605506043098, 'median_sequence_length': 100, 'percent_duplicates': 5.630751605668408, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_2': list([
          InputRow(sample='NMP_R1_L2_2', data={'total_sequences': 915009.0, 'percent_gc': 45.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 4.764346620938269, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R1_L2_2_val_2': list([
          InputRow(sample='NMP_R1_L2_2_val_2', data={'total_sequences': 913687.0, 'percent_gc': 45.0, 'avg_sequence_length': 99.27514509892337, 'median_sequence_length': 100, 'percent_duplicates': 4.746483122341289, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_1': list([
          InputRow(sample='NMP_R2_L1_1', data={'total_sequences': 336288.0, 'percent_gc': 48.0, 'avg_sequence_length': 51.0, 'median_sequence_length': 51, 'percent_duplicates': 6.999149032826608, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_1_val_1': list([
          InputRow(sample='NMP_R2_L1_1_val_1', data={'total_sequences': 335361.0, 'percent_gc': 48.0, 'avg_sequence_length': 50.19924201084801, 'median_sequence_length': 51, 'percent_duplicates': 6.700923975673419, 'percent_fails': 18.181818181818183}),
        ]),
        'NMP_R2_L1_2': list([
          InputRow(sample='NMP_R2_L1_2', data={'total_sequences': 336288.0, 'percent_gc': 48.0, 'avg_sequence_length': 51.0, 'median_sequence_length': 51, 'percent_duplicates': 6.819824107853606, 'percent_fails': 9.090909090909092}),
        ]),
        'NMP_R2_L1_2_val_2': list([
          InputRow(sample='NMP_R2_L1_2_val_2', data={'total_sequences': 335361.0, 'percent_gc': 48.0, 'avg_sequence_length': 50.1630541416563, 'median_sequence_length': 51, 'percent_duplicates': 6.548253022571274, 'percent_fails': 18.181818181818183}),
        ]),
        'NP_D8_R1_L1_1': list([
          InputRow(sample='NP_D8_R1_L1_1', data={'total_sequences': 2567181.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 15.327251004078846, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_1_val_1': list([
          InputRow(sample='NP_D8_R1_L1_1_val_1', data={'total_sequences': 2563715.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.78742001353504, 'median_sequence_length': 100, 'percent_duplicates': 15.287553698376627, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_2': list([
          InputRow(sample='NP_D8_R1_L1_2', data={'total_sequences': 2567181.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 14.610669109892768, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R1_L1_2_val_2': list([
          InputRow(sample='NP_D8_R1_L1_2_val_2', data={'total_sequences': 2563715.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.45074998586037, 'median_sequence_length': 100, 'percent_duplicates': 14.574395346230347, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_1': list([
          InputRow(sample='NP_D8_R2_L1_1', data={'total_sequences': 838907.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 11.35909418827704, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_1_val_1': list([
          InputRow(sample='NP_D8_R2_L1_1_val_1', data={'total_sequences': 838254.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.83251496563095, 'median_sequence_length': 100, 'percent_duplicates': 11.343572982075244, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_2': list([
          InputRow(sample='NP_D8_R2_L1_2', data={'total_sequences': 838907.0, 'percent_gc': 46.0, 'avg_sequence_length': 101.0, 'median_sequence_length': 101, 'percent_duplicates': 11.091175156227692, 'percent_fails': 0.0}),
        ]),
        'NP_D8_R2_L1_2_val_2': list([
          InputRow(sample='NP_D8_R2_L1_2_val_2', data={'total_sequences': 838254.0, 'percent_gc': 46.0, 'avg_sequence_length': 99.71836340774992, 'median_sequence_length': 100, 'percent_duplicates': 11.07445879896737, 'percent_fails': 0.0}),
        ]),
        'SK-GBD-000919.1': list([
          InputRow(sample='SK-GBD-000919.1', data={'total_sequences': 0.0, 'percent_gc': 0.0, 'avg_sequence_length': 0, 'median_sequence_length': 0, 'percent_duplicates': 0.0, 'percent_fails': 0.0}),
        ]),
        'SRR1067503_1': list([
          InputRow(sample='SRR1067503_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 13.158357833208953, 'percent_fails': 8.333333333333332}),
        ]),
        'SRR1067503_v10_1': list([
          InputRow(sample='SRR1067503_v10_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067503_v7_1': list([
          InputRow(sample='SRR1067503_v7_1', data={'total_sequences': 30680980.0, 'percent_gc': 44.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067505_1': list([
          InputRow(sample='SRR1067505_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 8.211571393929418, 'percent_fails': 16.666666666666664}),
        ]),
        'SRR1067505_v10_1': list([
          InputRow(sample='SRR1067505_v10_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'SRR1067505_v7_1': list([
          InputRow(sample='SRR1067505_v7_1', data={'total_sequences': 18361776.0, 'percent_gc': 47.0, 'avg_sequence_length': 36.0, 'median_sequence_length': 36, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'run1_2': list([
          InputRow(sample='run1_2', data={'total_sequences': 30.0, 'percent_gc': 48.0, 'avg_sequence_length': 150.7, 'median_sequence_length': 150, 'percent_duplicates': 6.666666666666671, 'percent_fails': 50.0}),
        ]),
        'sample1_S1_L001_R2_001': list([
          InputRow(sample='sample1_S1_L001_R2_001', data={'total_sequences': 82330.0, 'percent_gc': 44.0, 'avg_sequence_length': 301.0, 'median_sequence_length': 301, 'percent_duplicates': 70.25507105550832, 'percent_fails': 54.54545454545454}),
        ]),
        'single': list([
          InputRow(sample='single', data={'total_sequences': 266736.0, 'percent_gc': 50.0, 'avg_sequence_length': 100.05205146661868, 'median_sequence_length': 100, 'percent_duplicates': 1.7720375527608212, 'percent_fails': 40.0}),
        ]),
        'test': list([
          InputRow(sample='test', data={'total_sequences': 240.0, 'percent_gc': 59.0, 'avg_sequence_length': 619.0145833333333, 'median_sequence_length': 624, 'percent_duplicates': 0, 'percent_fails': 0.0}),
        ]),
        'test_1': list([
          InputRow(sample='test_1', data={'total_sequences': 266736.0, 'percent_gc': 50.0, 'avg_sequence_length': 100.05205146661868, 'median_sequence_length': 100, 'percent_duplicates': 1.7720375527608212, 'percent_fails': 40.0}),
        ]),
        'test_2': list([
          InputRow(sample='test_2', data={'total_sequences': 266736.0, 'percent_gc': 48.0, 'avg_sequence_length': 100.05091551196689, 'median_sequence_length': 100, 'percent_duplicates': 0.9935368127944884, 'percent_fails': 20.0}),
        ]),
      }),
    }),
    'general_stats_headers': dict({
      'fastqc': dict({
        'avg_sequence_length': dict({
          'description': 'Average read length',
          'format': '{:,.0f}',
          'hidden': True,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn',
          'suffix': ' bp',
          'title': 'Avg len',
        }),
        'median_sequence_length': dict({
          'description': 'Median read length',
          'format': '{:,.0f}',
          'hidden': False,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn',
          'suffix': ' bp',
          'title': 'Median len',
        }),
        'percent_duplicates': dict({
          'description': '% duplicate reads',
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'RdYlGn-rev',
          'suffix': '%',
          'title': 'Dups',
        }),
        'percent_fails': dict({
          'description': 'Percentage of modules failed in FastQC report (includes those not plotted here)',
          'format': '{:,.0f}',
          'hidden': True,
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'Reds',
          'suffix': '%',
          'title': 'Failed',
        }),
        'percent_gc': dict({
          'description': 'Average % GC content',
          'format': '{:,.1f}',
          'max': 100,
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'PuRd',
          'suffix': '%',
          'title': 'GC',
        }),
        'total_sequences': dict({
          'description': 'Total sequences (millions)',
          'min': 0,
          'namespace': 'FastQC',
          'scale': 'Blues',
          'shared_key': 'read_count',
          'title': 'Seqs',
        }),
      }),
    }),
    'module_info': dict({
      'anchor': 'fastqc',
      'doi': list([
      ]),
      'href': list([
        'http://www.bioinformatics.babraham.ac.uk/projects/fastqc/',
      ]),
      'info': 'Quality control tool for high throughput sequencing data',
      'name': 'FastQC',
    }),
    'saved_raw_data': dict({
      'multiqc_fastqc': dict({
        '00050101': dict({
          '%GC': 41.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': '00050101.aligned-bwa.sorted-samtools.merged.rh.dedupped.bam',
          'Sequence length': '30-151',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 873870503.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 148.774488,
          'basic_statistics': 'pass',
          'median_sequence_length': 151,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 54.17663,
        }),
        'F1-1A_S1_R1_001': dict({
          '%GC': 49.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'F1-1A_S1_R1_001.fastq.gz',
          'Sequence length': '35-151',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 18529595.0,
          'basic_statistics': 'pass',
          'overrepresented_sequences': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'fail',
          'total_deduplicated_percentage': 20.303422,
        }),
        'GY10_R1': dict({
          '%GC': 16.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'GY10_R1.fq.gz',
          'Sequence length': 72.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 72.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 72,
          'overrepresented_sequences': 'fail',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'warn',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': None,
        }),
        'NMP_R1_L1_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1718888.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 90.120231,
        }),
        'NMP_R1_L1_1_val_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1715854.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.810533,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 90.142548,
        }),
        'NMP_R1_L1_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1718888.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 91.069979,
        }),
        'NMP_R1_L1_2_val_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 1715854.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.427094,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 91.09127,
        }),
        'NMP_R1_L2_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 915009.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'warn',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 94.315927,
        }),
        'NMP_R1_L2_1_val_1': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 913687.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 98.616055,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 94.369248,
        }),
        'NMP_R1_L2_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 915009.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'warn',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 95.235653,
        }),
        'NMP_R1_L2_2_val_2': dict({
          '%GC': 45.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R1_L2_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 913687.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.275145,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'warn',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 95.253517,
        }),
        'NMP_R2_L1_1': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_1.fastq.gz',
          'Sequence length': 51.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 336288.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 51.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 93.000851,
        }),
        'NMP_R2_L1_1_val_1': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_1_val_1.fq.gz',
          'Sequence length': '20-51',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 335361.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 50.199242,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.299076,
        }),
        'NMP_R2_L1_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_2.fastq.gz',
          'Sequence length': 51.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 336288.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 51.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 93.180176,
        }),
        'NMP_R2_L1_2_val_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NMP_R2_L1_2_val_2.fq.gz',
          'Sequence length': '20-51',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 335361.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 50.163054,
          'basic_statistics': 'pass',
          'median_sequence_length': 51,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.451747,
        }),
        'NP_D8_R1_L1_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2567181.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 84.672749,
        }),
        'NP_D8_R1_L1_1_val_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2563715.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.78742,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 84.712446,
        }),
        'NP_D8_R1_L1_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2567181.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 85.389331,
        }),
        'NP_D8_R1_L1_2_val_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R1_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 2563715.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.45075,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 85.425605,
        }),
        'NP_D8_R2_L1_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_1.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838907.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 88.640906,
        }),
        'NP_D8_R2_L1_1_val_1': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_1_val_1.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838254.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.832515,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 88.656427,
        }),
        'NP_D8_R2_L1_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_2.fastq.gz',
          'Sequence length': 101.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838907.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 101.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 101,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 88.908825,
        }),
        'NP_D8_R2_L1_2_val_2': dict({
          '%GC': 46.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'NP_D8_R2_L1_2_val_2.fq.gz',
          'Sequence length': '20-101',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 838254.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 99.718363,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'warn',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 88.925541,
        }),
        'SK-GBD-000919.1': dict({
          '%GC': 0.0,
          'Encoding': 'Illumina 1.5',
          'File type': 'null',
          'Filename': 'SK-GBD-000919.1.fastq',
          'Sequence length': 0.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 0.0,
          'adapter_content': 'warn',
          'basic_statistics': 'pass',
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_sequence_gc_content': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 100.0,
        }),
        'SRR1067503_1': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_1.fastq.gz',
          'Sequence length': 36.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 30680980.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'fail',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 86.841642,
        }),
        'SRR1067503_v10_1': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_v10_1.fastq.gz',
          'Filtered Sequences': 0.0,
          'Sequence length': 36.0,
          'Total Sequences': 30680980.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067503_v7_1': dict({
          '%GC': 44.0,
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067503_v7_1.fastq.gz',
          'Sequence length': 36.0,
          'Total Sequences': 30680980.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067505_1': dict({
          '%GC': 47.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_1.fastq.gz',
          'Sequence length': 36.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 18361776.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'fail',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 91.788429,
        }),
        'SRR1067505_v10_1': dict({
          '%GC': 47.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_v10_1.fastq.gz',
          'Filtered Sequences': 0.0,
          'Sequence length': 36.0,
          'Total Sequences': 18361776.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'warn',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'pass',
        }),
        'SRR1067505_v7_1': dict({
          '%GC': 47.0,
          'File type': 'Conventional base calls',
          'Filename': 'SRR1067505_v7_1.fastq.gz',
          'Sequence length': 36.0,
          'Total Sequences': 18361776.0,
          'avg_sequence_length': 36.0,
          'basic_statistics': 'pass',
          'kmer_content': 'warn',
          'median_sequence_length': 36,
          'overrepresented_sequences': 'warn',
          'per_base_gc_content': 'warn',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_duplication_levels': 'warn',
          'sequence_length_distribution': 'pass',
        }),
        'run1_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'run1_2.fq',
          'Sequence length': '150-154',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '4.5 kbp',
          'Total Sequences': 30.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 150.7,
          'basic_statistics': 'pass',
          'median_sequence_length': 150,
          'overrepresented_sequences': 'fail',
          'per_base_n_content': 'fail',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 93.333333,
        }),
        'sample1_S1_L001_R2_001': dict({
          '%GC': 44.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'sample1_S1_L001_R2_001.fastq.gz',
          'Sequence length': 301.0,
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 82330.0,
          'adapter_content': 'fail',
          'avg_sequence_length': 301.0,
          'basic_statistics': 'pass',
          'median_sequence_length': 301,
          'overrepresented_sequences': 'warn',
          'per_base_n_content': 'fail',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'warn',
          'per_tile_sequence_quality': 'fail',
          'sequence_duplication_levels': 'fail',
          'sequence_length_distribution': 'pass',
          'total_deduplicated_percentage': 29.744929,
        }),
        'single': dict({
          '%GC': 50.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'single.fastq.gz',
          'Sequence length': '91-108',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.052051,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 98.227962,
        }),
        'test': dict({
          '%GC': 59.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test.fastq_barcode01',
          'Sequence length': '135-1565',
          'Sequences flagged as poor quality': 0.0,
          'Total Sequences': 240.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 619.014583,
          'basic_statistics': 'pass',
          'median_sequence_length': 624,
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'pass',
          'per_base_sequence_quality': 'pass',
          'per_sequence_gc_content': 'pass',
          'per_sequence_quality_scores': 'pass',
          'sequence_length_distribution': 'pass',
        }),
        'test_1': dict({
          '%GC': 50.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test_1.fastq.gz',
          'Sequence length': '91-108',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.052051,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'fail',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'fail',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 98.227962,
        }),
        'test_2': dict({
          '%GC': 48.0,
          'Encoding': 'Sanger / Illumina 1.9',
          'File type': 'Conventional base calls',
          'Filename': 'test_2.fastq.gz',
          'Sequence length': '90-107',
          'Sequences flagged as poor quality': 0.0,
          'Total Bases': '26.6 Mbp',
          'Total Sequences': 266736.0,
          'adapter_content': 'pass',
          'avg_sequence_length': 100.050916,
          'basic_statistics': 'pass',
          'median_sequence_length': 100,
          'overrepresented_sequences': 'pass',
          'per_base_n_content': 'pass',
          'per_base_sequence_content': 'warn',
          'per_base_sequence_quality': 'fail',
          'per_sequence_gc_content': 'warn',
          'per_sequence_quality_scores': 'fail',
          'sequence_duplication_levels': 'pass',
          'sequence_length_distribution': 'warn',
          'total_deduplicated_percentage': 99.006463,
        }),
      }),
    }),
    'sections': list([
      dict({
        'anchor': 'fastqc_sequence_counts',
        'comment': '',
        'description': '<p>Sequence counts for each sample. Duplicate read counts are an estimate only.</p>',
        'helptext': '''
          <p>This plot show the total number of reads, broken down into unique and duplicate
          if possible (only more recent versions of FastQC give duplicate info).</p>
          <p>You can read more about duplicate calculation in the
          <a href="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/8%20Duplicate%20Sequences.html">FastQC documentation</a>.
          A small part has been copied here for convenience:</p>
          <p><em>Only sequences which first appear in the first 100,000 sequences
          in each file are analysed. This should be enough to get a good impression
          for the duplication levels in the whole file. Each sequence is tracked to
          the end of the file to give a representative count of the overall duplication level.</em></p>
          <p><em>The duplication detection requires an exact sequence match over the whole length of
          the sequence. Any reads over 75bp in length are truncated to 50bp for this analysis.</em></p>
        ''',
        'name': 'Sequence Counts',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_sequence_quality',
        'comment': '',
        'description': '<p>The mean quality value across each base position in the read.</p>',
        'helptext': '''
          <p>To enable multiple samples to be plotted on the same graph, only the mean quality
          scores are plotted (unlike the box plots seen in FastQC reports).</p>
          <p>Taken from the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/2%20Per%20Base%20Sequence%20Quality.html">FastQC help</a>:</p>
          <p><em>The y-axis on the graph shows the quality scores. The higher the score, the better
          the base call. The background of the graph divides the y axis into very good quality
          calls (green), calls of reasonable quality (orange), and calls of poor quality (red).
          The quality of calls on most platforms will degrade as the run progresses, so it is
          common to see base calls falling into the orange area towards the end of a read.</em></p>
        ''',
        'name': 'Sequence Quality Histograms',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_sequence_quality_scores',
        'comment': '',
        'description': '<p>The number of reads with average quality scores. Shows if a subset of reads has poor quality.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/3%20Per%20Sequence%20Quality%20Scores.html">FastQC help</a>:</p>
          <p><em>The per sequence quality score report allows you to see if a subset of your
          sequences have universally low quality values. It is often the case that a
          subset of sequences will have universally poor quality, however these should
          represent only a small percentage of the total sequences.</em></p>
        ''',
        'name': 'Per Sequence Quality Scores',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_sequence_content',
        'comment': '',
        'description': '<p>The proportion of each base position for which each of the four normal DNA bases has been called.</p>',
        'helptext': '''
          <p>To enable multiple samples to be shown in a single plot, the base composition data
          is shown as a heatmap. The colours represent the balance between the four bases:
          an even distribution should give an even muddy brown colour. Hover over the plot
          to see the percentage of the four bases under the cursor.</p>
          <p><strong>To see the data as a line plot, as in the original FastQC graph, click on a sample track.</strong></p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/4%20Per%20Base%20Sequence%20Content.html">FastQC help</a>:</p>
          <p><em>Per Base Sequence Content plots out the proportion of each base position in a
          file for which each of the four normal DNA bases has been called.</em></p>
          <p><em>In a random library you would expect that there would be little to no difference
          between the different bases of a sequence run, so the lines in this plot should
          run parallel with each other. The relative amount of each base should reflect
          the overall amount of these bases in your genome, but in any case they should
          not be hugely imbalanced from each other.</em></p>
          <p><em>It's worth noting that some types of library will always produce biased sequence
          composition, normally at the start of the read. Libraries produced by priming
          using random hexamers (including nearly all RNA-Seq libraries) and those which
          were fragmented using transposases inherit an intrinsic bias in the positions
          at which reads start. This bias does not concern an absolute sequence, but instead
          provides enrichement of a number of different K-mers at the 5' end of the reads.
          Whilst this is a true technical bias, it isn't something which can be corrected
          by trimming and in most cases doesn't seem to adversely affect the downstream
          analysis.</em></p>
        ''',
        'name': 'Per Base Sequence Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_sequence_gc_content',
        'comment': '',
        'description': '<p><strong>The dashed black line shows theoretical GC content:</strong> <code>Human Genome</code></p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/5%20Per%20Sequence%20GC%20Content.html">FastQC help</a>:</p>
          <p><em>This module measures the GC content across the whole length of each sequence
          in a file and compares it to a modelled normal distribution of GC content.</em></p>
          <p><em>In a normal random library you would expect to see a roughly normal distribution
          of GC content where the central peak corresponds to the overall GC content of
          the underlying genome. Since we don't know the GC content of the genome the
          modal GC content is calculated from the observed data and used to build a
          reference distribution.</em></p>
          <p><em>An unusually shaped distribution could indicate a contaminated library or
          some other kinds of biased subset. A normal distribution which is shifted
          indicates some systematic bias which is independent of base position. If there
          is a systematic bias which creates a shifted normal distribution then this won't
          be flagged as an error by the module since it doesn't know what your genome's
          GC content should be.</em></p>
        ''',
        'name': 'Per Sequence GC Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_per_base_n_content',
        'comment': '',
        'description': '<p>The percentage of base calls at each position for which an <code>N</code> was called.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/6%20Per%20Base%20N%20Content.html">FastQC help</a>:</p>
          <p><em>If a sequencer is unable to make a base call with sufficient confidence then it will
          normally substitute an <code>N</code> rather than a conventional base call. This graph shows the
          percentage of base calls at each position for which an <code>N</code> was called.</em></p>
          <p><em>It's not unusual to see a very low proportion of Ns appearing in a sequence, especially
          nearer the end of a sequence. However, if this proportion rises above a few percent
          it suggests that the analysis pipeline was unable to interpret the data well enough to
          make valid base calls.</em></p>
        ''',
        'name': 'Per Base N Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_sequence_length_distribution',
        'comment': '',
        'description': '<p>The distribution of fragment sizes (read lengths) found. See the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/7%20Sequence%20Length%20Distribution.html">FastQC help</a></p>',
        'helptext': '',
        'name': 'Sequence Length Distribution',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_sequence_duplication_levels',
        'comment': '',
        'description': '<p>The relative level of duplication found for every sequence.</p>',
        'helptext': '''
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/8%20Duplicate%20Sequences.html">FastQC Help</a>:</p>
          <p><em>In a diverse library most sequences will occur only once in the final set.
          A low level of duplication may indicate a very high level of coverage of the
          target sequence, but a high level of duplication is more likely to indicate
          some kind of enrichment bias (e.g. PCR over amplification). This graph shows
          the degree of duplication for every sequence in a library: the relative
          number of sequences with different degrees of duplication.</em></p>
          <p><em>Only sequences which first appear in the first 100,000 sequences
          in each file are analysed. This should be enough to get a good impression
          for the duplication levels in the whole file. Each sequence is tracked to
          the end of the file to give a representative count of the overall duplication level.</em></p>
          <p><em>The duplication detection requires an exact sequence match over the whole length of
          the sequence. Any reads over 75bp in length are truncated to 50bp for this analysis.</em></p>
          <p><em>In a properly diverse library most sequences should fall into the far left of the
          plot in both the red and blue lines. A general level of enrichment, indicating broad
          oversequencing in the library will tend to flatten the lines, lowering the low end
          and generally raising other categories. More specific enrichments of subsets, or
          the presence of low complexity contaminants will tend to produce spikes towards the
          right of the plot.</em></p>
        ''',
        'name': 'Sequence Duplication Levels',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_overrepresented_sequences',
        'comment': '',
        'description': '<p>The total amount of overrepresented sequences found in each library.</p>',
        'helptext': '''
          <p>FastQC calculates and lists overrepresented sequences in FastQ files. It would not be
          possible to show this for all samples in a MultiQC report, so instead this plot shows
          the <em>number of sequences</em> categorized as overrepresented.</p>
          <p>Sometimes, a single sequence  may account for a large number of reads in a dataset.
          To show this, the bars are split into two: the first shows the overrepresented reads
          that come from the single most common sequence. The second shows the total count
          from all remaining overrepresented sequences.</p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/9%20Overrepresented%20Sequences.html">FastQC Help</a>:</p>
          <p><em>A normal high-throughput library will contain a diverse set of sequences, with no
          individual sequence making up a tiny fraction of the whole. Finding that a single
          sequence is very overrepresented in the set either means that it is highly biologically
          significant, or indicates that the library is contaminated, or not as diverse as you expected.</em></p>
          <p><em>FastQC lists all the sequences which make up more than 0.1% of the total.
          To conserve memory only sequences which appear in the first 100,000 sequences are tracked
          to the end of the file. It is therefore possible that a sequence which is overrepresented
          but doesn't appear at the start of the file for some reason could be missed by this module.</em></p>
        ''',
        'name': 'Overrepresented sequences by sample',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_top_overrepresented_sequences',
        'comment': '',
        'description': '''
          <p>Top overrepresented sequences across all samples. The table shows 20
          most overrepresented sequences across all samples, ranked by the number of samples they occur in.</p>
        ''',
        'helptext': '',
        'name': 'Top overrepresented sequences',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_adapter_content',
        'comment': '',
        'description': '''
          <p>The cumulative percentage count of the proportion of your
                      library which has seen each of the adapter sequences at each position.</p>
        ''',
        'helptext': '''
          <p>Note that only samples with ≥ 0.1% adapter contamination are shown.</p>
          <p>There may be several lines per sample, as one is shown for each adapter
          detected in the file.</p>
          <p>From the <a href="http://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/10%20Adapter%20Content.html">FastQC Help</a>:</p>
          <p><em>The plot shows a cumulative percentage count of the proportion
          of your library which has seen each of the adapter sequences at each position.
          Once a sequence has been seen in a read it is counted as being present
          right through to the end of the read so the percentages you see will only
          increase as the read length goes on.</em></p>
        ''',
        'name': 'Adapter Content',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'fastqc_status_checks',
        'comment': '',
        'description': '''
          <p>Status for each FastQC section showing whether results seem entirely normal (green),
          slightly abnormal (orange) or very unusual (red).</p>
        ''',
        'helptext': '''
          <p>FastQC assigns a status for each section of the report.
          These give a quick evaluation of whether the results of the analysis seem
          entirely normal (green), slightly abnormal (orange) or very unusual (red).</p>
          <p>It is important to stress that although the analysis results appear to give a pass/fail result,
          these evaluations must be taken in the context of what you expect from your library.
          A 'normal' sample as far as FastQC is concerned is random and diverse.
          Some experiments may be expected to produce libraries which are biased in particular ways.
          You should treat the summary evaluations therefore as pointers to where you should concentrate
          your attention and understand why your library may not look random and diverse.</p>
          <p>Specific guidance on how to interpret the output of each module can be found in the relevant
          report section, or in the <a href="https://www.bioinformatics.babraham.ac.uk/projects/fastqc/Help/3%20Analysis%20Modules/">FastQC help</a>.</p>
          <p>In this heatmap, we summarise all of these into a single heatmap for a quick overview.
          Note that not all FastQC sections have plots in MultiQC reports, but all status checks
          are shown in this heatmap.</p>
        ''',
        'name': 'Status Checks',
        'plot_id': None,
        'plot_type': None,
      }),
    ]),
    'software_versions': dict({
      'FastQC': list([
        tuple(
          <Version('0.7.2')>,
          '0.7.2',
        ),
        tuple(
          <Version('0.10.1')>,
          '0.10.1',
        ),
        tuple(
          <Version('0.11.2')>,
          '0.11.2',
        ),
        tuple(
          <Version('0.11.5')>,
          '0.11.5',
        ),
        tuple(
          <Version('0.11.8')>,
          '0.11.8',
        ),
        tuple(
          <Version('0.11.9')>,
          '0.11.9',
        ),
        tuple(
          <Version('0.12.1')>,
          '0.12.1',
        ),
      ]),
    }),
  })
# ---

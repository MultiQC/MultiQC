# serializer version: 1
# name: TestSamtoolsFlagstatIndividualFiles.test_individual_flagstat_file[small.samtools12.flagstat.log.txt]
  dict({
    'filename': 'small.samtools12.flagstat.log.txt',
    'general_stats': dict({
      'samtools': dict({
        'small': list([
          InputRow(sample='small', data={'total_passed': 5414, 'total_failed': 0, 'secondary_passed': 13, 'secondary_failed': 0, 'supplementary_passed': 0, 'supplementary_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 5350, 'mapped_failed': 0, 'mapped_passed_pct': 98.82, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 5401, 'paired in sequencing_failed': 0, 'read1_passed': 2709, 'read1_failed': 0, 'read2_passed': 2692, 'read2_failed': 0, 'properly paired_passed': 5011, 'properly paired_failed': 0, 'properly paired_passed_pct': 92.78, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 5273, 'with itself and mate mapped_failed': 0, 'singletons_passed': 64, 'singletons_failed': 0, 'singletons_passed_pct': 1.18, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 206, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 81, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 5414}),
        ]),
      }),
    }),
    'parsed_data': dict({
      'multiqc_samtools_flagstat': dict({
        'small': dict({
          'duplicates_failed': 0,
          'duplicates_passed': 0,
          'flagstat_total': 5414,
          'mapped_failed': 0,
          'mapped_failed_pct': nan,
          'mapped_passed': 5350,
          'mapped_passed_pct': 98.82,
          'paired in sequencing_failed': 0,
          'paired in sequencing_passed': 5401,
          'properly paired_failed': 0,
          'properly paired_failed_pct': nan,
          'properly paired_passed': 5011,
          'properly paired_passed_pct': 92.78,
          'read1_failed': 0,
          'read1_passed': 2709,
          'read2_failed': 0,
          'read2_passed': 2692,
          'secondary_failed': 0,
          'secondary_passed': 13,
          'singletons_failed': 0,
          'singletons_failed_pct': nan,
          'singletons_passed': 64,
          'singletons_passed_pct': 1.18,
          'supplementary_failed': 0,
          'supplementary_passed': 0,
          'total_failed': 0,
          'total_passed': 5414,
          'with itself and mate mapped_failed': 0,
          'with itself and mate mapped_passed': 5273,
          'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
          'with mate mapped to a different chr (mapQ >= 5)_passed': 81,
          'with mate mapped to a different chr_failed': 0,
          'with mate mapped to a different chr_passed': 206,
        }),
      }),
    }),
    'sections': list([
      dict({
        'anchor': 'samtools-flagstat',
        'comment': '',
        'description': '<p>This module parses the output from <code>samtools flagstat</code></p>',
        'helptext': '',
        'name': 'Flagstat',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'samtools-flagstat-pct',
        'comment': '',
        'description': '<p>This module parses the output from <code>samtools flagstat</code></p>',
        'helptext': '',
        'name': 'Flagstat: Percentage of total',
        'plot_id': None,
        'plot_type': None,
      }),
    ]),
  })
# ---
# name: TestSamtoolsFlagstatIndividualFiles.test_individual_flagstat_file[small.samtools13.flagstat.log.txt]
  dict({
    'filename': 'small.samtools13.flagstat.log.txt',
    'general_stats': dict({
      'samtools': dict({
        'small': list([
          InputRow(sample='small', data={'total_passed': 5414, 'total_failed': 0, 'secondary_passed': 13, 'secondary_failed': 0, 'supplementary_passed': 0, 'supplementary_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 5350, 'mapped_failed': 0, 'mapped_passed_pct': 98.82, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 5401, 'paired in sequencing_failed': 0, 'read1_passed': 2709, 'read1_failed': 0, 'read2_passed': 2692, 'read2_failed': 0, 'properly paired_passed': 5011, 'properly paired_failed': 0, 'properly paired_passed_pct': 92.78, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 5273, 'with itself and mate mapped_failed': 0, 'singletons_passed': 64, 'singletons_failed': 0, 'singletons_passed_pct': 1.18, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 206, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 81, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 5414}),
        ]),
      }),
    }),
    'parsed_data': dict({
      'multiqc_samtools_flagstat': dict({
        'small': dict({
          'duplicates_failed': 0,
          'duplicates_passed': 0,
          'flagstat_total': 5414,
          'mapped_failed': 0,
          'mapped_failed_pct': nan,
          'mapped_passed': 5350,
          'mapped_passed_pct': 98.82,
          'paired in sequencing_failed': 0,
          'paired in sequencing_passed': 5401,
          'properly paired_failed': 0,
          'properly paired_failed_pct': nan,
          'properly paired_passed': 5011,
          'properly paired_passed_pct': 92.78,
          'read1_failed': 0,
          'read1_passed': 2709,
          'read2_failed': 0,
          'read2_passed': 2692,
          'secondary_failed': 0,
          'secondary_passed': 13,
          'singletons_failed': 0,
          'singletons_failed_pct': nan,
          'singletons_passed': 64,
          'singletons_passed_pct': 1.18,
          'supplementary_failed': 0,
          'supplementary_passed': 0,
          'total_failed': 0,
          'total_passed': 5414,
          'with itself and mate mapped_failed': 0,
          'with itself and mate mapped_passed': 5273,
          'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
          'with mate mapped to a different chr (mapQ >= 5)_passed': 81,
          'with mate mapped to a different chr_failed': 0,
          'with mate mapped to a different chr_passed': 206,
        }),
      }),
    }),
    'sections': list([
      dict({
        'anchor': 'samtools-flagstat',
        'comment': '',
        'description': '<p>This module parses the output from <code>samtools flagstat</code></p>',
        'helptext': '',
        'name': 'Flagstat',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'samtools-flagstat-pct',
        'comment': '',
        'description': '<p>This module parses the output from <code>samtools flagstat</code></p>',
        'helptext': '',
        'name': 'Flagstat: Percentage of total',
        'plot_id': None,
        'plot_type': None,
      }),
    ]),
  })
# ---
# name: TestSamtoolsFlagstatSnapshot.test_flagstat_complete_snapshot
  dict({
    'general_stats_data': dict({
      'samtools': dict({
        'low_quality_1': list([
          InputRow(sample='low_quality_1', data={'total_passed': 137147, 'total_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 137147, 'mapped_failed': 0, 'mapped_passed_pct': 100.0, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 137147, 'paired in sequencing_failed': 0, 'read1_passed': 66552, 'read1_failed': 0, 'read2_passed': 70595, 'read2_failed': 0, 'properly paired_passed': 44296, 'properly paired_failed': 0, 'properly paired_passed_pct': 32.3, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 57734, 'with itself and mate mapped_failed': 0, 'singletons_passed': 79413, 'singletons_failed': 0, 'singletons_passed_pct': 57.9, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 14598, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 668, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 137147}),
        ]),
        'low_quality_2': list([
          InputRow(sample='low_quality_2', data={'total_passed': 120672, 'total_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 120672, 'mapped_failed': 0, 'mapped_passed_pct': 100.0, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 120672, 'paired in sequencing_failed': 0, 'read1_passed': 59601, 'read1_failed': 0, 'read2_passed': 61071, 'read2_failed': 0, 'properly paired_passed': 38796, 'properly paired_failed': 0, 'properly paired_passed_pct': 32.15, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 47462, 'with itself and mate mapped_failed': 0, 'singletons_passed': 73210, 'singletons_failed': 0, 'singletons_passed_pct': 60.67, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 10266, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 508, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 120672}),
        ]),
        'samtools': list([
          InputRow(sample='samtools', data={'total_passed': 11540659, 'total_failed': 0, 'secondary_passed': 6365, 'secondary_failed': 0, 'supplementary_passed': 0, 'supplementary_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 11540643, 'mapped_failed': 0, 'mapped_passed_pct': 100.0, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 11534294, 'paired in sequencing_failed': 0, 'read1_passed': 5767147, 'read1_failed': 0, 'read2_passed': 5767147, 'read2_failed': 0, 'properly paired_passed': 11518384, 'properly paired_failed': 0, 'properly paired_passed_pct': 99.86, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 11534266, 'with itself and mate mapped_failed': 0, 'singletons_passed': 12, 'singletons_failed': 0, 'singletons_passed_pct': 0.0, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 628, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 344, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 11540659}),
        ]),
        'small': list([
          InputRow(sample='small', data={'total_passed': 5414, 'total_failed': 0, 'secondary_passed': 13, 'secondary_failed': 0, 'supplementary_passed': 0, 'supplementary_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 5350, 'mapped_failed': 0, 'mapped_passed_pct': 98.82, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 5401, 'paired in sequencing_failed': 0, 'read1_passed': 2709, 'read1_failed': 0, 'read2_passed': 2692, 'read2_failed': 0, 'properly paired_passed': 5011, 'properly paired_failed': 0, 'properly paired_passed_pct': 92.78, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 5273, 'with itself and mate mapped_failed': 0, 'singletons_passed': 64, 'singletons_failed': 0, 'singletons_passed_pct': 1.18, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 206, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 81, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 5414}),
        ]),
      }),
    }),
    'general_stats_headers': dict({
      'samtools': dict({
        'flagstat_total': dict({
          'description': 'Total reads in the bam file (millions)',
          'hidden': True,
          'namespace': 'Samtools: flagstat',
          'shared_key': 'read_count',
          'title': 'Reads',
        }),
        'mapped_passed': dict({
          'description': 'Reads mapped in the bam file (millions)',
          'hidden': False,
          'namespace': 'Samtools: flagstat',
          'shared_key': 'read_count',
          'title': 'Reads mapped',
        }),
        'mapped_passed_pct': dict({
          'description': '% Reads mapped in the bam file',
          'hidden': True,
          'max': 100,
          'min': 0,
          'namespace': 'Samtools: flagstat',
          'scale': 'RdYlGn',
          'suffix': '%',
          'title': '% Reads mapped',
        }),
      }),
    }),
    'module_info': dict({
      'anchor': 'samtools',
      'doi': list([
        '10.1093/bioinformatics/btp352',
      ]),
      'href': list([
        'http://www.htslib.org',
      ]),
      'info': 'Toolkit for interacting with BAM/CRAM files',
      'name': 'Samtools',
    }),
    'saved_raw_data': dict({
      'multiqc_samtools_flagstat': dict({
        'low_quality_1': dict({
          'duplicates_failed': 0,
          'duplicates_passed': 0,
          'flagstat_total': 137147,
          'mapped_failed': 0,
          'mapped_failed_pct': nan,
          'mapped_passed': 137147,
          'mapped_passed_pct': 100.0,
          'paired in sequencing_failed': 0,
          'paired in sequencing_passed': 137147,
          'properly paired_failed': 0,
          'properly paired_failed_pct': nan,
          'properly paired_passed': 44296,
          'properly paired_passed_pct': 32.3,
          'read1_failed': 0,
          'read1_passed': 66552,
          'read2_failed': 0,
          'read2_passed': 70595,
          'singletons_failed': 0,
          'singletons_failed_pct': nan,
          'singletons_passed': 79413,
          'singletons_passed_pct': 57.9,
          'total_failed': 0,
          'total_passed': 137147,
          'with itself and mate mapped_failed': 0,
          'with itself and mate mapped_passed': 57734,
          'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
          'with mate mapped to a different chr (mapQ >= 5)_passed': 668,
          'with mate mapped to a different chr_failed': 0,
          'with mate mapped to a different chr_passed': 14598,
        }),
        'low_quality_2': dict({
          'duplicates_failed': 0,
          'duplicates_passed': 0,
          'flagstat_total': 120672,
          'mapped_failed': 0,
          'mapped_failed_pct': nan,
          'mapped_passed': 120672,
          'mapped_passed_pct': 100.0,
          'paired in sequencing_failed': 0,
          'paired in sequencing_passed': 120672,
          'properly paired_failed': 0,
          'properly paired_failed_pct': nan,
          'properly paired_passed': 38796,
          'properly paired_passed_pct': 32.15,
          'read1_failed': 0,
          'read1_passed': 59601,
          'read2_failed': 0,
          'read2_passed': 61071,
          'singletons_failed': 0,
          'singletons_failed_pct': nan,
          'singletons_passed': 73210,
          'singletons_passed_pct': 60.67,
          'total_failed': 0,
          'total_passed': 120672,
          'with itself and mate mapped_failed': 0,
          'with itself and mate mapped_passed': 47462,
          'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
          'with mate mapped to a different chr (mapQ >= 5)_passed': 508,
          'with mate mapped to a different chr_failed': 0,
          'with mate mapped to a different chr_passed': 10266,
        }),
        'samtools': dict({
          'duplicates_failed': 0,
          'duplicates_passed': 0,
          'flagstat_total': 11540659,
          'mapped_failed': 0,
          'mapped_failed_pct': nan,
          'mapped_passed': 11540643,
          'mapped_passed_pct': 100.0,
          'paired in sequencing_failed': 0,
          'paired in sequencing_passed': 11534294,
          'properly paired_failed': 0,
          'properly paired_failed_pct': nan,
          'properly paired_passed': 11518384,
          'properly paired_passed_pct': 99.86,
          'read1_failed': 0,
          'read1_passed': 5767147,
          'read2_failed': 0,
          'read2_passed': 5767147,
          'secondary_failed': 0,
          'secondary_passed': 6365,
          'singletons_failed': 0,
          'singletons_failed_pct': nan,
          'singletons_passed': 12,
          'singletons_passed_pct': 0.0,
          'supplementary_failed': 0,
          'supplementary_passed': 0,
          'total_failed': 0,
          'total_passed': 11540659,
          'with itself and mate mapped_failed': 0,
          'with itself and mate mapped_passed': 11534266,
          'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
          'with mate mapped to a different chr (mapQ >= 5)_passed': 344,
          'with mate mapped to a different chr_failed': 0,
          'with mate mapped to a different chr_passed': 628,
        }),
        'small': dict({
          'duplicates_failed': 0,
          'duplicates_passed': 0,
          'flagstat_total': 5414,
          'mapped_failed': 0,
          'mapped_failed_pct': nan,
          'mapped_passed': 5350,
          'mapped_passed_pct': 98.82,
          'paired in sequencing_failed': 0,
          'paired in sequencing_passed': 5401,
          'properly paired_failed': 0,
          'properly paired_failed_pct': nan,
          'properly paired_passed': 5011,
          'properly paired_passed_pct': 92.78,
          'read1_failed': 0,
          'read1_passed': 2709,
          'read2_failed': 0,
          'read2_passed': 2692,
          'secondary_failed': 0,
          'secondary_passed': 13,
          'singletons_failed': 0,
          'singletons_failed_pct': nan,
          'singletons_passed': 64,
          'singletons_passed_pct': 1.18,
          'supplementary_failed': 0,
          'supplementary_passed': 0,
          'total_failed': 0,
          'total_passed': 5414,
          'with itself and mate mapped_failed': 0,
          'with itself and mate mapped_passed': 5273,
          'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
          'with mate mapped to a different chr (mapQ >= 5)_passed': 81,
          'with mate mapped to a different chr_failed': 0,
          'with mate mapped to a different chr_passed': 206,
        }),
      }),
    }),
    'sections': list([
      dict({
        'anchor': 'samtools-flagstat',
        'comment': '',
        'description': '<p>This module parses the output from <code>samtools flagstat</code></p>',
        'helptext': '',
        'name': 'Flagstat',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'samtools-flagstat-pct',
        'comment': '',
        'description': '<p>This module parses the output from <code>samtools flagstat</code></p>',
        'helptext': '',
        'name': 'Flagstat: Percentage of total',
        'plot_id': None,
        'plot_type': None,
      }),
    ]),
    'software_versions': dict({
    }),
  })
# ---
# name: TestSamtoolsFlagstatSnapshot.test_flagstat_data_snapshot
  dict({
    'multiqc_samtools_flagstat': dict({
      'low_quality_1': dict({
        'duplicates_failed': 0,
        'duplicates_passed': 0,
        'flagstat_total': 137147,
        'mapped_failed': 0,
        'mapped_failed_pct': nan,
        'mapped_passed': 137147,
        'mapped_passed_pct': 100.0,
        'paired in sequencing_failed': 0,
        'paired in sequencing_passed': 137147,
        'properly paired_failed': 0,
        'properly paired_failed_pct': nan,
        'properly paired_passed': 44296,
        'properly paired_passed_pct': 32.3,
        'read1_failed': 0,
        'read1_passed': 66552,
        'read2_failed': 0,
        'read2_passed': 70595,
        'singletons_failed': 0,
        'singletons_failed_pct': nan,
        'singletons_passed': 79413,
        'singletons_passed_pct': 57.9,
        'total_failed': 0,
        'total_passed': 137147,
        'with itself and mate mapped_failed': 0,
        'with itself and mate mapped_passed': 57734,
        'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
        'with mate mapped to a different chr (mapQ >= 5)_passed': 668,
        'with mate mapped to a different chr_failed': 0,
        'with mate mapped to a different chr_passed': 14598,
      }),
      'low_quality_2': dict({
        'duplicates_failed': 0,
        'duplicates_passed': 0,
        'flagstat_total': 120672,
        'mapped_failed': 0,
        'mapped_failed_pct': nan,
        'mapped_passed': 120672,
        'mapped_passed_pct': 100.0,
        'paired in sequencing_failed': 0,
        'paired in sequencing_passed': 120672,
        'properly paired_failed': 0,
        'properly paired_failed_pct': nan,
        'properly paired_passed': 38796,
        'properly paired_passed_pct': 32.15,
        'read1_failed': 0,
        'read1_passed': 59601,
        'read2_failed': 0,
        'read2_passed': 61071,
        'singletons_failed': 0,
        'singletons_failed_pct': nan,
        'singletons_passed': 73210,
        'singletons_passed_pct': 60.67,
        'total_failed': 0,
        'total_passed': 120672,
        'with itself and mate mapped_failed': 0,
        'with itself and mate mapped_passed': 47462,
        'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
        'with mate mapped to a different chr (mapQ >= 5)_passed': 508,
        'with mate mapped to a different chr_failed': 0,
        'with mate mapped to a different chr_passed': 10266,
      }),
      'samtools': dict({
        'duplicates_failed': 0,
        'duplicates_passed': 0,
        'flagstat_total': 11540659,
        'mapped_failed': 0,
        'mapped_failed_pct': nan,
        'mapped_passed': 11540643,
        'mapped_passed_pct': 100.0,
        'paired in sequencing_failed': 0,
        'paired in sequencing_passed': 11534294,
        'properly paired_failed': 0,
        'properly paired_failed_pct': nan,
        'properly paired_passed': 11518384,
        'properly paired_passed_pct': 99.86,
        'read1_failed': 0,
        'read1_passed': 5767147,
        'read2_failed': 0,
        'read2_passed': 5767147,
        'secondary_failed': 0,
        'secondary_passed': 6365,
        'singletons_failed': 0,
        'singletons_failed_pct': nan,
        'singletons_passed': 12,
        'singletons_passed_pct': 0.0,
        'supplementary_failed': 0,
        'supplementary_passed': 0,
        'total_failed': 0,
        'total_passed': 11540659,
        'with itself and mate mapped_failed': 0,
        'with itself and mate mapped_passed': 11534266,
        'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
        'with mate mapped to a different chr (mapQ >= 5)_passed': 344,
        'with mate mapped to a different chr_failed': 0,
        'with mate mapped to a different chr_passed': 628,
      }),
      'small': dict({
        'duplicates_failed': 0,
        'duplicates_passed': 0,
        'flagstat_total': 5414,
        'mapped_failed': 0,
        'mapped_failed_pct': nan,
        'mapped_passed': 5350,
        'mapped_passed_pct': 98.82,
        'paired in sequencing_failed': 0,
        'paired in sequencing_passed': 5401,
        'properly paired_failed': 0,
        'properly paired_failed_pct': nan,
        'properly paired_passed': 5011,
        'properly paired_passed_pct': 92.78,
        'read1_failed': 0,
        'read1_passed': 2709,
        'read2_failed': 0,
        'read2_passed': 2692,
        'secondary_failed': 0,
        'secondary_passed': 13,
        'singletons_failed': 0,
        'singletons_failed_pct': nan,
        'singletons_passed': 64,
        'singletons_passed_pct': 1.18,
        'supplementary_failed': 0,
        'supplementary_passed': 0,
        'total_failed': 0,
        'total_passed': 5414,
        'with itself and mate mapped_failed': 0,
        'with itself and mate mapped_passed': 5273,
        'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
        'with mate mapped to a different chr (mapQ >= 5)_passed': 81,
        'with mate mapped to a different chr_failed': 0,
        'with mate mapped to a different chr_passed': 206,
      }),
    }),
  })
# ---
# name: TestSamtoolsFlagstatSnapshot.test_flagstat_general_stats_snapshot
  dict({
    'data': dict({
      'samtools': dict({
        'low_quality_1': list([
          InputRow(sample='low_quality_1', data={'total_passed': 137147, 'total_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 137147, 'mapped_failed': 0, 'mapped_passed_pct': 100.0, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 137147, 'paired in sequencing_failed': 0, 'read1_passed': 66552, 'read1_failed': 0, 'read2_passed': 70595, 'read2_failed': 0, 'properly paired_passed': 44296, 'properly paired_failed': 0, 'properly paired_passed_pct': 32.3, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 57734, 'with itself and mate mapped_failed': 0, 'singletons_passed': 79413, 'singletons_failed': 0, 'singletons_passed_pct': 57.9, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 14598, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 668, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 137147}),
        ]),
        'low_quality_2': list([
          InputRow(sample='low_quality_2', data={'total_passed': 120672, 'total_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 120672, 'mapped_failed': 0, 'mapped_passed_pct': 100.0, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 120672, 'paired in sequencing_failed': 0, 'read1_passed': 59601, 'read1_failed': 0, 'read2_passed': 61071, 'read2_failed': 0, 'properly paired_passed': 38796, 'properly paired_failed': 0, 'properly paired_passed_pct': 32.15, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 47462, 'with itself and mate mapped_failed': 0, 'singletons_passed': 73210, 'singletons_failed': 0, 'singletons_passed_pct': 60.67, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 10266, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 508, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 120672}),
        ]),
        'samtools': list([
          InputRow(sample='samtools', data={'total_passed': 11540659, 'total_failed': 0, 'secondary_passed': 6365, 'secondary_failed': 0, 'supplementary_passed': 0, 'supplementary_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 11540643, 'mapped_failed': 0, 'mapped_passed_pct': 100.0, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 11534294, 'paired in sequencing_failed': 0, 'read1_passed': 5767147, 'read1_failed': 0, 'read2_passed': 5767147, 'read2_failed': 0, 'properly paired_passed': 11518384, 'properly paired_failed': 0, 'properly paired_passed_pct': 99.86, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 11534266, 'with itself and mate mapped_failed': 0, 'singletons_passed': 12, 'singletons_failed': 0, 'singletons_passed_pct': 0.0, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 628, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 344, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 11540659}),
        ]),
        'small': list([
          InputRow(sample='small', data={'total_passed': 5414, 'total_failed': 0, 'secondary_passed': 13, 'secondary_failed': 0, 'supplementary_passed': 0, 'supplementary_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 5350, 'mapped_failed': 0, 'mapped_passed_pct': 98.82, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 5401, 'paired in sequencing_failed': 0, 'read1_passed': 2709, 'read1_failed': 0, 'read2_passed': 2692, 'read2_failed': 0, 'properly paired_passed': 5011, 'properly paired_failed': 0, 'properly paired_passed_pct': 92.78, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 5273, 'with itself and mate mapped_failed': 0, 'singletons_passed': 64, 'singletons_failed': 0, 'singletons_passed_pct': 1.18, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 206, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 81, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 5414}),
        ]),
      }),
    }),
    'headers': dict({
      'samtools': dict({
        'flagstat_total': dict({
          'description': 'Total reads in the bam file (millions)',
          'hidden': True,
          'namespace': 'Samtools: flagstat',
          'shared_key': 'read_count',
          'title': 'Reads',
        }),
        'mapped_passed': dict({
          'description': 'Reads mapped in the bam file (millions)',
          'hidden': False,
          'namespace': 'Samtools: flagstat',
          'shared_key': 'read_count',
          'title': 'Reads mapped',
        }),
        'mapped_passed_pct': dict({
          'description': '% Reads mapped in the bam file',
          'hidden': True,
          'max': 100,
          'min': 0,
          'namespace': 'Samtools: flagstat',
          'scale': 'RdYlGn',
          'suffix': '%',
          'title': '% Reads mapped',
        }),
      }),
    }),
  })
# ---
# name: TestSamtoolsFlagstatSnapshot.test_flagstat_sections_snapshot
  list([
    dict({
      'anchor': 'samtools-flagstat',
      'comment': '',
      'description': '<p>This module parses the output from <code>samtools flagstat</code></p>',
      'helptext': '',
      'name': 'Flagstat',
      'plot_id': None,
      'plot_type': None,
    }),
    dict({
      'anchor': 'samtools-flagstat-pct',
      'comment': '',
      'description': '<p>This module parses the output from <code>samtools flagstat</code></p>',
      'helptext': '',
      'name': 'Flagstat: Percentage of total',
      'plot_id': None,
      'plot_type': None,
    }),
  ])
# ---
# name: TestSamtoolsFlagstatSnapshot.test_module_complete_snapshot
  dict({
    'general_stats_data': dict({
      'samtools': dict({
        'SRR1067503_1': list([
          InputRow(sample='SRR1067503_1', data={'raw_total_sequences': 29071646.0, 'filtered_sequences': 0.0, 'sequences': 29071646.0, 'is_sorted': 1.0, '1st_fragments': 29071646.0, 'last_fragments': 0.0, 'reads_mapped': 16201191.0, 'reads_mapped_and_paired': 0.0, 'reads_unmapped': 12870455.0, 'reads_properly_paired': 0.0, 'reads_paired': 0.0, 'reads_duplicated': 0.0, 'reads_MQ0': 0.0, 'reads_QC_failed': 0.0, 'non-primary_alignments': 0.0, 'total_length': 1046579256.0, 'bases_mapped': 583242876.0, 'bases_mapped_(cigar)': 583242876.0, 'bases_trimmed': 0.0, 'bases_duplicated': 0.0, 'mismatches': 1654848.0, 'error_rate': 0.002837322, 'average_length': 36.0, 'maximum_length': 36.0, 'average_quality': 31.4, 'insert_size_average': 0.0, 'insert_size_standard_deviation': 0.0, 'inward_oriented_pairs': 0.0, 'outward_oriented_pairs': 0.0, 'pairs_with_other_orientation': 0.0, 'pairs_on_different_chromosomes': 0.0, 'reads_mapped_percent': 55.72849573085749, 'reads_mapped_and_paired_percent': 0.0, 'reads_unmapped_percent': 44.27150426914252, 'reads_properly_paired_percent': 0.0, 'reads_paired_percent': 0.0, 'reads_duplicated_percent': 0.0, 'reads_MQ0_percent': 0.0, 'reads_QC_failed_percent': 0.0}),
        ]),
        'SRR1067505_1': list([
          InputRow(sample='SRR1067505_1', data={'raw_total_sequences': 16635040.0, 'filtered_sequences': 0.0, 'sequences': 16635040.0, 'is_sorted': 1.0, '1st_fragments': 16635040.0, 'last_fragments': 0.0, 'reads_mapped': 12299033.0, 'reads_mapped_and_paired': 0.0, 'reads_unmapped': 4336007.0, 'reads_properly_paired': 0.0, 'reads_paired': 0.0, 'reads_duplicated': 0.0, 'reads_MQ0': 0.0, 'reads_QC_failed': 0.0, 'non-primary_alignments': 0.0, 'total_length': 598861440.0, 'bases_mapped': 442765188.0, 'bases_mapped_(cigar)': 442765188.0, 'bases_trimmed': 0.0, 'bases_duplicated': 0.0, 'mismatches': 1783808.0, 'error_rate': 0.00402879, 'average_length': 36.0, 'maximum_length': 36.0, 'average_quality': 31.9, 'insert_size_average': 0.0, 'insert_size_standard_deviation': 0.0, 'inward_oriented_pairs': 0.0, 'outward_oriented_pairs': 0.0, 'pairs_with_other_orientation': 0.0, 'pairs_on_different_chromosomes': 0.0, 'reads_mapped_percent': 73.93449609979898, 'reads_mapped_and_paired_percent': 0.0, 'reads_unmapped_percent': 26.06550390020102, 'reads_properly_paired_percent': 0.0, 'reads_paired_percent': 0.0, 'reads_duplicated_percent': 0.0, 'reads_MQ0_percent': 0.0, 'reads_QC_failed_percent': 0.0}),
        ]),
        'SRR1067519_1': list([
          InputRow(sample='SRR1067519_1', data={'raw_total_sequences': 23805829.0, 'filtered_sequences': 0.0, 'sequences': 23805829.0, 'is_sorted': 1.0, '1st_fragments': 23805829.0, 'last_fragments': 0.0, 'reads_mapped': 18393154.0, 'reads_mapped_and_paired': 0.0, 'reads_unmapped': 5412675.0, 'reads_properly_paired': 0.0, 'reads_paired': 0.0, 'reads_duplicated': 0.0, 'reads_MQ0': 0.0, 'reads_QC_failed': 0.0, 'non-primary_alignments': 0.0, 'total_length': 857009844.0, 'bases_mapped': 662153544.0, 'bases_mapped_(cigar)': 662153544.0, 'bases_trimmed': 0.0, 'bases_duplicated': 0.0, 'mismatches': 3462334.0, 'error_rate': 0.005228899, 'average_length': 36.0, 'maximum_length': 36.0, 'average_quality': 27.8, 'insert_size_average': 0.0, 'insert_size_standard_deviation': 0.0, 'inward_oriented_pairs': 0.0, 'outward_oriented_pairs': 0.0, 'pairs_with_other_orientation': 0.0, 'pairs_on_different_chromosomes': 0.0, 'reads_mapped_percent': 77.26323666359193, 'reads_mapped_and_paired_percent': 0.0, 'reads_unmapped_percent': 22.73676333640807, 'reads_properly_paired_percent': 0.0, 'reads_paired_percent': 0.0, 'reads_duplicated_percent': 0.0, 'reads_MQ0_percent': 0.0, 'reads_QC_failed_percent': 0.0}),
        ]),
        'Test1': list([
          InputRow(sample='Test1', data={'raw_total_sequences': 101.0, 'filtered_sequences': 0.0, 'sequences': 101.0, 'is_sorted': 1.0, '1st_fragments': 101.0, 'last_fragments': 0.0, 'reads_mapped': 81.0, 'reads_mapped_and_paired': 0.0, 'reads_unmapped': 20.0, 'reads_properly_paired': 0.0, 'reads_paired': 0.0, 'reads_duplicated': 0.0, 'reads_MQ0': 0.0, 'reads_QC_failed': 0.0, 'non-primary_alignments': 0.0, 'total_length': 3529.0, 'bases_mapped': 2829.0, 'bases_mapped_(cigar)': 2829.0, 'bases_trimmed': 0.0, 'bases_duplicated': 0.0, 'mismatches': 41.0, 'error_rate': 0.01449275, 'average_length': 34.0, 'maximum_length': 35.0, 'average_quality': 38.5, 'insert_size_average': 0.0, 'insert_size_standard_deviation': 0.0, 'inward_oriented_pairs': 0.0, 'outward_oriented_pairs': 0.0, 'pairs_with_other_orientation': 0.0, 'pairs_on_different_chromosomes': 0.0, 'reads_mapped_percent': 80.19801980198021, 'reads_mapped_and_paired_percent': 0.0, 'reads_unmapped_percent': 19.801980198019802, 'reads_properly_paired_percent': 0.0, 'reads_paired_percent': 0.0, 'reads_duplicated_percent': 0.0, 'reads_MQ0_percent': 0.0, 'reads_QC_failed_percent': 0.0}),
        ]),
        'filtered_reads': list([
          InputRow(sample='filtered_reads', data={'raw_total_sequences': 1998.0, 'filtered_sequences': 999.0, 'sequences': 999.0, 'is_sorted': 1.0, '1st_fragments': 517.0, 'last_fragments': 482.0, 'reads_mapped': 999.0, 'reads_mapped_and_paired': 999.0, 'reads_unmapped': 0.0, 'reads_properly_paired': 999.0, 'reads_paired': 999.0, 'reads_duplicated': 0.0, 'reads_MQ0': 0.0, 'reads_QC_failed': 0.0, 'non-primary_alignments': 0.0, 'supplementary_alignments': 0.0, 'total_length': 69930.0, 'total_first_fragment_length': 36190.0, 'total_last_fragment_length': 33740.0, 'bases_mapped': 69930.0, 'bases_mapped_(cigar)': 69881.0, 'bases_trimmed': 0.0, 'bases_duplicated': 0.0, 'mismatches': 1445.0, 'error_rate': 0.02067801, 'average_length': 70.0, 'average_first_fragment_length': 70.0, 'average_last_fragment_length': 70.0, 'maximum_length': 70.0, 'maximum_first_fragment_length': 70.0, 'maximum_last_fragment_length': 70.0, 'average_quality': 17.0, 'insert_size_average': 502.2, 'insert_size_standard_deviation': 41.4, 'inward_oriented_pairs': 433.0, 'outward_oriented_pairs': 0.0, 'pairs_with_other_orientation': 0.0, 'pairs_on_different_chromosomes': 0.0, 'percentage_of_properly_paired_reads_(%)': 100.0, 'reads_mapped_percent': 50.0, 'reads_mapped_and_paired_percent': 50.0, 'reads_unmapped_percent': 0.0, 'reads_properly_paired_percent': 50.0, 'reads_paired_percent': 50.0, 'reads_duplicated_percent': 0.0, 'reads_MQ0_percent': 0.0, 'reads_QC_failed_percent': 0.0}),
        ]),
      }),
      'samtools_3': dict({
        'low_quality_1': list([
          InputRow(sample='low_quality_1', data={'total_passed': 137147, 'total_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 137147, 'mapped_failed': 0, 'mapped_passed_pct': 100.0, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 137147, 'paired in sequencing_failed': 0, 'read1_passed': 66552, 'read1_failed': 0, 'read2_passed': 70595, 'read2_failed': 0, 'properly paired_passed': 44296, 'properly paired_failed': 0, 'properly paired_passed_pct': 32.3, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 57734, 'with itself and mate mapped_failed': 0, 'singletons_passed': 79413, 'singletons_failed': 0, 'singletons_passed_pct': 57.9, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 14598, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 668, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 137147}),
        ]),
        'low_quality_2': list([
          InputRow(sample='low_quality_2', data={'total_passed': 120672, 'total_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 120672, 'mapped_failed': 0, 'mapped_passed_pct': 100.0, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 120672, 'paired in sequencing_failed': 0, 'read1_passed': 59601, 'read1_failed': 0, 'read2_passed': 61071, 'read2_failed': 0, 'properly paired_passed': 38796, 'properly paired_failed': 0, 'properly paired_passed_pct': 32.15, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 47462, 'with itself and mate mapped_failed': 0, 'singletons_passed': 73210, 'singletons_failed': 0, 'singletons_passed_pct': 60.67, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 10266, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 508, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 120672}),
        ]),
        'samtools': list([
          InputRow(sample='samtools', data={'total_passed': 11540659, 'total_failed': 0, 'secondary_passed': 6365, 'secondary_failed': 0, 'supplementary_passed': 0, 'supplementary_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 11540643, 'mapped_failed': 0, 'mapped_passed_pct': 100.0, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 11534294, 'paired in sequencing_failed': 0, 'read1_passed': 5767147, 'read1_failed': 0, 'read2_passed': 5767147, 'read2_failed': 0, 'properly paired_passed': 11518384, 'properly paired_failed': 0, 'properly paired_passed_pct': 99.86, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 11534266, 'with itself and mate mapped_failed': 0, 'singletons_passed': 12, 'singletons_failed': 0, 'singletons_passed_pct': 0.0, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 628, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 344, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 11540659}),
        ]),
        'small': list([
          InputRow(sample='small', data={'total_passed': 5414, 'total_failed': 0, 'secondary_passed': 13, 'secondary_failed': 0, 'supplementary_passed': 0, 'supplementary_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 5350, 'mapped_failed': 0, 'mapped_passed_pct': 98.82, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 5401, 'paired in sequencing_failed': 0, 'read1_passed': 2709, 'read1_failed': 0, 'read2_passed': 2692, 'read2_failed': 0, 'properly paired_passed': 5011, 'properly paired_failed': 0, 'properly paired_passed_pct': 92.78, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 5273, 'with itself and mate mapped_failed': 0, 'singletons_passed': 64, 'singletons_failed': 0, 'singletons_passed_pct': 1.18, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 206, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 81, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 5414}),
        ]),
      }),
      'samtools_4': dict({
        'Sample 2': list([
          InputRow(sample='Sample 2', data={'n_dups': 7482847, 'n_tot': 83824753, 'n_unique': 76341906, 'pct_dups': 8.92}),
        ]),
        'sample_1': list([
          InputRow(sample='sample_1', data={'n_dups': 26602816, 'n_tot': 103563641, 'n_unique': 76960825, 'pct_dups': 25.69}),
        ]),
      }),
      'samtools_5': dict({
        'NA12878_sorted_chrM_chr20_rehead_60pdown': list([
          InputRow(sample='NA12878_sorted_chrM_chr20_rehead_60pdown', data={'numreads': 750591, 'covbases': 8983488, 'coverage': 13.936327510616694, 'meandepth': 1.6043681481908614, 'meanbaseq': 255.0, 'meanmapq': 59.19930599147984}),
        ]),
        'bc_anchored_10_reads': list([
          InputRow(sample='bc_anchored_10_reads', data={'numreads': 10, 'covbases': 156, 'coverage': 1.7254728459241235, 'meandepth': 0.12531798694834642, 'meanbaseq': 0.3174870036500387, 'meanmapq': 0.5107399623935406}),
        ]),
        'test.paired_end': list([
          InputRow(sample='test.paired_end', data={'numreads': 141000, 'covbases': 29525, 'coverage': 2.95243, 'meandepth': 16.7743, 'meanbaseq': 40.9, 'meanmapq': 60.0}),
        ]),
      }),
      'samtools_6': dict({
        'issue_3134': list([
          InputRow(sample='issue_3134', data={'optical_duplicate_distance': 2500, 'read': 233070661, 'written': 170120723, 'excluded': 0, 'examined': 233070661, 'paired': 232940212, 'single': 130449, 'duplicate_pair': 62895132, 'duplicate_single': 54806, 'duplicate_pair_optical': 34037112, 'duplicate_single_optical': 21786, 'duplicate_non_primary': 0, 'duplicate_non_primary_optical': 0, 'duplicate_primary_total': 62949938, 'duplicate_total': 62949938, 'estimated_library_size': 308712639, 'duplicate_optical_total': 34058898, 'duplicate_optical_fraction': 0.14613121125528536, 'duplicate_fraction': 0.2700894987378956, 'duplicate_pair_non_optical': 28858020, 'duplicate_single_non_optical': 33020, 'duplicate_non_primary_non_optical': 0, 'non_duplicate': 170120723}),
        ]),
        'test2': list([
          InputRow(sample='test2', data={'optical_duplicate_distance': 2500, 'read': 1353408, 'written': 1353408, 'excluded': 752, 'examined': 1352656, 'paired': 1352588, 'single': 68, 'duplicate_pair': 1058157, 'duplicate_single': 52, 'duplicate_pair_optical': 1026710, 'duplicate_single_optical': 36, 'duplicate_non_primary': 0, 'duplicate_non_primary_optical': 0, 'duplicate_primary_total': 1058209, 'duplicate_total': 1058209, 'estimated_library_size': 788988, 'duplicate_optical_total': 1026746, 'duplicate_optical_fraction': 0.7590592138725589, 'duplicate_fraction': 0.782319377580109, 'duplicate_pair_non_optical': 31447, 'duplicate_single_non_optical': 16, 'duplicate_non_primary_non_optical': 0, 'non_duplicate': 294447}),
        ]),
      }),
    }),
    'general_stats_headers': dict({
      'samtools': dict({
        'error_rate': dict({
          'description': 'Error rate: mismatches (NM) / bases mapped (CIGAR)',
          'format': '{:,.2f}',
          'hidden': False,
          'max': 100,
          'min': 0,
          'modify': 'parse_samtools_stats.<locals>.<lambda>(x)',
          'namespace': 'Samtools: stats',
          'scale': 'OrRd',
          'suffix': '%',
          'title': 'Error rate',
        }),
        'insert_size_average': dict({
          'description': 'Average insert size',
          'format': '{:,.1f}',
          'hidden': True,
          'namespace': 'Samtools: stats',
          'scale': 'Oranges',
          'suffix': 'bp',
          'title': 'Mean insert',
        }),
        'non-primary_alignments': dict({
          'description': 'Non-primary alignments (millions)',
          'hidden': False,
          'namespace': 'Samtools: stats',
          'scale': 'PuBu',
          'shared_key': 'read_count',
          'title': 'Non-primary',
        }),
        'raw_total_sequences': dict({
          'description': 'Total sequences in the bam file (millions)',
          'hidden': False,
          'namespace': 'Samtools: stats',
          'shared_key': 'read_count',
          'title': 'Total seqs',
        }),
        'reads_MQ0_percent': dict({
          'description': '% of reads that are ambiguously placed (MapQ=0)',
          'hidden': True,
          'max': 100,
          'min': 0,
          'namespace': 'Samtools: stats',
          'scale': 'OrRd',
          'suffix': '%',
          'title': '% MapQ 0 reads',
        }),
        'reads_mapped': dict({
          'description': 'Reads mapped in the bam file (millions)',
          'hidden': False,
          'namespace': 'Samtools: stats',
          'shared_key': 'read_count',
          'title': 'Reads mapped',
        }),
        'reads_mapped_percent': dict({
          'description': '% Mapped reads',
          'hidden': False,
          'max': 100,
          'min': 0,
          'namespace': 'Samtools: stats',
          'scale': 'RdYlGn',
          'suffix': '%',
          'title': '% Mapped',
        }),
        'reads_properly_paired_percent': dict({
          'description': '% Properly paired reads',
          'hidden': False,
          'max': 100,
          'min': 0,
          'namespace': 'Samtools: stats',
          'scale': 'RdYlGn',
          'suffix': '%',
          'title': '% Proper pairs',
        }),
      }),
      'samtools_3': dict({
        'flagstat_total': dict({
          'description': 'Total reads in the bam file (millions)',
          'hidden': True,
          'namespace': 'Samtools: flagstat',
          'shared_key': 'read_count',
          'title': 'Reads',
        }),
        'mapped_passed': dict({
          'description': 'Reads mapped in the bam file (millions)',
          'hidden': False,
          'namespace': 'Samtools: flagstat',
          'shared_key': 'read_count',
          'title': 'Reads mapped',
        }),
        'mapped_passed_pct': dict({
          'description': '% Reads mapped in the bam file',
          'hidden': True,
          'max': 100,
          'min': 0,
          'namespace': 'Samtools: flagstat',
          'scale': 'RdYlGn',
          'suffix': '%',
          'title': '% Reads mapped',
        }),
      }),
      'samtools_4': dict({
        'pct_dups': dict({
          'description': 'Percent of duplicate alignments',
          'hidden': False,
          'max': 100,
          'min': 0,
          'namespace': 'Samtools: rmdup',
          'scale': 'OrRd',
          'suffix': '%',
          'title': 'Duplicates',
        }),
      }),
      'samtools_5': dict({
        'covbases': dict({
          'description': 'Total number of mapped base pairs',
          'hidden': True,
          'namespace': 'Samtools: coverage',
          'scale': 'Blues',
          'shared_key': 'base_count',
          'title': 'Bases',
        }),
        'coverage': dict({
          'description': 'Percentage of region covered with reads',
          'hidden': True,
          'max': 100,
          'min': 0,
          'namespace': 'Samtools: coverage',
          'scale': 'YlGn',
          'suffix': '%',
          'title': 'Coverage',
        }),
        'meanbaseq': dict({
          'description': 'Mean base quality',
          'hidden': True,
          'min': 0,
          'namespace': 'Samtools: coverage',
          'scale': 'Blues',
          'title': 'Mean BQ',
        }),
        'meandepth': dict({
          'description': 'Mean depth of coverage',
          'hidden': False,
          'min': 0,
          'namespace': 'Samtools: coverage',
          'scale': 'RdYlGn',
          'suffix': 'x',
          'title': 'Mean depth',
        }),
        'meanmapq': dict({
          'description': 'Mean mapping quality',
          'hidden': True,
          'max': 60,
          'min': 0,
          'namespace': 'Samtools: coverage',
          'scale': 'RdYlGn',
          'title': 'Mean MQ',
        }),
        'numreads': dict({
          'description': 'Total number of mapped reads',
          'hidden': True,
          'namespace': 'Samtools: coverage',
          'scale': 'RdYlGn',
          'shared_key': 'read_count',
          'title': 'Reads',
        }),
      }),
      'samtools_6': dict({
        'duplicate_fraction': dict({
          'description': 'The percent of all types of duplicate reads',
          'hidden': False,
          'max': 100,
          'min': 0,
          'modify': 'parse_samtools_markdup.<locals>.<lambda>(x)',
          'namespace': 'Samtools: markdup',
          'scale': 'OrRd',
          'suffix': '%',
          'title': 'Duplicates',
        }),
        'estimated_library_size': dict({
          'description': 'The estimated library size after de-duplication.',
          'format': '{:,d}',
          'hidden': False,
          'min': 0,
          'namespace': 'Samtools: markdup',
          'title': 'Est. library size',
        }),
      }),
    }),
    'module_info': dict({
      'anchor': 'samtools',
      'doi': list([
        '10.1093/bioinformatics/btp352',
      ]),
      'href': list([
        'http://www.htslib.org',
      ]),
      'info': 'Toolkit for interacting with BAM/CRAM files',
      'name': 'Samtools',
    }),
    'saved_raw_data': dict({
      'multiqc_samtools_coverage': dict({
        'NA12878_sorted_chrM_chr20_rehead_60pdown': dict({
          'chr20': dict({
            'covbases': 8966919,
            'coverage': 13.9142,
            'endpos': 64444167,
            'meanbaseq': 255.0,
            'meandepth': 1.30202,
            'meanmapq': 59.2,
            'numreads': 606974,
            'size': 64444167,
            'startpos': 1,
          }),
          'chrM': dict({
            'covbases': 16569,
            'coverage': 100.0,
            'endpos': 16569,
            'meanbaseq': 255.0,
            'meandepth': 1177.57,
            'meanmapq': 56.5,
            'numreads': 143617,
            'size': 16569,
            'startpos': 1,
          }),
        }),
        'bc_anchored_10_reads': dict({
          'N3032_110_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 110,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 110,
            'startpos': 1,
          }),
          'N3032_123_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 123,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 123,
            'startpos': 1,
          }),
          'N3032_147_bp_A': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 147,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 147,
            'startpos': 1,
          }),
          'N3032_147_bp_B': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 147,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 147,
            'startpos': 1,
          }),
          'N3032_15_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 15,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 15,
            'startpos': 1,
          }),
          'N3032_160_bp_A': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 160,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 160,
            'startpos': 1,
          }),
          'N3032_160_bp_B': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 160,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 160,
            'startpos': 1,
          }),
          'N3032_180_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 180,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 180,
            'startpos': 1,
          }),
          'N3032_190_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 190,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 190,
            'startpos': 1,
          }),
          'N3032_201_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 201,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 201,
            'startpos': 1,
          }),
          'N3032_217_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 217,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 217,
            'startpos': 1,
          }),
          'N3032_238_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 238,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 238,
            'startpos': 1,
          }),
          'N3032_242_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 242,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 242,
            'startpos': 1,
          }),
          'N3032_26_bp_A': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 26,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 26,
            'startpos': 1,
          }),
          'N3032_26_bp_B': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 26,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 26,
            'startpos': 1,
          }),
          'N3032_307_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 307,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 307,
            'startpos': 1,
          }),
          'N3032_34_bp_A': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 34,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 34,
            'startpos': 1,
          }),
          'N3032_34_bp_B': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 34,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 34,
            'startpos': 1,
          }),
          'N3032_404_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 404,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 404,
            'startpos': 1,
          }),
          'N3032_527_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 527,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 527,
            'startpos': 1,
          }),
          'N3032_622_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 619,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 619,
            'startpos': 1,
          }),
          'N3032_67_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 67,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 67,
            'startpos': 1,
          }),
          'N3032_76_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 76,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 76,
            'startpos': 1,
          }),
          'N3032_90_bp': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 90,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 90,
            'startpos': 1,
          }),
          'N3032_9_bp_A': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 9,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 9,
            'startpos': 1,
          }),
          'N3032_9_bp_B': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 9,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 9,
            'startpos': 1,
          }),
          'lambda_3-6kb': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 3591,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 3591,
            'startpos': 1,
          }),
          'oligo_1471_adapters': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 156,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 156,
            'startpos': 1,
          }),
          'oligo_1512_adapters': dict({
            'covbases': 156,
            'coverage': 100.0,
            'endpos': 156,
            'meanbaseq': 18.4,
            'meandepth': 7.26282,
            'meanmapq': 29.6,
            'numreads': 10,
            'size': 156,
            'startpos': 1,
          }),
          'oligo_1932_adapters': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 156,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 156,
            'startpos': 1,
          }),
          'oligo_2725_adapters': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 156,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 156,
            'startpos': 1,
          }),
          'oligo_3213_adapters': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 156,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 156,
            'startpos': 1,
          }),
          'oligo_677_adapters': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 156,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 156,
            'startpos': 1,
          }),
          'oligo_741_adapters': dict({
            'covbases': 0,
            'coverage': 0.0,
            'endpos': 156,
            'meanbaseq': 0.0,
            'meandepth': 0.0,
            'meanmapq': 0.0,
            'numreads': 0,
            'size': 156,
            'startpos': 1,
          }),
        }),
        'test.paired_end': dict({
          'chr1': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr10': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr11': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr12': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr13': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr14': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr15': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr16': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr17': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr18': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr19': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr2': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr20': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr21': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr22': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr3': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr4': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr5': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr6': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr7': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr8': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chr9': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chrM': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chrX': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
          'chrY': dict({
            'covbases': 1181,
            'coverage': 2.95243,
            'endpos': 40001,
            'meanbaseq': 40.9,
            'meandepth': 16.7743,
            'meanmapq': 60.0,
            'numreads': 5640,
            'size': 40001,
            'startpos': 1,
          }),
        }),
      }),
      'multiqc_samtools_flagstat': dict({
        'low_quality_1': dict({
          'duplicates_failed': 0,
          'duplicates_passed': 0,
          'flagstat_total': 137147,
          'mapped_failed': 0,
          'mapped_failed_pct': nan,
          'mapped_passed': 137147,
          'mapped_passed_pct': 100.0,
          'paired in sequencing_failed': 0,
          'paired in sequencing_passed': 137147,
          'properly paired_failed': 0,
          'properly paired_failed_pct': nan,
          'properly paired_passed': 44296,
          'properly paired_passed_pct': 32.3,
          'read1_failed': 0,
          'read1_passed': 66552,
          'read2_failed': 0,
          'read2_passed': 70595,
          'singletons_failed': 0,
          'singletons_failed_pct': nan,
          'singletons_passed': 79413,
          'singletons_passed_pct': 57.9,
          'total_failed': 0,
          'total_passed': 137147,
          'with itself and mate mapped_failed': 0,
          'with itself and mate mapped_passed': 57734,
          'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
          'with mate mapped to a different chr (mapQ >= 5)_passed': 668,
          'with mate mapped to a different chr_failed': 0,
          'with mate mapped to a different chr_passed': 14598,
        }),
        'low_quality_2': dict({
          'duplicates_failed': 0,
          'duplicates_passed': 0,
          'flagstat_total': 120672,
          'mapped_failed': 0,
          'mapped_failed_pct': nan,
          'mapped_passed': 120672,
          'mapped_passed_pct': 100.0,
          'paired in sequencing_failed': 0,
          'paired in sequencing_passed': 120672,
          'properly paired_failed': 0,
          'properly paired_failed_pct': nan,
          'properly paired_passed': 38796,
          'properly paired_passed_pct': 32.15,
          'read1_failed': 0,
          'read1_passed': 59601,
          'read2_failed': 0,
          'read2_passed': 61071,
          'singletons_failed': 0,
          'singletons_failed_pct': nan,
          'singletons_passed': 73210,
          'singletons_passed_pct': 60.67,
          'total_failed': 0,
          'total_passed': 120672,
          'with itself and mate mapped_failed': 0,
          'with itself and mate mapped_passed': 47462,
          'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
          'with mate mapped to a different chr (mapQ >= 5)_passed': 508,
          'with mate mapped to a different chr_failed': 0,
          'with mate mapped to a different chr_passed': 10266,
        }),
        'samtools': dict({
          'duplicates_failed': 0,
          'duplicates_passed': 0,
          'flagstat_total': 11540659,
          'mapped_failed': 0,
          'mapped_failed_pct': nan,
          'mapped_passed': 11540643,
          'mapped_passed_pct': 100.0,
          'paired in sequencing_failed': 0,
          'paired in sequencing_passed': 11534294,
          'properly paired_failed': 0,
          'properly paired_failed_pct': nan,
          'properly paired_passed': 11518384,
          'properly paired_passed_pct': 99.86,
          'read1_failed': 0,
          'read1_passed': 5767147,
          'read2_failed': 0,
          'read2_passed': 5767147,
          'secondary_failed': 0,
          'secondary_passed': 6365,
          'singletons_failed': 0,
          'singletons_failed_pct': nan,
          'singletons_passed': 12,
          'singletons_passed_pct': 0.0,
          'supplementary_failed': 0,
          'supplementary_passed': 0,
          'total_failed': 0,
          'total_passed': 11540659,
          'with itself and mate mapped_failed': 0,
          'with itself and mate mapped_passed': 11534266,
          'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
          'with mate mapped to a different chr (mapQ >= 5)_passed': 344,
          'with mate mapped to a different chr_failed': 0,
          'with mate mapped to a different chr_passed': 628,
        }),
        'small': dict({
          'duplicates_failed': 0,
          'duplicates_passed': 0,
          'flagstat_total': 5414,
          'mapped_failed': 0,
          'mapped_failed_pct': nan,
          'mapped_passed': 5350,
          'mapped_passed_pct': 98.82,
          'paired in sequencing_failed': 0,
          'paired in sequencing_passed': 5401,
          'properly paired_failed': 0,
          'properly paired_failed_pct': nan,
          'properly paired_passed': 5011,
          'properly paired_passed_pct': 92.78,
          'read1_failed': 0,
          'read1_passed': 2709,
          'read2_failed': 0,
          'read2_passed': 2692,
          'secondary_failed': 0,
          'secondary_passed': 13,
          'singletons_failed': 0,
          'singletons_failed_pct': nan,
          'singletons_passed': 64,
          'singletons_passed_pct': 1.18,
          'supplementary_failed': 0,
          'supplementary_passed': 0,
          'total_failed': 0,
          'total_passed': 5414,
          'with itself and mate mapped_failed': 0,
          'with itself and mate mapped_passed': 5273,
          'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
          'with mate mapped to a different chr (mapQ >= 5)_passed': 81,
          'with mate mapped to a different chr_failed': 0,
          'with mate mapped to a different chr_passed': 206,
        }),
      }),
      'multiqc_samtools_idxstats': dict({
        'samtools': dict({
          '*': list([
            0,
            0,
          ]),
          '1': list([
            860208,
            249250621,
          ]),
          '10': list([
            411317,
            135534747,
          ]),
          '11': list([
            397326,
            135006516,
          ]),
          '12': list([
            451235,
            133851895,
          ]),
          '13': list([
            241506,
            115169878,
          ]),
          '14': list([
            196401,
            107349540,
          ]),
          '15': list([
            305768,
            102531392,
          ]),
          '16': list([
            414172,
            90354753,
          ]),
          '17': list([
            728986,
            81195210,
          ]),
          '18': list([
            212281,
            78077248,
          ]),
          '19': list([
            406564,
            59128983,
          ]),
          '2': list([
            1106007,
            243199373,
          ]),
          '20': list([
            167774,
            63025520,
          ]),
          '21': list([
            91318,
            48129895,
          ]),
          '22': list([
            118749,
            51304566,
          ]),
          '3': list([
            545145,
            198022430,
          ]),
          '4': list([
            359862,
            191154276,
          ]),
          '5': list([
            604803,
            180915260,
          ]),
          '6': list([
            531674,
            171115067,
          ]),
          '7': list([
            667701,
            159138663,
          ]),
          '8': list([
            398788,
            146364022,
          ]),
          '9': list([
            371684,
            141213431,
          ]),
          'GL000191.1': list([
            0,
            106433,
          ]),
          'GL000192.1': list([
            0,
            547496,
          ]),
          'GL000193.1': list([
            0,
            189789,
          ]),
          'GL000194.1': list([
            0,
            191469,
          ]),
          'GL000195.1': list([
            0,
            182896,
          ]),
          'GL000196.1': list([
            1,
            38914,
          ]),
          'GL000197.1': list([
            0,
            37175,
          ]),
          'GL000198.1': list([
            0,
            90085,
          ]),
          'GL000199.1': list([
            0,
            169874,
          ]),
          'GL000200.1': list([
            0,
            187035,
          ]),
          'GL000201.1': list([
            0,
            36148,
          ]),
          'GL000202.1': list([
            0,
            40103,
          ]),
          'GL000203.1': list([
            0,
            37498,
          ]),
          'GL000204.1': list([
            0,
            81310,
          ]),
          'GL000205.1': list([
            2,
            174588,
          ]),
          'GL000206.1': list([
            0,
            41001,
          ]),
          'GL000207.1': list([
            0,
            4262,
          ]),
          'GL000208.1': list([
            0,
            92689,
          ]),
          'GL000209.1': list([
            0,
            159169,
          ]),
          'GL000210.1': list([
            0,
            27682,
          ]),
          'GL000211.1': list([
            4,
            166566,
          ]),
          'GL000212.1': list([
            40,
            186858,
          ]),
          'GL000213.1': list([
            0,
            164239,
          ]),
          'GL000214.1': list([
            0,
            137718,
          ]),
          'GL000215.1': list([
            0,
            172545,
          ]),
          'GL000216.1': list([
            0,
            172294,
          ]),
          'GL000217.1': list([
            0,
            172149,
          ]),
          'GL000218.1': list([
            0,
            161147,
          ]),
          'GL000219.1': list([
            2,
            179198,
          ]),
          'GL000220.1': list([
            2,
            161802,
          ]),
          'GL000221.1': list([
            0,
            155397,
          ]),
          'GL000222.1': list([
            0,
            186861,
          ]),
          'GL000223.1': list([
            0,
            180455,
          ]),
          'GL000224.1': list([
            0,
            179693,
          ]),
          'GL000225.1': list([
            0,
            211173,
          ]),
          'GL000226.1': list([
            0,
            15008,
          ]),
          'GL000227.1': list([
            0,
            128374,
          ]),
          'GL000228.1': list([
            0,
            129120,
          ]),
          'GL000229.1': list([
            0,
            19913,
          ]),
          'GL000230.1': list([
            0,
            43691,
          ]),
          'GL000231.1': list([
            0,
            27386,
          ]),
          'GL000232.1': list([
            0,
            40652,
          ]),
          'GL000233.1': list([
            0,
            45941,
          ]),
          'GL000234.1': list([
            0,
            40531,
          ]),
          'GL000235.1': list([
            0,
            34474,
          ]),
          'GL000236.1': list([
            2,
            41934,
          ]),
          'GL000237.1': list([
            0,
            45867,
          ]),
          'GL000238.1': list([
            0,
            39939,
          ]),
          'GL000239.1': list([
            0,
            33824,
          ]),
          'GL000240.1': list([
            0,
            41933,
          ]),
          'GL000241.1': list([
            3,
            42152,
          ]),
          'GL000242.1': list([
            1,
            43523,
          ]),
          'GL000243.1': list([
            0,
            43341,
          ]),
          'GL000244.1': list([
            0,
            39929,
          ]),
          'GL000245.1': list([
            0,
            36651,
          ]),
          'GL000246.1': list([
            0,
            38154,
          ]),
          'GL000247.1': list([
            0,
            36422,
          ]),
          'GL000248.1': list([
            0,
            39786,
          ]),
          'GL000249.1': list([
            0,
            38502,
          ]),
          'MT': list([
            1760887,
            16569,
          ]),
          'NC_007605': list([
            9,
            171823,
          ]),
          'X': list([
            189549,
            155270560,
          ]),
          'Y': list([
            55,
            59373566,
          ]),
          'hs37d5': list([
            817,
            35477943,
          ]),
        }),
        'samtoolsidxstats': dict({
          '*': list([
            0,
            0,
          ]),
          '1': list([
            0,
            249250621,
          ]),
          '10': list([
            0,
            135534747,
          ]),
          '11': list([
            0,
            135006516,
          ]),
          '12': list([
            0,
            133851895,
          ]),
          '13': list([
            0,
            115169878,
          ]),
          '14': list([
            0,
            107349540,
          ]),
          '15': list([
            0,
            102531392,
          ]),
          '16': list([
            0,
            90354753,
          ]),
          '17': list([
            0,
            81195210,
          ]),
          '18': list([
            0,
            78077248,
          ]),
          '19': list([
            0,
            59128983,
          ]),
          '2': list([
            0,
            243199373,
          ]),
          '20': list([
            0,
            63025520,
          ]),
          '21': list([
            0,
            48129895,
          ]),
          '22': list([
            0,
            51304566,
          ]),
          '3': list([
            0,
            198022430,
          ]),
          '4': list([
            0,
            191154276,
          ]),
          '5': list([
            0,
            180915260,
          ]),
          '6': list([
            0,
            171115067,
          ]),
          '7': list([
            0,
            159138663,
          ]),
          '8': list([
            0,
            146364022,
          ]),
          '9': list([
            0,
            141213431,
          ]),
          'GL000191.1': list([
            0,
            106433,
          ]),
          'GL000192.1': list([
            0,
            547496,
          ]),
          'GL000193.1': list([
            0,
            189789,
          ]),
          'GL000194.1': list([
            0,
            191469,
          ]),
          'GL000195.1': list([
            0,
            182896,
          ]),
          'GL000196.1': list([
            0,
            38914,
          ]),
          'GL000197.1': list([
            0,
            37175,
          ]),
          'GL000198.1': list([
            0,
            90085,
          ]),
          'GL000199.1': list([
            0,
            169874,
          ]),
          'GL000200.1': list([
            0,
            187035,
          ]),
          'GL000201.1': list([
            0,
            36148,
          ]),
          'GL000202.1': list([
            0,
            40103,
          ]),
          'GL000203.1': list([
            0,
            37498,
          ]),
          'GL000204.1': list([
            0,
            81310,
          ]),
          'GL000205.1': list([
            0,
            174588,
          ]),
          'GL000206.1': list([
            0,
            41001,
          ]),
          'GL000207.1': list([
            0,
            4262,
          ]),
          'GL000208.1': list([
            0,
            92689,
          ]),
          'GL000209.1': list([
            0,
            159169,
          ]),
          'GL000210.1': list([
            0,
            27682,
          ]),
          'GL000211.1': list([
            0,
            166566,
          ]),
          'GL000212.1': list([
            0,
            186858,
          ]),
          'GL000213.1': list([
            0,
            164239,
          ]),
          'GL000214.1': list([
            0,
            137718,
          ]),
          'GL000215.1': list([
            0,
            172545,
          ]),
          'GL000216.1': list([
            0,
            172294,
          ]),
          'GL000217.1': list([
            0,
            172149,
          ]),
          'GL000218.1': list([
            0,
            161147,
          ]),
          'GL000219.1': list([
            0,
            179198,
          ]),
          'GL000220.1': list([
            0,
            161802,
          ]),
          'GL000221.1': list([
            0,
            155397,
          ]),
          'GL000222.1': list([
            0,
            186861,
          ]),
          'GL000223.1': list([
            0,
            180455,
          ]),
          'GL000224.1': list([
            0,
            179693,
          ]),
          'GL000225.1': list([
            0,
            211173,
          ]),
          'GL000226.1': list([
            0,
            15008,
          ]),
          'GL000227.1': list([
            0,
            128374,
          ]),
          'GL000228.1': list([
            0,
            129120,
          ]),
          'GL000229.1': list([
            0,
            19913,
          ]),
          'GL000230.1': list([
            0,
            43691,
          ]),
          'GL000231.1': list([
            0,
            27386,
          ]),
          'GL000232.1': list([
            0,
            40652,
          ]),
          'GL000233.1': list([
            0,
            45941,
          ]),
          'GL000234.1': list([
            0,
            40531,
          ]),
          'GL000235.1': list([
            0,
            34474,
          ]),
          'GL000236.1': list([
            0,
            41934,
          ]),
          'GL000237.1': list([
            0,
            45867,
          ]),
          'GL000238.1': list([
            0,
            39939,
          ]),
          'GL000239.1': list([
            0,
            33824,
          ]),
          'GL000240.1': list([
            0,
            41933,
          ]),
          'GL000241.1': list([
            0,
            42152,
          ]),
          'GL000242.1': list([
            0,
            43523,
          ]),
          'GL000243.1': list([
            0,
            43341,
          ]),
          'GL000244.1': list([
            0,
            39929,
          ]),
          'GL000245.1': list([
            0,
            36651,
          ]),
          'GL000246.1': list([
            0,
            38154,
          ]),
          'GL000247.1': list([
            0,
            36422,
          ]),
          'GL000248.1': list([
            0,
            39786,
          ]),
          'GL000249.1': list([
            0,
            38502,
          ]),
          'MT': list([
            0,
            16569,
          ]),
          'NC_007605': list([
            0,
            171823,
          ]),
          'X': list([
            0,
            155270560,
          ]),
          'Y': list([
            0,
            59373566,
          ]),
          'hs37d5': list([
            0,
            35477943,
          ]),
        }),
        'samtoolsidxstats2': dict({
          '*': list([
            0,
            0,
          ]),
          '1': list([
            10,
            249250621,
          ]),
          '10': list([
            10,
            135534747,
          ]),
          '11': list([
            10,
            135006516,
          ]),
          '12': list([
            10,
            133851895,
          ]),
          '13': list([
            10,
            115169878,
          ]),
          '14': list([
            10,
            107349540,
          ]),
          '15': list([
            10,
            102531392,
          ]),
          '16': list([
            10,
            90354753,
          ]),
          '17': list([
            10,
            81195210,
          ]),
          '18': list([
            10,
            78077248,
          ]),
          '19': list([
            10,
            59128983,
          ]),
          '2': list([
            10,
            243199373,
          ]),
          '20': list([
            10,
            63025520,
          ]),
          '21': list([
            10,
            48129895,
          ]),
          '22': list([
            10,
            51304566,
          ]),
          '3': list([
            10,
            198022430,
          ]),
          '4': list([
            10,
            191154276,
          ]),
          '5': list([
            10,
            180915260,
          ]),
          '6': list([
            10,
            171115067,
          ]),
          '7': list([
            10,
            159138663,
          ]),
          '8': list([
            10,
            146364022,
          ]),
          '9': list([
            10,
            141213431,
          ]),
          'GL000191.1': list([
            10,
            106433,
          ]),
          'GL000192.1': list([
            0,
            547496,
          ]),
          'GL000193.1': list([
            0,
            189789,
          ]),
          'GL000194.1': list([
            0,
            191469,
          ]),
          'GL000195.1': list([
            0,
            182896,
          ]),
          'GL000196.1': list([
            10,
            38914,
          ]),
          'GL000197.1': list([
            10,
            37175,
          ]),
          'GL000198.1': list([
            10,
            90085,
          ]),
          'GL000199.1': list([
            0,
            169874,
          ]),
          'GL000200.1': list([
            0,
            187035,
          ]),
          'GL000201.1': list([
            10,
            36148,
          ]),
          'GL000202.1': list([
            10,
            40103,
          ]),
          'GL000203.1': list([
            10,
            37498,
          ]),
          'GL000204.1': list([
            10,
            81310,
          ]),
          'GL000205.1': list([
            0,
            174588,
          ]),
          'GL000206.1': list([
            10,
            41001,
          ]),
          'GL000207.1': list([
            10,
            4262,
          ]),
          'GL000208.1': list([
            10,
            92689,
          ]),
          'GL000209.1': list([
            0,
            159169,
          ]),
          'GL000210.1': list([
            10,
            27682,
          ]),
          'GL000211.1': list([
            0,
            166566,
          ]),
          'GL000212.1': list([
            0,
            186858,
          ]),
          'GL000213.1': list([
            0,
            164239,
          ]),
          'GL000214.1': list([
            0,
            137718,
          ]),
          'GL000215.1': list([
            0,
            172545,
          ]),
          'GL000216.1': list([
            0,
            172294,
          ]),
          'GL000217.1': list([
            0,
            172149,
          ]),
          'GL000218.1': list([
            0,
            161147,
          ]),
          'GL000219.1': list([
            0,
            179198,
          ]),
          'GL000220.1': list([
            0,
            161802,
          ]),
          'GL000221.1': list([
            0,
            155397,
          ]),
          'GL000222.1': list([
            0,
            186861,
          ]),
          'GL000223.1': list([
            0,
            180455,
          ]),
          'GL000224.1': list([
            0,
            179693,
          ]),
          'GL000225.1': list([
            0,
            211173,
          ]),
          'GL000226.1': list([
            10,
            15008,
          ]),
          'GL000227.1': list([
            0,
            128374,
          ]),
          'GL000228.1': list([
            0,
            129120,
          ]),
          'GL000229.1': list([
            10,
            19913,
          ]),
          'GL000230.1': list([
            10,
            43691,
          ]),
          'GL000231.1': list([
            10,
            27386,
          ]),
          'GL000232.1': list([
            10,
            40652,
          ]),
          'GL000233.1': list([
            10,
            45941,
          ]),
          'GL000234.1': list([
            10,
            40531,
          ]),
          'GL000235.1': list([
            10,
            34474,
          ]),
          'GL000236.1': list([
            10,
            41934,
          ]),
          'GL000237.1': list([
            10,
            45867,
          ]),
          'GL000238.1': list([
            10,
            39939,
          ]),
          'GL000239.1': list([
            10,
            33824,
          ]),
          'GL000240.1': list([
            10,
            41933,
          ]),
          'GL000241.1': list([
            10,
            42152,
          ]),
          'GL000242.1': list([
            10,
            43523,
          ]),
          'GL000243.1': list([
            10,
            43341,
          ]),
          'GL000244.1': list([
            10,
            39929,
          ]),
          'GL000245.1': list([
            10,
            36651,
          ]),
          'GL000246.1': list([
            10,
            38154,
          ]),
          'GL000247.1': list([
            10,
            36422,
          ]),
          'GL000248.1': list([
            10,
            39786,
          ]),
          'GL000249.1': list([
            10,
            38502,
          ]),
          'MT': list([
            10,
            16569,
          ]),
          'NC_007605': list([
            0,
            171823,
          ]),
          'X': list([
            10,
            155270560,
          ]),
          'Y': list([
            10,
            59373566,
          ]),
          'hs37d5': list([
            0,
            35477943,
          ]),
        }),
      }),
      'multiqc_samtools_markdup': dict({
        'issue_3134': dict({
          'duplicate_fraction': 0.270089,
          'duplicate_non_primary': 0,
          'duplicate_non_primary_non_optical': 0,
          'duplicate_non_primary_optical': 0,
          'duplicate_optical_fraction': 0.146131,
          'duplicate_optical_total': 34058898,
          'duplicate_pair': 62895132,
          'duplicate_pair_non_optical': 28858020,
          'duplicate_pair_optical': 34037112,
          'duplicate_primary_total': 62949938,
          'duplicate_single': 54806,
          'duplicate_single_non_optical': 33020,
          'duplicate_single_optical': 21786,
          'duplicate_total': 62949938,
          'estimated_library_size': 308712639,
          'examined': 233070661,
          'excluded': 0,
          'non_duplicate': 170120723,
          'optical_duplicate_distance': 2500,
          'paired': 232940212,
          'read': 233070661,
          'single': 130449,
          'written': 170120723,
        }),
        'test2': dict({
          'duplicate_fraction': 0.782319,
          'duplicate_non_primary': 0,
          'duplicate_non_primary_non_optical': 0,
          'duplicate_non_primary_optical': 0,
          'duplicate_optical_fraction': 0.759059,
          'duplicate_optical_total': 1026746,
          'duplicate_pair': 1058157,
          'duplicate_pair_non_optical': 31447,
          'duplicate_pair_optical': 1026710,
          'duplicate_primary_total': 1058209,
          'duplicate_single': 52,
          'duplicate_single_non_optical': 16,
          'duplicate_single_optical': 36,
          'duplicate_total': 1058209,
          'estimated_library_size': 788988,
          'examined': 1352656,
          'excluded': 752,
          'non_duplicate': 294447,
          'optical_duplicate_distance': 2500,
          'paired': 1352588,
          'read': 1353408,
          'single': 68,
          'written': 1353408,
        }),
      }),
      'multiqc_samtools_rmdup': dict({
        'Sample 2': dict({
          'n_dups': 7482847,
          'n_tot': 83824753,
          'n_unique': 76341906,
          'pct_dups': 8.92,
        }),
        'sample_1': dict({
          'n_dups': 26602816,
          'n_tot': 103563641,
          'n_unique': 76960825,
          'pct_dups': 25.69,
        }),
      }),
      'multiqc_samtools_stats': dict({
        'SRR1067503_1': dict({
          '1st_fragments': 29071646.0,
          'average_length': 36.0,
          'average_quality': 31.4,
          'bases_duplicated': 0.0,
          'bases_mapped': 583242876.0,
          'bases_mapped_(cigar)': 583242876.0,
          'bases_trimmed': 0.0,
          'error_rate': 0.002837,
          'filtered_sequences': 0.0,
          'insert_size_average': 0.0,
          'insert_size_standard_deviation': 0.0,
          'inward_oriented_pairs': 0.0,
          'is_sorted': 1.0,
          'last_fragments': 0.0,
          'maximum_length': 36.0,
          'mismatches': 1654848.0,
          'non-primary_alignments': 0.0,
          'outward_oriented_pairs': 0.0,
          'pairs_on_different_chromosomes': 0.0,
          'pairs_with_other_orientation': 0.0,
          'raw_total_sequences': 29071646.0,
          'reads_MQ0': 0.0,
          'reads_MQ0_percent': 0.0,
          'reads_QC_failed': 0.0,
          'reads_QC_failed_percent': 0.0,
          'reads_duplicated': 0.0,
          'reads_duplicated_percent': 0.0,
          'reads_mapped': 16201191.0,
          'reads_mapped_MQ1': 16201191.0,
          'reads_mapped_and_paired': 0.0,
          'reads_mapped_and_paired_percent': 0.0,
          'reads_mapped_percent': 55.728496,
          'reads_paired': 0.0,
          'reads_paired_percent': 0.0,
          'reads_properly_paired': 0.0,
          'reads_properly_paired_percent': 0.0,
          'reads_unmapped': 12870455.0,
          'reads_unmapped_percent': 44.271504,
          'sequences': 29071646.0,
          'total_length': 1046579256.0,
        }),
        'SRR1067505_1': dict({
          '1st_fragments': 16635040.0,
          'average_length': 36.0,
          'average_quality': 31.9,
          'bases_duplicated': 0.0,
          'bases_mapped': 442765188.0,
          'bases_mapped_(cigar)': 442765188.0,
          'bases_trimmed': 0.0,
          'error_rate': 0.004029,
          'filtered_sequences': 0.0,
          'insert_size_average': 0.0,
          'insert_size_standard_deviation': 0.0,
          'inward_oriented_pairs': 0.0,
          'is_sorted': 1.0,
          'last_fragments': 0.0,
          'maximum_length': 36.0,
          'mismatches': 1783808.0,
          'non-primary_alignments': 0.0,
          'outward_oriented_pairs': 0.0,
          'pairs_on_different_chromosomes': 0.0,
          'pairs_with_other_orientation': 0.0,
          'raw_total_sequences': 16635040.0,
          'reads_MQ0': 0.0,
          'reads_MQ0_percent': 0.0,
          'reads_QC_failed': 0.0,
          'reads_QC_failed_percent': 0.0,
          'reads_duplicated': 0.0,
          'reads_duplicated_percent': 0.0,
          'reads_mapped': 12299033.0,
          'reads_mapped_MQ1': 12299033.0,
          'reads_mapped_and_paired': 0.0,
          'reads_mapped_and_paired_percent': 0.0,
          'reads_mapped_percent': 73.934496,
          'reads_paired': 0.0,
          'reads_paired_percent': 0.0,
          'reads_properly_paired': 0.0,
          'reads_properly_paired_percent': 0.0,
          'reads_unmapped': 4336007.0,
          'reads_unmapped_percent': 26.065504,
          'sequences': 16635040.0,
          'total_length': 598861440.0,
        }),
        'SRR1067519_1': dict({
          '1st_fragments': 23805829.0,
          'average_length': 36.0,
          'average_quality': 27.8,
          'bases_duplicated': 0.0,
          'bases_mapped': 662153544.0,
          'bases_mapped_(cigar)': 662153544.0,
          'bases_trimmed': 0.0,
          'error_rate': 0.005229,
          'filtered_sequences': 0.0,
          'insert_size_average': 0.0,
          'insert_size_standard_deviation': 0.0,
          'inward_oriented_pairs': 0.0,
          'is_sorted': 1.0,
          'last_fragments': 0.0,
          'maximum_length': 36.0,
          'mismatches': 3462334.0,
          'non-primary_alignments': 0.0,
          'outward_oriented_pairs': 0.0,
          'pairs_on_different_chromosomes': 0.0,
          'pairs_with_other_orientation': 0.0,
          'raw_total_sequences': 23805829.0,
          'reads_MQ0': 0.0,
          'reads_MQ0_percent': 0.0,
          'reads_QC_failed': 0.0,
          'reads_QC_failed_percent': 0.0,
          'reads_duplicated': 0.0,
          'reads_duplicated_percent': 0.0,
          'reads_mapped': 18393154.0,
          'reads_mapped_MQ1': 18393154.0,
          'reads_mapped_and_paired': 0.0,
          'reads_mapped_and_paired_percent': 0.0,
          'reads_mapped_percent': 77.263237,
          'reads_paired': 0.0,
          'reads_paired_percent': 0.0,
          'reads_properly_paired': 0.0,
          'reads_properly_paired_percent': 0.0,
          'reads_unmapped': 5412675.0,
          'reads_unmapped_percent': 22.736763,
          'sequences': 23805829.0,
          'total_length': 857009844.0,
        }),
        'Test1': dict({
          '1st_fragments': 101.0,
          'average_length': 34.0,
          'average_quality': 38.5,
          'bases_duplicated': 0.0,
          'bases_mapped': 2829.0,
          'bases_mapped_(cigar)': 2829.0,
          'bases_trimmed': 0.0,
          'error_rate': 0.014493,
          'filtered_sequences': 0.0,
          'insert_size_average': 0.0,
          'insert_size_standard_deviation': 0.0,
          'inward_oriented_pairs': 0.0,
          'is_sorted': 1.0,
          'last_fragments': 0.0,
          'maximum_length': 35.0,
          'mismatches': 41.0,
          'non-primary_alignments': 0.0,
          'outward_oriented_pairs': 0.0,
          'pairs_on_different_chromosomes': 0.0,
          'pairs_with_other_orientation': 0.0,
          'raw_total_sequences': 101.0,
          'reads_MQ0': 0.0,
          'reads_MQ0_percent': 0.0,
          'reads_QC_failed': 0.0,
          'reads_QC_failed_percent': 0.0,
          'reads_duplicated': 0.0,
          'reads_duplicated_percent': 0.0,
          'reads_mapped': 81.0,
          'reads_mapped_MQ1': 81.0,
          'reads_mapped_and_paired': 0.0,
          'reads_mapped_and_paired_percent': 0.0,
          'reads_mapped_percent': 80.19802,
          'reads_paired': 0.0,
          'reads_paired_percent': 0.0,
          'reads_properly_paired': 0.0,
          'reads_properly_paired_percent': 0.0,
          'reads_unmapped': 20.0,
          'reads_unmapped_percent': 19.80198,
          'sequences': 101.0,
          'total_length': 3529.0,
        }),
        'filtered_reads': dict({
          '1st_fragments': 517.0,
          'average_first_fragment_length': 70.0,
          'average_last_fragment_length': 70.0,
          'average_length': 70.0,
          'average_quality': 17.0,
          'bases_duplicated': 0.0,
          'bases_mapped': 69930.0,
          'bases_mapped_(cigar)': 69881.0,
          'bases_trimmed': 0.0,
          'error_rate': 0.020678,
          'filtered_sequences': 999.0,
          'insert_size_average': 502.2,
          'insert_size_standard_deviation': 41.4,
          'inward_oriented_pairs': 433.0,
          'is_sorted': 1.0,
          'last_fragments': 482.0,
          'maximum_first_fragment_length': 70.0,
          'maximum_last_fragment_length': 70.0,
          'maximum_length': 70.0,
          'mismatches': 1445.0,
          'non-primary_alignments': 0.0,
          'outward_oriented_pairs': 0.0,
          'pairs_on_different_chromosomes': 0.0,
          'pairs_with_other_orientation': 0.0,
          'percentage_of_properly_paired_reads_(%)': 100.0,
          'raw_total_sequences': 1998.0,
          'reads_MQ0': 0.0,
          'reads_MQ0_percent': 0.0,
          'reads_QC_failed': 0.0,
          'reads_QC_failed_percent': 0.0,
          'reads_duplicated': 0.0,
          'reads_duplicated_percent': 0.0,
          'reads_mapped': 999.0,
          'reads_mapped_MQ1': 999.0,
          'reads_mapped_and_paired': 999.0,
          'reads_mapped_and_paired_percent': 50.0,
          'reads_mapped_percent': 50.0,
          'reads_paired': 999.0,
          'reads_paired_percent': 50.0,
          'reads_properly_paired': 999.0,
          'reads_properly_paired_percent': 50.0,
          'reads_unmapped': 0.0,
          'reads_unmapped_percent': 0.0,
          'sequences': 999.0,
          'supplementary_alignments': 0.0,
          'total_first_fragment_length': 36190.0,
          'total_last_fragment_length': 33740.0,
          'total_length': 69930.0,
        }),
      }),
    }),
    'sections': list([
      dict({
        'anchor': 'samtools-stats-alignment',
        'comment': '',
        'description': '<p>Alignment metrics from <code>samtools stats</code>; mapped vs. unmapped reads vs. reads mapped with MQ0.</p>',
        'helptext': '''
          <p>For a set of samples that have come from the same multiplexed library,
          similar numbers of reads for each sample are expected. Large differences in numbers might
          indicate issues during the library preparation process. Whilst large differences in read
          numbers may be controlled for in downstream processings (e.g. read count normalisation),
          you may wish to consider whether the read depths achieved have fallen below recommended
          levels depending on the applications.</p>
          <p>Low alignment rates could indicate contamination of samples (e.g. adapter sequences),
          low sequencing quality or other artefacts. These can be further investigated in the
          sequence level QC (e.g. from FastQC).</p>
          <p>Reads mapped with MQ0 often indicate that the reads are ambiguously mapped to multiple
          locations in the reference sequence. This can be due to repetitive regions in the genome,
          the presence of alternative contigs in the reference, or due to reads that are too short
          to be uniquely mapped. These reads are often filtered out in downstream analyses.</p>
        ''',
        'name': 'Percent mapped',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'samtools-stats',
        'comment': '',
        'description': '<p>This module parses the output from <code>samtools stats</code>. All numbers in millions.</p>',
        'helptext': '',
        'name': 'Alignment stats',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'samtools-flagstat',
        'comment': '',
        'description': '<p>This module parses the output from <code>samtools flagstat</code></p>',
        'helptext': '',
        'name': 'Flagstat',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'samtools-flagstat-pct',
        'comment': '',
        'description': '<p>This module parses the output from <code>samtools flagstat</code></p>',
        'helptext': '',
        'name': 'Flagstat: Percentage of total',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'samtools-idxstats-xy-counts',
        'comment': '',
        'description': '',
        'helptext': '',
        'name': 'XY counts',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'samtools-idxstats',
        'comment': '',
        'description': '<p>The <code>samtools idxstats</code> tool counts the number of mapped reads per chromosome / contig. Chromosomes with &lt; 0.1% of the total aligned reads are omitted from this plot.</p>',
        'helptext': '',
        'name': 'Mapped reads per contig',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'samtools-rmdup',
        'comment': '',
        'description': '',
        'helptext': '',
        'name': 'Duplicates removed',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'samtools-coverage-table-section',
        'comment': '',
        'description': '<p>Stats parsed from <code>samtools coverage</code> output, and summarized (added up or weighted-averaged) across all regions.</p>',
        'helptext': '',
        'name': 'Coverage: global stats',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'samtools-coverage-section',
        'comment': '',
        'description': '<p>Per-region stats parsed from <code>samtools coverage</code> output.</p>',
        'helptext': '',
        'name': 'Coverage: stats per region',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'samtools-markdup',
        'comment': '',
        'description': '<p>Optical duplicates are due to either optical or clustering-based artifacts. See the following links to learn more about instrument-based duplicate artifacts:<br><ul><li><a href="https://core-genomics.blogspot.com/2016/05/increased-read-duplication-on-patterned.html" target="_blank">Core Genomics Post: Increased Read Duplication on Patterned Flowcells</a></li><li><a href="https://sequencing.qcfail.com/articles/illumina-patterned-flow-cells-generate-duplicated-sequences/" target="_blank">QC Fail Post: Illumina Patterned Flow Cells Generate Duplicated Sequences</a></li></ul>.</p>',
        'helptext': '',
        'name': 'Markdup: stats',
        'plot_id': None,
        'plot_type': None,
      }),
      dict({
        'anchor': 'samtools-markdup-categories',
        'comment': '',
        'description': '<p>For more information about the duplicate categories, see the <a href="https://www.htslib.org/doc/samtools-markdup.html#STATISTICS" target="_blank">samtools documentation</a>. </p>',
        'helptext': '',
        'name': 'Markdup: duplicate categories',
        'plot_id': None,
        'plot_type': None,
      }),
    ]),
    'software_versions': dict({
      'Samtools': list([
        tuple(
          <Version('1.3')>,
          '1.3',
        ),
        tuple(
          <Version('1.18')>,
          '1.18',
        ),
      ]),
    }),
  })
# ---
# name: TestSamtoolsFlagstatSnapshot.test_module_general_stats_snapshot
  dict({
    'data': dict({
      'samtools': dict({
        'SRR1067503_1': list([
          InputRow(sample='SRR1067503_1', data={'raw_total_sequences': 29071646.0, 'filtered_sequences': 0.0, 'sequences': 29071646.0, 'is_sorted': 1.0, '1st_fragments': 29071646.0, 'last_fragments': 0.0, 'reads_mapped': 16201191.0, 'reads_mapped_and_paired': 0.0, 'reads_unmapped': 12870455.0, 'reads_properly_paired': 0.0, 'reads_paired': 0.0, 'reads_duplicated': 0.0, 'reads_MQ0': 0.0, 'reads_QC_failed': 0.0, 'non-primary_alignments': 0.0, 'total_length': 1046579256.0, 'bases_mapped': 583242876.0, 'bases_mapped_(cigar)': 583242876.0, 'bases_trimmed': 0.0, 'bases_duplicated': 0.0, 'mismatches': 1654848.0, 'error_rate': 0.002837322, 'average_length': 36.0, 'maximum_length': 36.0, 'average_quality': 31.4, 'insert_size_average': 0.0, 'insert_size_standard_deviation': 0.0, 'inward_oriented_pairs': 0.0, 'outward_oriented_pairs': 0.0, 'pairs_with_other_orientation': 0.0, 'pairs_on_different_chromosomes': 0.0, 'reads_mapped_percent': 55.72849573085749, 'reads_mapped_and_paired_percent': 0.0, 'reads_unmapped_percent': 44.27150426914252, 'reads_properly_paired_percent': 0.0, 'reads_paired_percent': 0.0, 'reads_duplicated_percent': 0.0, 'reads_MQ0_percent': 0.0, 'reads_QC_failed_percent': 0.0}),
        ]),
        'SRR1067505_1': list([
          InputRow(sample='SRR1067505_1', data={'raw_total_sequences': 16635040.0, 'filtered_sequences': 0.0, 'sequences': 16635040.0, 'is_sorted': 1.0, '1st_fragments': 16635040.0, 'last_fragments': 0.0, 'reads_mapped': 12299033.0, 'reads_mapped_and_paired': 0.0, 'reads_unmapped': 4336007.0, 'reads_properly_paired': 0.0, 'reads_paired': 0.0, 'reads_duplicated': 0.0, 'reads_MQ0': 0.0, 'reads_QC_failed': 0.0, 'non-primary_alignments': 0.0, 'total_length': 598861440.0, 'bases_mapped': 442765188.0, 'bases_mapped_(cigar)': 442765188.0, 'bases_trimmed': 0.0, 'bases_duplicated': 0.0, 'mismatches': 1783808.0, 'error_rate': 0.00402879, 'average_length': 36.0, 'maximum_length': 36.0, 'average_quality': 31.9, 'insert_size_average': 0.0, 'insert_size_standard_deviation': 0.0, 'inward_oriented_pairs': 0.0, 'outward_oriented_pairs': 0.0, 'pairs_with_other_orientation': 0.0, 'pairs_on_different_chromosomes': 0.0, 'reads_mapped_percent': 73.93449609979898, 'reads_mapped_and_paired_percent': 0.0, 'reads_unmapped_percent': 26.06550390020102, 'reads_properly_paired_percent': 0.0, 'reads_paired_percent': 0.0, 'reads_duplicated_percent': 0.0, 'reads_MQ0_percent': 0.0, 'reads_QC_failed_percent': 0.0}),
        ]),
        'SRR1067519_1': list([
          InputRow(sample='SRR1067519_1', data={'raw_total_sequences': 23805829.0, 'filtered_sequences': 0.0, 'sequences': 23805829.0, 'is_sorted': 1.0, '1st_fragments': 23805829.0, 'last_fragments': 0.0, 'reads_mapped': 18393154.0, 'reads_mapped_and_paired': 0.0, 'reads_unmapped': 5412675.0, 'reads_properly_paired': 0.0, 'reads_paired': 0.0, 'reads_duplicated': 0.0, 'reads_MQ0': 0.0, 'reads_QC_failed': 0.0, 'non-primary_alignments': 0.0, 'total_length': 857009844.0, 'bases_mapped': 662153544.0, 'bases_mapped_(cigar)': 662153544.0, 'bases_trimmed': 0.0, 'bases_duplicated': 0.0, 'mismatches': 3462334.0, 'error_rate': 0.005228899, 'average_length': 36.0, 'maximum_length': 36.0, 'average_quality': 27.8, 'insert_size_average': 0.0, 'insert_size_standard_deviation': 0.0, 'inward_oriented_pairs': 0.0, 'outward_oriented_pairs': 0.0, 'pairs_with_other_orientation': 0.0, 'pairs_on_different_chromosomes': 0.0, 'reads_mapped_percent': 77.26323666359193, 'reads_mapped_and_paired_percent': 0.0, 'reads_unmapped_percent': 22.73676333640807, 'reads_properly_paired_percent': 0.0, 'reads_paired_percent': 0.0, 'reads_duplicated_percent': 0.0, 'reads_MQ0_percent': 0.0, 'reads_QC_failed_percent': 0.0}),
        ]),
        'Test1': list([
          InputRow(sample='Test1', data={'raw_total_sequences': 101.0, 'filtered_sequences': 0.0, 'sequences': 101.0, 'is_sorted': 1.0, '1st_fragments': 101.0, 'last_fragments': 0.0, 'reads_mapped': 81.0, 'reads_mapped_and_paired': 0.0, 'reads_unmapped': 20.0, 'reads_properly_paired': 0.0, 'reads_paired': 0.0, 'reads_duplicated': 0.0, 'reads_MQ0': 0.0, 'reads_QC_failed': 0.0, 'non-primary_alignments': 0.0, 'total_length': 3529.0, 'bases_mapped': 2829.0, 'bases_mapped_(cigar)': 2829.0, 'bases_trimmed': 0.0, 'bases_duplicated': 0.0, 'mismatches': 41.0, 'error_rate': 0.01449275, 'average_length': 34.0, 'maximum_length': 35.0, 'average_quality': 38.5, 'insert_size_average': 0.0, 'insert_size_standard_deviation': 0.0, 'inward_oriented_pairs': 0.0, 'outward_oriented_pairs': 0.0, 'pairs_with_other_orientation': 0.0, 'pairs_on_different_chromosomes': 0.0, 'reads_mapped_percent': 80.19801980198021, 'reads_mapped_and_paired_percent': 0.0, 'reads_unmapped_percent': 19.801980198019802, 'reads_properly_paired_percent': 0.0, 'reads_paired_percent': 0.0, 'reads_duplicated_percent': 0.0, 'reads_MQ0_percent': 0.0, 'reads_QC_failed_percent': 0.0}),
        ]),
        'filtered_reads': list([
          InputRow(sample='filtered_reads', data={'raw_total_sequences': 1998.0, 'filtered_sequences': 999.0, 'sequences': 999.0, 'is_sorted': 1.0, '1st_fragments': 517.0, 'last_fragments': 482.0, 'reads_mapped': 999.0, 'reads_mapped_and_paired': 999.0, 'reads_unmapped': 0.0, 'reads_properly_paired': 999.0, 'reads_paired': 999.0, 'reads_duplicated': 0.0, 'reads_MQ0': 0.0, 'reads_QC_failed': 0.0, 'non-primary_alignments': 0.0, 'supplementary_alignments': 0.0, 'total_length': 69930.0, 'total_first_fragment_length': 36190.0, 'total_last_fragment_length': 33740.0, 'bases_mapped': 69930.0, 'bases_mapped_(cigar)': 69881.0, 'bases_trimmed': 0.0, 'bases_duplicated': 0.0, 'mismatches': 1445.0, 'error_rate': 0.02067801, 'average_length': 70.0, 'average_first_fragment_length': 70.0, 'average_last_fragment_length': 70.0, 'maximum_length': 70.0, 'maximum_first_fragment_length': 70.0, 'maximum_last_fragment_length': 70.0, 'average_quality': 17.0, 'insert_size_average': 502.2, 'insert_size_standard_deviation': 41.4, 'inward_oriented_pairs': 433.0, 'outward_oriented_pairs': 0.0, 'pairs_with_other_orientation': 0.0, 'pairs_on_different_chromosomes': 0.0, 'percentage_of_properly_paired_reads_(%)': 100.0, 'reads_mapped_percent': 50.0, 'reads_mapped_and_paired_percent': 50.0, 'reads_unmapped_percent': 0.0, 'reads_properly_paired_percent': 50.0, 'reads_paired_percent': 50.0, 'reads_duplicated_percent': 0.0, 'reads_MQ0_percent': 0.0, 'reads_QC_failed_percent': 0.0}),
        ]),
      }),
      'samtools_3': dict({
        'low_quality_1': list([
          InputRow(sample='low_quality_1', data={'total_passed': 137147, 'total_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 137147, 'mapped_failed': 0, 'mapped_passed_pct': 100.0, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 137147, 'paired in sequencing_failed': 0, 'read1_passed': 66552, 'read1_failed': 0, 'read2_passed': 70595, 'read2_failed': 0, 'properly paired_passed': 44296, 'properly paired_failed': 0, 'properly paired_passed_pct': 32.3, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 57734, 'with itself and mate mapped_failed': 0, 'singletons_passed': 79413, 'singletons_failed': 0, 'singletons_passed_pct': 57.9, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 14598, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 668, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 137147}),
        ]),
        'low_quality_2': list([
          InputRow(sample='low_quality_2', data={'total_passed': 120672, 'total_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 120672, 'mapped_failed': 0, 'mapped_passed_pct': 100.0, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 120672, 'paired in sequencing_failed': 0, 'read1_passed': 59601, 'read1_failed': 0, 'read2_passed': 61071, 'read2_failed': 0, 'properly paired_passed': 38796, 'properly paired_failed': 0, 'properly paired_passed_pct': 32.15, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 47462, 'with itself and mate mapped_failed': 0, 'singletons_passed': 73210, 'singletons_failed': 0, 'singletons_passed_pct': 60.67, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 10266, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 508, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 120672}),
        ]),
        'samtools': list([
          InputRow(sample='samtools', data={'total_passed': 11540659, 'total_failed': 0, 'secondary_passed': 6365, 'secondary_failed': 0, 'supplementary_passed': 0, 'supplementary_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 11540643, 'mapped_failed': 0, 'mapped_passed_pct': 100.0, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 11534294, 'paired in sequencing_failed': 0, 'read1_passed': 5767147, 'read1_failed': 0, 'read2_passed': 5767147, 'read2_failed': 0, 'properly paired_passed': 11518384, 'properly paired_failed': 0, 'properly paired_passed_pct': 99.86, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 11534266, 'with itself and mate mapped_failed': 0, 'singletons_passed': 12, 'singletons_failed': 0, 'singletons_passed_pct': 0.0, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 628, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 344, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 11540659}),
        ]),
        'small': list([
          InputRow(sample='small', data={'total_passed': 5414, 'total_failed': 0, 'secondary_passed': 13, 'secondary_failed': 0, 'supplementary_passed': 0, 'supplementary_failed': 0, 'duplicates_passed': 0, 'duplicates_failed': 0, 'mapped_passed': 5350, 'mapped_failed': 0, 'mapped_passed_pct': 98.82, 'mapped_failed_pct': nan, 'paired in sequencing_passed': 5401, 'paired in sequencing_failed': 0, 'read1_passed': 2709, 'read1_failed': 0, 'read2_passed': 2692, 'read2_failed': 0, 'properly paired_passed': 5011, 'properly paired_failed': 0, 'properly paired_passed_pct': 92.78, 'properly paired_failed_pct': nan, 'with itself and mate mapped_passed': 5273, 'with itself and mate mapped_failed': 0, 'singletons_passed': 64, 'singletons_failed': 0, 'singletons_passed_pct': 1.18, 'singletons_failed_pct': nan, 'with mate mapped to a different chr_passed': 206, 'with mate mapped to a different chr_failed': 0, 'with mate mapped to a different chr (mapQ >= 5)_passed': 81, 'with mate mapped to a different chr (mapQ >= 5)_failed': 0, 'flagstat_total': 5414}),
        ]),
      }),
      'samtools_4': dict({
        'Sample 2': list([
          InputRow(sample='Sample 2', data={'n_dups': 7482847, 'n_tot': 83824753, 'n_unique': 76341906, 'pct_dups': 8.92}),
        ]),
        'sample_1': list([
          InputRow(sample='sample_1', data={'n_dups': 26602816, 'n_tot': 103563641, 'n_unique': 76960825, 'pct_dups': 25.69}),
        ]),
      }),
      'samtools_5': dict({
        'NA12878_sorted_chrM_chr20_rehead_60pdown': list([
          InputRow(sample='NA12878_sorted_chrM_chr20_rehead_60pdown', data={'numreads': 750591, 'covbases': 8983488, 'coverage': 13.936327510616694, 'meandepth': 1.6043681481908614, 'meanbaseq': 255.0, 'meanmapq': 59.19930599147984}),
        ]),
        'bc_anchored_10_reads': list([
          InputRow(sample='bc_anchored_10_reads', data={'numreads': 10, 'covbases': 156, 'coverage': 1.7254728459241235, 'meandepth': 0.12531798694834642, 'meanbaseq': 0.3174870036500387, 'meanmapq': 0.5107399623935406}),
        ]),
        'test.paired_end': list([
          InputRow(sample='test.paired_end', data={'numreads': 141000, 'covbases': 29525, 'coverage': 2.95243, 'meandepth': 16.7743, 'meanbaseq': 40.9, 'meanmapq': 60.0}),
        ]),
      }),
      'samtools_6': dict({
        'issue_3134': list([
          InputRow(sample='issue_3134', data={'optical_duplicate_distance': 2500, 'read': 233070661, 'written': 170120723, 'excluded': 0, 'examined': 233070661, 'paired': 232940212, 'single': 130449, 'duplicate_pair': 62895132, 'duplicate_single': 54806, 'duplicate_pair_optical': 34037112, 'duplicate_single_optical': 21786, 'duplicate_non_primary': 0, 'duplicate_non_primary_optical': 0, 'duplicate_primary_total': 62949938, 'duplicate_total': 62949938, 'estimated_library_size': 308712639, 'duplicate_optical_total': 34058898, 'duplicate_optical_fraction': 0.14613121125528536, 'duplicate_fraction': 0.2700894987378956, 'duplicate_pair_non_optical': 28858020, 'duplicate_single_non_optical': 33020, 'duplicate_non_primary_non_optical': 0, 'non_duplicate': 170120723}),
        ]),
        'test2': list([
          InputRow(sample='test2', data={'optical_duplicate_distance': 2500, 'read': 1353408, 'written': 1353408, 'excluded': 752, 'examined': 1352656, 'paired': 1352588, 'single': 68, 'duplicate_pair': 1058157, 'duplicate_single': 52, 'duplicate_pair_optical': 1026710, 'duplicate_single_optical': 36, 'duplicate_non_primary': 0, 'duplicate_non_primary_optical': 0, 'duplicate_primary_total': 1058209, 'duplicate_total': 1058209, 'estimated_library_size': 788988, 'duplicate_optical_total': 1026746, 'duplicate_optical_fraction': 0.7590592138725589, 'duplicate_fraction': 0.782319377580109, 'duplicate_pair_non_optical': 31447, 'duplicate_single_non_optical': 16, 'duplicate_non_primary_non_optical': 0, 'non_duplicate': 294447}),
        ]),
      }),
    }),
    'headers': dict({
      'samtools': dict({
        'error_rate': dict({
          'description': 'Error rate: mismatches (NM) / bases mapped (CIGAR)',
          'format': '{:,.2f}',
          'hidden': False,
          'max': 100,
          'min': 0,
          'modify': 'parse_samtools_stats.<locals>.<lambda>(x)',
          'namespace': 'Samtools: stats',
          'scale': 'OrRd',
          'suffix': '%',
          'title': 'Error rate',
        }),
        'insert_size_average': dict({
          'description': 'Average insert size',
          'format': '{:,.1f}',
          'hidden': True,
          'namespace': 'Samtools: stats',
          'scale': 'Oranges',
          'suffix': 'bp',
          'title': 'Mean insert',
        }),
        'non-primary_alignments': dict({
          'description': 'Non-primary alignments (millions)',
          'hidden': False,
          'namespace': 'Samtools: stats',
          'scale': 'PuBu',
          'shared_key': 'read_count',
          'title': 'Non-primary',
        }),
        'raw_total_sequences': dict({
          'description': 'Total sequences in the bam file (millions)',
          'hidden': False,
          'namespace': 'Samtools: stats',
          'shared_key': 'read_count',
          'title': 'Total seqs',
        }),
        'reads_MQ0_percent': dict({
          'description': '% of reads that are ambiguously placed (MapQ=0)',
          'hidden': True,
          'max': 100,
          'min': 0,
          'namespace': 'Samtools: stats',
          'scale': 'OrRd',
          'suffix': '%',
          'title': '% MapQ 0 reads',
        }),
        'reads_mapped': dict({
          'description': 'Reads mapped in the bam file (millions)',
          'hidden': False,
          'namespace': 'Samtools: stats',
          'shared_key': 'read_count',
          'title': 'Reads mapped',
        }),
        'reads_mapped_percent': dict({
          'description': '% Mapped reads',
          'hidden': False,
          'max': 100,
          'min': 0,
          'namespace': 'Samtools: stats',
          'scale': 'RdYlGn',
          'suffix': '%',
          'title': '% Mapped',
        }),
        'reads_properly_paired_percent': dict({
          'description': '% Properly paired reads',
          'hidden': False,
          'max': 100,
          'min': 0,
          'namespace': 'Samtools: stats',
          'scale': 'RdYlGn',
          'suffix': '%',
          'title': '% Proper pairs',
        }),
      }),
      'samtools_3': dict({
        'flagstat_total': dict({
          'description': 'Total reads in the bam file (millions)',
          'hidden': True,
          'namespace': 'Samtools: flagstat',
          'shared_key': 'read_count',
          'title': 'Reads',
        }),
        'mapped_passed': dict({
          'description': 'Reads mapped in the bam file (millions)',
          'hidden': False,
          'namespace': 'Samtools: flagstat',
          'shared_key': 'read_count',
          'title': 'Reads mapped',
        }),
        'mapped_passed_pct': dict({
          'description': '% Reads mapped in the bam file',
          'hidden': True,
          'max': 100,
          'min': 0,
          'namespace': 'Samtools: flagstat',
          'scale': 'RdYlGn',
          'suffix': '%',
          'title': '% Reads mapped',
        }),
      }),
      'samtools_4': dict({
        'pct_dups': dict({
          'description': 'Percent of duplicate alignments',
          'hidden': False,
          'max': 100,
          'min': 0,
          'namespace': 'Samtools: rmdup',
          'scale': 'OrRd',
          'suffix': '%',
          'title': 'Duplicates',
        }),
      }),
      'samtools_5': dict({
        'covbases': dict({
          'description': 'Total number of mapped base pairs',
          'hidden': True,
          'namespace': 'Samtools: coverage',
          'scale': 'Blues',
          'shared_key': 'base_count',
          'title': 'Bases',
        }),
        'coverage': dict({
          'description': 'Percentage of region covered with reads',
          'hidden': True,
          'max': 100,
          'min': 0,
          'namespace': 'Samtools: coverage',
          'scale': 'YlGn',
          'suffix': '%',
          'title': 'Coverage',
        }),
        'meanbaseq': dict({
          'description': 'Mean base quality',
          'hidden': True,
          'min': 0,
          'namespace': 'Samtools: coverage',
          'scale': 'Blues',
          'title': 'Mean BQ',
        }),
        'meandepth': dict({
          'description': 'Mean depth of coverage',
          'hidden': False,
          'min': 0,
          'namespace': 'Samtools: coverage',
          'scale': 'RdYlGn',
          'suffix': 'x',
          'title': 'Mean depth',
        }),
        'meanmapq': dict({
          'description': 'Mean mapping quality',
          'hidden': True,
          'max': 60,
          'min': 0,
          'namespace': 'Samtools: coverage',
          'scale': 'RdYlGn',
          'title': 'Mean MQ',
        }),
        'numreads': dict({
          'description': 'Total number of mapped reads',
          'hidden': True,
          'namespace': 'Samtools: coverage',
          'scale': 'RdYlGn',
          'shared_key': 'read_count',
          'title': 'Reads',
        }),
      }),
      'samtools_6': dict({
        'duplicate_fraction': dict({
          'description': 'The percent of all types of duplicate reads',
          'hidden': False,
          'max': 100,
          'min': 0,
          'modify': 'parse_samtools_markdup.<locals>.<lambda>(x)',
          'namespace': 'Samtools: markdup',
          'scale': 'OrRd',
          'suffix': '%',
          'title': 'Duplicates',
        }),
        'estimated_library_size': dict({
          'description': 'The estimated library size after de-duplication.',
          'format': '{:,d}',
          'hidden': False,
          'min': 0,
          'namespace': 'Samtools: markdup',
          'title': 'Est. library size',
        }),
      }),
    }),
  })
# ---
# name: TestSamtoolsFlagstatSnapshot.test_module_raw_data_snapshot
  dict({
    'multiqc_samtools_coverage': dict({
      'NA12878_sorted_chrM_chr20_rehead_60pdown': dict({
        'chr20': dict({
          'covbases': 8966919,
          'coverage': 13.9142,
          'endpos': 64444167,
          'meanbaseq': 255.0,
          'meandepth': 1.30202,
          'meanmapq': 59.2,
          'numreads': 606974,
          'size': 64444167,
          'startpos': 1,
        }),
        'chrM': dict({
          'covbases': 16569,
          'coverage': 100.0,
          'endpos': 16569,
          'meanbaseq': 255.0,
          'meandepth': 1177.57,
          'meanmapq': 56.5,
          'numreads': 143617,
          'size': 16569,
          'startpos': 1,
        }),
      }),
      'bc_anchored_10_reads': dict({
        'N3032_110_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 110,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 110,
          'startpos': 1,
        }),
        'N3032_123_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 123,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 123,
          'startpos': 1,
        }),
        'N3032_147_bp_A': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 147,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 147,
          'startpos': 1,
        }),
        'N3032_147_bp_B': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 147,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 147,
          'startpos': 1,
        }),
        'N3032_15_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 15,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 15,
          'startpos': 1,
        }),
        'N3032_160_bp_A': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 160,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 160,
          'startpos': 1,
        }),
        'N3032_160_bp_B': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 160,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 160,
          'startpos': 1,
        }),
        'N3032_180_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 180,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 180,
          'startpos': 1,
        }),
        'N3032_190_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 190,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 190,
          'startpos': 1,
        }),
        'N3032_201_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 201,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 201,
          'startpos': 1,
        }),
        'N3032_217_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 217,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 217,
          'startpos': 1,
        }),
        'N3032_238_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 238,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 238,
          'startpos': 1,
        }),
        'N3032_242_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 242,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 242,
          'startpos': 1,
        }),
        'N3032_26_bp_A': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 26,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 26,
          'startpos': 1,
        }),
        'N3032_26_bp_B': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 26,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 26,
          'startpos': 1,
        }),
        'N3032_307_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 307,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 307,
          'startpos': 1,
        }),
        'N3032_34_bp_A': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 34,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 34,
          'startpos': 1,
        }),
        'N3032_34_bp_B': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 34,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 34,
          'startpos': 1,
        }),
        'N3032_404_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 404,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 404,
          'startpos': 1,
        }),
        'N3032_527_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 527,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 527,
          'startpos': 1,
        }),
        'N3032_622_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 619,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 619,
          'startpos': 1,
        }),
        'N3032_67_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 67,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 67,
          'startpos': 1,
        }),
        'N3032_76_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 76,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 76,
          'startpos': 1,
        }),
        'N3032_90_bp': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 90,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 90,
          'startpos': 1,
        }),
        'N3032_9_bp_A': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 9,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 9,
          'startpos': 1,
        }),
        'N3032_9_bp_B': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 9,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 9,
          'startpos': 1,
        }),
        'lambda_3-6kb': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 3591,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 3591,
          'startpos': 1,
        }),
        'oligo_1471_adapters': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 156,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 156,
          'startpos': 1,
        }),
        'oligo_1512_adapters': dict({
          'covbases': 156,
          'coverage': 100.0,
          'endpos': 156,
          'meanbaseq': 18.4,
          'meandepth': 7.26282,
          'meanmapq': 29.6,
          'numreads': 10,
          'size': 156,
          'startpos': 1,
        }),
        'oligo_1932_adapters': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 156,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 156,
          'startpos': 1,
        }),
        'oligo_2725_adapters': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 156,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 156,
          'startpos': 1,
        }),
        'oligo_3213_adapters': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 156,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 156,
          'startpos': 1,
        }),
        'oligo_677_adapters': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 156,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 156,
          'startpos': 1,
        }),
        'oligo_741_adapters': dict({
          'covbases': 0,
          'coverage': 0.0,
          'endpos': 156,
          'meanbaseq': 0.0,
          'meandepth': 0.0,
          'meanmapq': 0.0,
          'numreads': 0,
          'size': 156,
          'startpos': 1,
        }),
      }),
      'test.paired_end': dict({
        'chr1': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr10': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr11': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr12': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr13': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr14': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr15': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr16': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr17': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr18': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr19': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr2': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr20': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr21': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr22': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr3': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr4': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr5': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr6': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr7': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr8': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chr9': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chrM': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chrX': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
        'chrY': dict({
          'covbases': 1181,
          'coverage': 2.95243,
          'endpos': 40001,
          'meanbaseq': 40.9,
          'meandepth': 16.7743,
          'meanmapq': 60.0,
          'numreads': 5640,
          'size': 40001,
          'startpos': 1,
        }),
      }),
    }),
    'multiqc_samtools_flagstat': dict({
      'low_quality_1': dict({
        'duplicates_failed': 0,
        'duplicates_passed': 0,
        'flagstat_total': 137147,
        'mapped_failed': 0,
        'mapped_failed_pct': nan,
        'mapped_passed': 137147,
        'mapped_passed_pct': 100.0,
        'paired in sequencing_failed': 0,
        'paired in sequencing_passed': 137147,
        'properly paired_failed': 0,
        'properly paired_failed_pct': nan,
        'properly paired_passed': 44296,
        'properly paired_passed_pct': 32.3,
        'read1_failed': 0,
        'read1_passed': 66552,
        'read2_failed': 0,
        'read2_passed': 70595,
        'singletons_failed': 0,
        'singletons_failed_pct': nan,
        'singletons_passed': 79413,
        'singletons_passed_pct': 57.9,
        'total_failed': 0,
        'total_passed': 137147,
        'with itself and mate mapped_failed': 0,
        'with itself and mate mapped_passed': 57734,
        'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
        'with mate mapped to a different chr (mapQ >= 5)_passed': 668,
        'with mate mapped to a different chr_failed': 0,
        'with mate mapped to a different chr_passed': 14598,
      }),
      'low_quality_2': dict({
        'duplicates_failed': 0,
        'duplicates_passed': 0,
        'flagstat_total': 120672,
        'mapped_failed': 0,
        'mapped_failed_pct': nan,
        'mapped_passed': 120672,
        'mapped_passed_pct': 100.0,
        'paired in sequencing_failed': 0,
        'paired in sequencing_passed': 120672,
        'properly paired_failed': 0,
        'properly paired_failed_pct': nan,
        'properly paired_passed': 38796,
        'properly paired_passed_pct': 32.15,
        'read1_failed': 0,
        'read1_passed': 59601,
        'read2_failed': 0,
        'read2_passed': 61071,
        'singletons_failed': 0,
        'singletons_failed_pct': nan,
        'singletons_passed': 73210,
        'singletons_passed_pct': 60.67,
        'total_failed': 0,
        'total_passed': 120672,
        'with itself and mate mapped_failed': 0,
        'with itself and mate mapped_passed': 47462,
        'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
        'with mate mapped to a different chr (mapQ >= 5)_passed': 508,
        'with mate mapped to a different chr_failed': 0,
        'with mate mapped to a different chr_passed': 10266,
      }),
      'samtools': dict({
        'duplicates_failed': 0,
        'duplicates_passed': 0,
        'flagstat_total': 11540659,
        'mapped_failed': 0,
        'mapped_failed_pct': nan,
        'mapped_passed': 11540643,
        'mapped_passed_pct': 100.0,
        'paired in sequencing_failed': 0,
        'paired in sequencing_passed': 11534294,
        'properly paired_failed': 0,
        'properly paired_failed_pct': nan,
        'properly paired_passed': 11518384,
        'properly paired_passed_pct': 99.86,
        'read1_failed': 0,
        'read1_passed': 5767147,
        'read2_failed': 0,
        'read2_passed': 5767147,
        'secondary_failed': 0,
        'secondary_passed': 6365,
        'singletons_failed': 0,
        'singletons_failed_pct': nan,
        'singletons_passed': 12,
        'singletons_passed_pct': 0.0,
        'supplementary_failed': 0,
        'supplementary_passed': 0,
        'total_failed': 0,
        'total_passed': 11540659,
        'with itself and mate mapped_failed': 0,
        'with itself and mate mapped_passed': 11534266,
        'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
        'with mate mapped to a different chr (mapQ >= 5)_passed': 344,
        'with mate mapped to a different chr_failed': 0,
        'with mate mapped to a different chr_passed': 628,
      }),
      'small': dict({
        'duplicates_failed': 0,
        'duplicates_passed': 0,
        'flagstat_total': 5414,
        'mapped_failed': 0,
        'mapped_failed_pct': nan,
        'mapped_passed': 5350,
        'mapped_passed_pct': 98.82,
        'paired in sequencing_failed': 0,
        'paired in sequencing_passed': 5401,
        'properly paired_failed': 0,
        'properly paired_failed_pct': nan,
        'properly paired_passed': 5011,
        'properly paired_passed_pct': 92.78,
        'read1_failed': 0,
        'read1_passed': 2709,
        'read2_failed': 0,
        'read2_passed': 2692,
        'secondary_failed': 0,
        'secondary_passed': 13,
        'singletons_failed': 0,
        'singletons_failed_pct': nan,
        'singletons_passed': 64,
        'singletons_passed_pct': 1.18,
        'supplementary_failed': 0,
        'supplementary_passed': 0,
        'total_failed': 0,
        'total_passed': 5414,
        'with itself and mate mapped_failed': 0,
        'with itself and mate mapped_passed': 5273,
        'with mate mapped to a different chr (mapQ >= 5)_failed': 0,
        'with mate mapped to a different chr (mapQ >= 5)_passed': 81,
        'with mate mapped to a different chr_failed': 0,
        'with mate mapped to a different chr_passed': 206,
      }),
    }),
    'multiqc_samtools_idxstats': dict({
      'samtools': dict({
        '*': list([
          0,
          0,
        ]),
        '1': list([
          860208,
          249250621,
        ]),
        '10': list([
          411317,
          135534747,
        ]),
        '11': list([
          397326,
          135006516,
        ]),
        '12': list([
          451235,
          133851895,
        ]),
        '13': list([
          241506,
          115169878,
        ]),
        '14': list([
          196401,
          107349540,
        ]),
        '15': list([
          305768,
          102531392,
        ]),
        '16': list([
          414172,
          90354753,
        ]),
        '17': list([
          728986,
          81195210,
        ]),
        '18': list([
          212281,
          78077248,
        ]),
        '19': list([
          406564,
          59128983,
        ]),
        '2': list([
          1106007,
          243199373,
        ]),
        '20': list([
          167774,
          63025520,
        ]),
        '21': list([
          91318,
          48129895,
        ]),
        '22': list([
          118749,
          51304566,
        ]),
        '3': list([
          545145,
          198022430,
        ]),
        '4': list([
          359862,
          191154276,
        ]),
        '5': list([
          604803,
          180915260,
        ]),
        '6': list([
          531674,
          171115067,
        ]),
        '7': list([
          667701,
          159138663,
        ]),
        '8': list([
          398788,
          146364022,
        ]),
        '9': list([
          371684,
          141213431,
        ]),
        'GL000191.1': list([
          0,
          106433,
        ]),
        'GL000192.1': list([
          0,
          547496,
        ]),
        'GL000193.1': list([
          0,
          189789,
        ]),
        'GL000194.1': list([
          0,
          191469,
        ]),
        'GL000195.1': list([
          0,
          182896,
        ]),
        'GL000196.1': list([
          1,
          38914,
        ]),
        'GL000197.1': list([
          0,
          37175,
        ]),
        'GL000198.1': list([
          0,
          90085,
        ]),
        'GL000199.1': list([
          0,
          169874,
        ]),
        'GL000200.1': list([
          0,
          187035,
        ]),
        'GL000201.1': list([
          0,
          36148,
        ]),
        'GL000202.1': list([
          0,
          40103,
        ]),
        'GL000203.1': list([
          0,
          37498,
        ]),
        'GL000204.1': list([
          0,
          81310,
        ]),
        'GL000205.1': list([
          2,
          174588,
        ]),
        'GL000206.1': list([
          0,
          41001,
        ]),
        'GL000207.1': list([
          0,
          4262,
        ]),
        'GL000208.1': list([
          0,
          92689,
        ]),
        'GL000209.1': list([
          0,
          159169,
        ]),
        'GL000210.1': list([
          0,
          27682,
        ]),
        'GL000211.1': list([
          4,
          166566,
        ]),
        'GL000212.1': list([
          40,
          186858,
        ]),
        'GL000213.1': list([
          0,
          164239,
        ]),
        'GL000214.1': list([
          0,
          137718,
        ]),
        'GL000215.1': list([
          0,
          172545,
        ]),
        'GL000216.1': list([
          0,
          172294,
        ]),
        'GL000217.1': list([
          0,
          172149,
        ]),
        'GL000218.1': list([
          0,
          161147,
        ]),
        'GL000219.1': list([
          2,
          179198,
        ]),
        'GL000220.1': list([
          2,
          161802,
        ]),
        'GL000221.1': list([
          0,
          155397,
        ]),
        'GL000222.1': list([
          0,
          186861,
        ]),
        'GL000223.1': list([
          0,
          180455,
        ]),
        'GL000224.1': list([
          0,
          179693,
        ]),
        'GL000225.1': list([
          0,
          211173,
        ]),
        'GL000226.1': list([
          0,
          15008,
        ]),
        'GL000227.1': list([
          0,
          128374,
        ]),
        'GL000228.1': list([
          0,
          129120,
        ]),
        'GL000229.1': list([
          0,
          19913,
        ]),
        'GL000230.1': list([
          0,
          43691,
        ]),
        'GL000231.1': list([
          0,
          27386,
        ]),
        'GL000232.1': list([
          0,
          40652,
        ]),
        'GL000233.1': list([
          0,
          45941,
        ]),
        'GL000234.1': list([
          0,
          40531,
        ]),
        'GL000235.1': list([
          0,
          34474,
        ]),
        'GL000236.1': list([
          2,
          41934,
        ]),
        'GL000237.1': list([
          0,
          45867,
        ]),
        'GL000238.1': list([
          0,
          39939,
        ]),
        'GL000239.1': list([
          0,
          33824,
        ]),
        'GL000240.1': list([
          0,
          41933,
        ]),
        'GL000241.1': list([
          3,
          42152,
        ]),
        'GL000242.1': list([
          1,
          43523,
        ]),
        'GL000243.1': list([
          0,
          43341,
        ]),
        'GL000244.1': list([
          0,
          39929,
        ]),
        'GL000245.1': list([
          0,
          36651,
        ]),
        'GL000246.1': list([
          0,
          38154,
        ]),
        'GL000247.1': list([
          0,
          36422,
        ]),
        'GL000248.1': list([
          0,
          39786,
        ]),
        'GL000249.1': list([
          0,
          38502,
        ]),
        'MT': list([
          1760887,
          16569,
        ]),
        'NC_007605': list([
          9,
          171823,
        ]),
        'X': list([
          189549,
          155270560,
        ]),
        'Y': list([
          55,
          59373566,
        ]),
        'hs37d5': list([
          817,
          35477943,
        ]),
      }),
      'samtoolsidxstats': dict({
        '*': list([
          0,
          0,
        ]),
        '1': list([
          0,
          249250621,
        ]),
        '10': list([
          0,
          135534747,
        ]),
        '11': list([
          0,
          135006516,
        ]),
        '12': list([
          0,
          133851895,
        ]),
        '13': list([
          0,
          115169878,
        ]),
        '14': list([
          0,
          107349540,
        ]),
        '15': list([
          0,
          102531392,
        ]),
        '16': list([
          0,
          90354753,
        ]),
        '17': list([
          0,
          81195210,
        ]),
        '18': list([
          0,
          78077248,
        ]),
        '19': list([
          0,
          59128983,
        ]),
        '2': list([
          0,
          243199373,
        ]),
        '20': list([
          0,
          63025520,
        ]),
        '21': list([
          0,
          48129895,
        ]),
        '22': list([
          0,
          51304566,
        ]),
        '3': list([
          0,
          198022430,
        ]),
        '4': list([
          0,
          191154276,
        ]),
        '5': list([
          0,
          180915260,
        ]),
        '6': list([
          0,
          171115067,
        ]),
        '7': list([
          0,
          159138663,
        ]),
        '8': list([
          0,
          146364022,
        ]),
        '9': list([
          0,
          141213431,
        ]),
        'GL000191.1': list([
          0,
          106433,
        ]),
        'GL000192.1': list([
          0,
          547496,
        ]),
        'GL000193.1': list([
          0,
          189789,
        ]),
        'GL000194.1': list([
          0,
          191469,
        ]),
        'GL000195.1': list([
          0,
          182896,
        ]),
        'GL000196.1': list([
          0,
          38914,
        ]),
        'GL000197.1': list([
          0,
          37175,
        ]),
        'GL000198.1': list([
          0,
          90085,
        ]),
        'GL000199.1': list([
          0,
          169874,
        ]),
        'GL000200.1': list([
          0,
          187035,
        ]),
        'GL000201.1': list([
          0,
          36148,
        ]),
        'GL000202.1': list([
          0,
          40103,
        ]),
        'GL000203.1': list([
          0,
          37498,
        ]),
        'GL000204.1': list([
          0,
          81310,
        ]),
        'GL000205.1': list([
          0,
          174588,
        ]),
        'GL000206.1': list([
          0,
          41001,
        ]),
        'GL000207.1': list([
          0,
          4262,
        ]),
        'GL000208.1': list([
          0,
          92689,
        ]),
        'GL000209.1': list([
          0,
          159169,
        ]),
        'GL000210.1': list([
          0,
          27682,
        ]),
        'GL000211.1': list([
          0,
          166566,
        ]),
        'GL000212.1': list([
          0,
          186858,
        ]),
        'GL000213.1': list([
          0,
          164239,
        ]),
        'GL000214.1': list([
          0,
          137718,
        ]),
        'GL000215.1': list([
          0,
          172545,
        ]),
        'GL000216.1': list([
          0,
          172294,
        ]),
        'GL000217.1': list([
          0,
          172149,
        ]),
        'GL000218.1': list([
          0,
          161147,
        ]),
        'GL000219.1': list([
          0,
          179198,
        ]),
        'GL000220.1': list([
          0,
          161802,
        ]),
        'GL000221.1': list([
          0,
          155397,
        ]),
        'GL000222.1': list([
          0,
          186861,
        ]),
        'GL000223.1': list([
          0,
          180455,
        ]),
        'GL000224.1': list([
          0,
          179693,
        ]),
        'GL000225.1': list([
          0,
          211173,
        ]),
        'GL000226.1': list([
          0,
          15008,
        ]),
        'GL000227.1': list([
          0,
          128374,
        ]),
        'GL000228.1': list([
          0,
          129120,
        ]),
        'GL000229.1': list([
          0,
          19913,
        ]),
        'GL000230.1': list([
          0,
          43691,
        ]),
        'GL000231.1': list([
          0,
          27386,
        ]),
        'GL000232.1': list([
          0,
          40652,
        ]),
        'GL000233.1': list([
          0,
          45941,
        ]),
        'GL000234.1': list([
          0,
          40531,
        ]),
        'GL000235.1': list([
          0,
          34474,
        ]),
        'GL000236.1': list([
          0,
          41934,
        ]),
        'GL000237.1': list([
          0,
          45867,
        ]),
        'GL000238.1': list([
          0,
          39939,
        ]),
        'GL000239.1': list([
          0,
          33824,
        ]),
        'GL000240.1': list([
          0,
          41933,
        ]),
        'GL000241.1': list([
          0,
          42152,
        ]),
        'GL000242.1': list([
          0,
          43523,
        ]),
        'GL000243.1': list([
          0,
          43341,
        ]),
        'GL000244.1': list([
          0,
          39929,
        ]),
        'GL000245.1': list([
          0,
          36651,
        ]),
        'GL000246.1': list([
          0,
          38154,
        ]),
        'GL000247.1': list([
          0,
          36422,
        ]),
        'GL000248.1': list([
          0,
          39786,
        ]),
        'GL000249.1': list([
          0,
          38502,
        ]),
        'MT': list([
          0,
          16569,
        ]),
        'NC_007605': list([
          0,
          171823,
        ]),
        'X': list([
          0,
          155270560,
        ]),
        'Y': list([
          0,
          59373566,
        ]),
        'hs37d5': list([
          0,
          35477943,
        ]),
      }),
      'samtoolsidxstats2': dict({
        '*': list([
          0,
          0,
        ]),
        '1': list([
          10,
          249250621,
        ]),
        '10': list([
          10,
          135534747,
        ]),
        '11': list([
          10,
          135006516,
        ]),
        '12': list([
          10,
          133851895,
        ]),
        '13': list([
          10,
          115169878,
        ]),
        '14': list([
          10,
          107349540,
        ]),
        '15': list([
          10,
          102531392,
        ]),
        '16': list([
          10,
          90354753,
        ]),
        '17': list([
          10,
          81195210,
        ]),
        '18': list([
          10,
          78077248,
        ]),
        '19': list([
          10,
          59128983,
        ]),
        '2': list([
          10,
          243199373,
        ]),
        '20': list([
          10,
          63025520,
        ]),
        '21': list([
          10,
          48129895,
        ]),
        '22': list([
          10,
          51304566,
        ]),
        '3': list([
          10,
          198022430,
        ]),
        '4': list([
          10,
          191154276,
        ]),
        '5': list([
          10,
          180915260,
        ]),
        '6': list([
          10,
          171115067,
        ]),
        '7': list([
          10,
          159138663,
        ]),
        '8': list([
          10,
          146364022,
        ]),
        '9': list([
          10,
          141213431,
        ]),
        'GL000191.1': list([
          10,
          106433,
        ]),
        'GL000192.1': list([
          0,
          547496,
        ]),
        'GL000193.1': list([
          0,
          189789,
        ]),
        'GL000194.1': list([
          0,
          191469,
        ]),
        'GL000195.1': list([
          0,
          182896,
        ]),
        'GL000196.1': list([
          10,
          38914,
        ]),
        'GL000197.1': list([
          10,
          37175,
        ]),
        'GL000198.1': list([
          10,
          90085,
        ]),
        'GL000199.1': list([
          0,
          169874,
        ]),
        'GL000200.1': list([
          0,
          187035,
        ]),
        'GL000201.1': list([
          10,
          36148,
        ]),
        'GL000202.1': list([
          10,
          40103,
        ]),
        'GL000203.1': list([
          10,
          37498,
        ]),
        'GL000204.1': list([
          10,
          81310,
        ]),
        'GL000205.1': list([
          0,
          174588,
        ]),
        'GL000206.1': list([
          10,
          41001,
        ]),
        'GL000207.1': list([
          10,
          4262,
        ]),
        'GL000208.1': list([
          10,
          92689,
        ]),
        'GL000209.1': list([
          0,
          159169,
        ]),
        'GL000210.1': list([
          10,
          27682,
        ]),
        'GL000211.1': list([
          0,
          166566,
        ]),
        'GL000212.1': list([
          0,
          186858,
        ]),
        'GL000213.1': list([
          0,
          164239,
        ]),
        'GL000214.1': list([
          0,
          137718,
        ]),
        'GL000215.1': list([
          0,
          172545,
        ]),
        'GL000216.1': list([
          0,
          172294,
        ]),
        'GL000217.1': list([
          0,
          172149,
        ]),
        'GL000218.1': list([
          0,
          161147,
        ]),
        'GL000219.1': list([
          0,
          179198,
        ]),
        'GL000220.1': list([
          0,
          161802,
        ]),
        'GL000221.1': list([
          0,
          155397,
        ]),
        'GL000222.1': list([
          0,
          186861,
        ]),
        'GL000223.1': list([
          0,
          180455,
        ]),
        'GL000224.1': list([
          0,
          179693,
        ]),
        'GL000225.1': list([
          0,
          211173,
        ]),
        'GL000226.1': list([
          10,
          15008,
        ]),
        'GL000227.1': list([
          0,
          128374,
        ]),
        'GL000228.1': list([
          0,
          129120,
        ]),
        'GL000229.1': list([
          10,
          19913,
        ]),
        'GL000230.1': list([
          10,
          43691,
        ]),
        'GL000231.1': list([
          10,
          27386,
        ]),
        'GL000232.1': list([
          10,
          40652,
        ]),
        'GL000233.1': list([
          10,
          45941,
        ]),
        'GL000234.1': list([
          10,
          40531,
        ]),
        'GL000235.1': list([
          10,
          34474,
        ]),
        'GL000236.1': list([
          10,
          41934,
        ]),
        'GL000237.1': list([
          10,
          45867,
        ]),
        'GL000238.1': list([
          10,
          39939,
        ]),
        'GL000239.1': list([
          10,
          33824,
        ]),
        'GL000240.1': list([
          10,
          41933,
        ]),
        'GL000241.1': list([
          10,
          42152,
        ]),
        'GL000242.1': list([
          10,
          43523,
        ]),
        'GL000243.1': list([
          10,
          43341,
        ]),
        'GL000244.1': list([
          10,
          39929,
        ]),
        'GL000245.1': list([
          10,
          36651,
        ]),
        'GL000246.1': list([
          10,
          38154,
        ]),
        'GL000247.1': list([
          10,
          36422,
        ]),
        'GL000248.1': list([
          10,
          39786,
        ]),
        'GL000249.1': list([
          10,
          38502,
        ]),
        'MT': list([
          10,
          16569,
        ]),
        'NC_007605': list([
          0,
          171823,
        ]),
        'X': list([
          10,
          155270560,
        ]),
        'Y': list([
          10,
          59373566,
        ]),
        'hs37d5': list([
          0,
          35477943,
        ]),
      }),
    }),
    'multiqc_samtools_markdup': dict({
      'issue_3134': dict({
        'duplicate_fraction': 0.270089,
        'duplicate_non_primary': 0,
        'duplicate_non_primary_non_optical': 0,
        'duplicate_non_primary_optical': 0,
        'duplicate_optical_fraction': 0.146131,
        'duplicate_optical_total': 34058898,
        'duplicate_pair': 62895132,
        'duplicate_pair_non_optical': 28858020,
        'duplicate_pair_optical': 34037112,
        'duplicate_primary_total': 62949938,
        'duplicate_single': 54806,
        'duplicate_single_non_optical': 33020,
        'duplicate_single_optical': 21786,
        'duplicate_total': 62949938,
        'estimated_library_size': 308712639,
        'examined': 233070661,
        'excluded': 0,
        'non_duplicate': 170120723,
        'optical_duplicate_distance': 2500,
        'paired': 232940212,
        'read': 233070661,
        'single': 130449,
        'written': 170120723,
      }),
      'test2': dict({
        'duplicate_fraction': 0.782319,
        'duplicate_non_primary': 0,
        'duplicate_non_primary_non_optical': 0,
        'duplicate_non_primary_optical': 0,
        'duplicate_optical_fraction': 0.759059,
        'duplicate_optical_total': 1026746,
        'duplicate_pair': 1058157,
        'duplicate_pair_non_optical': 31447,
        'duplicate_pair_optical': 1026710,
        'duplicate_primary_total': 1058209,
        'duplicate_single': 52,
        'duplicate_single_non_optical': 16,
        'duplicate_single_optical': 36,
        'duplicate_total': 1058209,
        'estimated_library_size': 788988,
        'examined': 1352656,
        'excluded': 752,
        'non_duplicate': 294447,
        'optical_duplicate_distance': 2500,
        'paired': 1352588,
        'read': 1353408,
        'single': 68,
        'written': 1353408,
      }),
    }),
    'multiqc_samtools_rmdup': dict({
      'Sample 2': dict({
        'n_dups': 7482847,
        'n_tot': 83824753,
        'n_unique': 76341906,
        'pct_dups': 8.92,
      }),
      'sample_1': dict({
        'n_dups': 26602816,
        'n_tot': 103563641,
        'n_unique': 76960825,
        'pct_dups': 25.69,
      }),
    }),
    'multiqc_samtools_stats': dict({
      'SRR1067503_1': dict({
        '1st_fragments': 29071646.0,
        'average_length': 36.0,
        'average_quality': 31.4,
        'bases_duplicated': 0.0,
        'bases_mapped': 583242876.0,
        'bases_mapped_(cigar)': 583242876.0,
        'bases_trimmed': 0.0,
        'error_rate': 0.002837,
        'filtered_sequences': 0.0,
        'insert_size_average': 0.0,
        'insert_size_standard_deviation': 0.0,
        'inward_oriented_pairs': 0.0,
        'is_sorted': 1.0,
        'last_fragments': 0.0,
        'maximum_length': 36.0,
        'mismatches': 1654848.0,
        'non-primary_alignments': 0.0,
        'outward_oriented_pairs': 0.0,
        'pairs_on_different_chromosomes': 0.0,
        'pairs_with_other_orientation': 0.0,
        'raw_total_sequences': 29071646.0,
        'reads_MQ0': 0.0,
        'reads_MQ0_percent': 0.0,
        'reads_QC_failed': 0.0,
        'reads_QC_failed_percent': 0.0,
        'reads_duplicated': 0.0,
        'reads_duplicated_percent': 0.0,
        'reads_mapped': 16201191.0,
        'reads_mapped_MQ1': 16201191.0,
        'reads_mapped_and_paired': 0.0,
        'reads_mapped_and_paired_percent': 0.0,
        'reads_mapped_percent': 55.728496,
        'reads_paired': 0.0,
        'reads_paired_percent': 0.0,
        'reads_properly_paired': 0.0,
        'reads_properly_paired_percent': 0.0,
        'reads_unmapped': 12870455.0,
        'reads_unmapped_percent': 44.271504,
        'sequences': 29071646.0,
        'total_length': 1046579256.0,
      }),
      'SRR1067505_1': dict({
        '1st_fragments': 16635040.0,
        'average_length': 36.0,
        'average_quality': 31.9,
        'bases_duplicated': 0.0,
        'bases_mapped': 442765188.0,
        'bases_mapped_(cigar)': 442765188.0,
        'bases_trimmed': 0.0,
        'error_rate': 0.004029,
        'filtered_sequences': 0.0,
        'insert_size_average': 0.0,
        'insert_size_standard_deviation': 0.0,
        'inward_oriented_pairs': 0.0,
        'is_sorted': 1.0,
        'last_fragments': 0.0,
        'maximum_length': 36.0,
        'mismatches': 1783808.0,
        'non-primary_alignments': 0.0,
        'outward_oriented_pairs': 0.0,
        'pairs_on_different_chromosomes': 0.0,
        'pairs_with_other_orientation': 0.0,
        'raw_total_sequences': 16635040.0,
        'reads_MQ0': 0.0,
        'reads_MQ0_percent': 0.0,
        'reads_QC_failed': 0.0,
        'reads_QC_failed_percent': 0.0,
        'reads_duplicated': 0.0,
        'reads_duplicated_percent': 0.0,
        'reads_mapped': 12299033.0,
        'reads_mapped_MQ1': 12299033.0,
        'reads_mapped_and_paired': 0.0,
        'reads_mapped_and_paired_percent': 0.0,
        'reads_mapped_percent': 73.934496,
        'reads_paired': 0.0,
        'reads_paired_percent': 0.0,
        'reads_properly_paired': 0.0,
        'reads_properly_paired_percent': 0.0,
        'reads_unmapped': 4336007.0,
        'reads_unmapped_percent': 26.065504,
        'sequences': 16635040.0,
        'total_length': 598861440.0,
      }),
      'SRR1067519_1': dict({
        '1st_fragments': 23805829.0,
        'average_length': 36.0,
        'average_quality': 27.8,
        'bases_duplicated': 0.0,
        'bases_mapped': 662153544.0,
        'bases_mapped_(cigar)': 662153544.0,
        'bases_trimmed': 0.0,
        'error_rate': 0.005229,
        'filtered_sequences': 0.0,
        'insert_size_average': 0.0,
        'insert_size_standard_deviation': 0.0,
        'inward_oriented_pairs': 0.0,
        'is_sorted': 1.0,
        'last_fragments': 0.0,
        'maximum_length': 36.0,
        'mismatches': 3462334.0,
        'non-primary_alignments': 0.0,
        'outward_oriented_pairs': 0.0,
        'pairs_on_different_chromosomes': 0.0,
        'pairs_with_other_orientation': 0.0,
        'raw_total_sequences': 23805829.0,
        'reads_MQ0': 0.0,
        'reads_MQ0_percent': 0.0,
        'reads_QC_failed': 0.0,
        'reads_QC_failed_percent': 0.0,
        'reads_duplicated': 0.0,
        'reads_duplicated_percent': 0.0,
        'reads_mapped': 18393154.0,
        'reads_mapped_MQ1': 18393154.0,
        'reads_mapped_and_paired': 0.0,
        'reads_mapped_and_paired_percent': 0.0,
        'reads_mapped_percent': 77.263237,
        'reads_paired': 0.0,
        'reads_paired_percent': 0.0,
        'reads_properly_paired': 0.0,
        'reads_properly_paired_percent': 0.0,
        'reads_unmapped': 5412675.0,
        'reads_unmapped_percent': 22.736763,
        'sequences': 23805829.0,
        'total_length': 857009844.0,
      }),
      'Test1': dict({
        '1st_fragments': 101.0,
        'average_length': 34.0,
        'average_quality': 38.5,
        'bases_duplicated': 0.0,
        'bases_mapped': 2829.0,
        'bases_mapped_(cigar)': 2829.0,
        'bases_trimmed': 0.0,
        'error_rate': 0.014493,
        'filtered_sequences': 0.0,
        'insert_size_average': 0.0,
        'insert_size_standard_deviation': 0.0,
        'inward_oriented_pairs': 0.0,
        'is_sorted': 1.0,
        'last_fragments': 0.0,
        'maximum_length': 35.0,
        'mismatches': 41.0,
        'non-primary_alignments': 0.0,
        'outward_oriented_pairs': 0.0,
        'pairs_on_different_chromosomes': 0.0,
        'pairs_with_other_orientation': 0.0,
        'raw_total_sequences': 101.0,
        'reads_MQ0': 0.0,
        'reads_MQ0_percent': 0.0,
        'reads_QC_failed': 0.0,
        'reads_QC_failed_percent': 0.0,
        'reads_duplicated': 0.0,
        'reads_duplicated_percent': 0.0,
        'reads_mapped': 81.0,
        'reads_mapped_MQ1': 81.0,
        'reads_mapped_and_paired': 0.0,
        'reads_mapped_and_paired_percent': 0.0,
        'reads_mapped_percent': 80.19802,
        'reads_paired': 0.0,
        'reads_paired_percent': 0.0,
        'reads_properly_paired': 0.0,
        'reads_properly_paired_percent': 0.0,
        'reads_unmapped': 20.0,
        'reads_unmapped_percent': 19.80198,
        'sequences': 101.0,
        'total_length': 3529.0,
      }),
      'filtered_reads': dict({
        '1st_fragments': 517.0,
        'average_first_fragment_length': 70.0,
        'average_last_fragment_length': 70.0,
        'average_length': 70.0,
        'average_quality': 17.0,
        'bases_duplicated': 0.0,
        'bases_mapped': 69930.0,
        'bases_mapped_(cigar)': 69881.0,
        'bases_trimmed': 0.0,
        'error_rate': 0.020678,
        'filtered_sequences': 999.0,
        'insert_size_average': 502.2,
        'insert_size_standard_deviation': 41.4,
        'inward_oriented_pairs': 433.0,
        'is_sorted': 1.0,
        'last_fragments': 482.0,
        'maximum_first_fragment_length': 70.0,
        'maximum_last_fragment_length': 70.0,
        'maximum_length': 70.0,
        'mismatches': 1445.0,
        'non-primary_alignments': 0.0,
        'outward_oriented_pairs': 0.0,
        'pairs_on_different_chromosomes': 0.0,
        'pairs_with_other_orientation': 0.0,
        'percentage_of_properly_paired_reads_(%)': 100.0,
        'raw_total_sequences': 1998.0,
        'reads_MQ0': 0.0,
        'reads_MQ0_percent': 0.0,
        'reads_QC_failed': 0.0,
        'reads_QC_failed_percent': 0.0,
        'reads_duplicated': 0.0,
        'reads_duplicated_percent': 0.0,
        'reads_mapped': 999.0,
        'reads_mapped_MQ1': 999.0,
        'reads_mapped_and_paired': 999.0,
        'reads_mapped_and_paired_percent': 50.0,
        'reads_mapped_percent': 50.0,
        'reads_paired': 999.0,
        'reads_paired_percent': 50.0,
        'reads_properly_paired': 999.0,
        'reads_properly_paired_percent': 50.0,
        'reads_unmapped': 0.0,
        'reads_unmapped_percent': 0.0,
        'sequences': 999.0,
        'supplementary_alignments': 0.0,
        'total_first_fragment_length': 36190.0,
        'total_last_fragment_length': 33740.0,
        'total_length': 69930.0,
      }),
    }),
  })
# ---
# name: TestSamtoolsFlagstatSnapshot.test_module_sections_snapshot
  list([
    dict({
      'anchor': 'samtools-stats-alignment',
      'comment': '',
      'description': '<p>Alignment metrics from <code>samtools stats</code>; mapped vs. unmapped reads vs. reads mapped with MQ0.</p>',
      'helptext': '''
        <p>For a set of samples that have come from the same multiplexed library,
        similar numbers of reads for each sample are expected. Large differences in numbers might
        indicate issues during the library preparation process. Whilst large differences in read
        numbers may be controlled for in downstream processings (e.g. read count normalisation),
        you may wish to consider whether the read depths achieved have fallen below recommended
        levels depending on the applications.</p>
        <p>Low alignment rates could indicate contamination of samples (e.g. adapter sequences),
        low sequencing quality or other artefacts. These can be further investigated in the
        sequence level QC (e.g. from FastQC).</p>
        <p>Reads mapped with MQ0 often indicate that the reads are ambiguously mapped to multiple
        locations in the reference sequence. This can be due to repetitive regions in the genome,
        the presence of alternative contigs in the reference, or due to reads that are too short
        to be uniquely mapped. These reads are often filtered out in downstream analyses.</p>
      ''',
      'name': 'Percent mapped',
      'plot_id': None,
      'plot_type': None,
    }),
    dict({
      'anchor': 'samtools-stats',
      'comment': '',
      'description': '<p>This module parses the output from <code>samtools stats</code>. All numbers in millions.</p>',
      'helptext': '',
      'name': 'Alignment stats',
      'plot_id': None,
      'plot_type': None,
    }),
    dict({
      'anchor': 'samtools-flagstat',
      'comment': '',
      'description': '<p>This module parses the output from <code>samtools flagstat</code></p>',
      'helptext': '',
      'name': 'Flagstat',
      'plot_id': None,
      'plot_type': None,
    }),
    dict({
      'anchor': 'samtools-flagstat-pct',
      'comment': '',
      'description': '<p>This module parses the output from <code>samtools flagstat</code></p>',
      'helptext': '',
      'name': 'Flagstat: Percentage of total',
      'plot_id': None,
      'plot_type': None,
    }),
    dict({
      'anchor': 'samtools-idxstats-xy-counts',
      'comment': '',
      'description': '',
      'helptext': '',
      'name': 'XY counts',
      'plot_id': None,
      'plot_type': None,
    }),
    dict({
      'anchor': 'samtools-idxstats',
      'comment': '',
      'description': '<p>The <code>samtools idxstats</code> tool counts the number of mapped reads per chromosome / contig. Chromosomes with &lt; 0.1% of the total aligned reads are omitted from this plot.</p>',
      'helptext': '',
      'name': 'Mapped reads per contig',
      'plot_id': None,
      'plot_type': None,
    }),
    dict({
      'anchor': 'samtools-rmdup',
      'comment': '',
      'description': '',
      'helptext': '',
      'name': 'Duplicates removed',
      'plot_id': None,
      'plot_type': None,
    }),
    dict({
      'anchor': 'samtools-coverage-table-section',
      'comment': '',
      'description': '<p>Stats parsed from <code>samtools coverage</code> output, and summarized (added up or weighted-averaged) across all regions.</p>',
      'helptext': '',
      'name': 'Coverage: global stats',
      'plot_id': None,
      'plot_type': None,
    }),
    dict({
      'anchor': 'samtools-coverage-section',
      'comment': '',
      'description': '<p>Per-region stats parsed from <code>samtools coverage</code> output.</p>',
      'helptext': '',
      'name': 'Coverage: stats per region',
      'plot_id': None,
      'plot_type': None,
    }),
    dict({
      'anchor': 'samtools-markdup',
      'comment': '',
      'description': '<p>Optical duplicates are due to either optical or clustering-based artifacts. See the following links to learn more about instrument-based duplicate artifacts:<br><ul><li><a href="https://core-genomics.blogspot.com/2016/05/increased-read-duplication-on-patterned.html" target="_blank">Core Genomics Post: Increased Read Duplication on Patterned Flowcells</a></li><li><a href="https://sequencing.qcfail.com/articles/illumina-patterned-flow-cells-generate-duplicated-sequences/" target="_blank">QC Fail Post: Illumina Patterned Flow Cells Generate Duplicated Sequences</a></li></ul>.</p>',
      'helptext': '',
      'name': 'Markdup: stats',
      'plot_id': None,
      'plot_type': None,
    }),
    dict({
      'anchor': 'samtools-markdup-categories',
      'comment': '',
      'description': '<p>For more information about the duplicate categories, see the <a href="https://www.htslib.org/doc/samtools-markdup.html#STATISTICS" target="_blank">samtools documentation</a>. </p>',
      'helptext': '',
      'name': 'Markdup: duplicate categories',
      'plot_id': None,
      'plot_type': None,
    }),
  ])
# ---

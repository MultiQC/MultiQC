""" MultiQC module to parse output from the Seqera Platform CLI """
import json
import logging
import os
import tarfile
from collections import defaultdict
from pprint import pprint

from multiqc.modules.base_module import BaseMultiqcModule, ModuleNoSamplesFound
from multiqc.plots import scatter, table

log = logging.getLogger(__name__)


def _read_json_from_tar_gz(tar_file, fname):
    try:
        fh = tar_file.extractfile(tar_file.getmember(fname))
        contents = fh.read()
    except:
        log.warning(f"Could not extract file {fname} from archive {tar_file}")
        return {}
    try:
        data = json.loads(contents)
    except:
        log.warning(f"Could parse JSON from {fname} in {tar_file}")
        return {}
    return data


class MultiqcModule(BaseMultiqcModule):
    def __init__(self):
        super(MultiqcModule, self).__init__(
            name="Seqera Platform CLI",
            anchor="seqera_cli",
            href="https://github.com/seqeralabs/tower-cli",
            info="reports statistics generated by the Seqera Platform CLI.",
            doi="10.1016/j.ajhg.2017.01.017",
        )

        data_by_run = defaultdict(dict)

        keys_by_file = {
            "workflow.json": ["repository", "start", "complete"],
            "workflow-load.json": ["cpuEfficiency", "memoryEfficiency", "cpuTime", "readBytes", "writeBytes", "cost"],
        }

        for f in self.find_log_files("seqera_cli/run_dump", filecontents=False):
            with tarfile.open(os.path.join(f["root"], f["fn"])) as tar_file:
                for fname in tar_file.getnames():
                    if fname in keys_by_file:
                        d = _read_json_from_tar_gz(tar_file, fname)
                        for k in keys_by_file[fname]:
                            if k in d:
                                data_by_run[f["s_name"]][k] = d[k]

            self.add_data_source(f)

            # Superfluous function call to confirm that it is used in this module
            # Replace None with actual version if it is available
            self.add_software_version(None)

        # Filter to strip out ignored sample names
        data_by_run = self.ignore_samples(data_by_run)

        if len(data_by_run) == 0:
            raise ModuleNoSamplesFound

        log.info("Found {} reports".format(len(data_by_run)))

        # Write parsed report data to a file
        self.write_data_file(data_by_run, "multiqc_seqera_cli")

        pprint(data_by_run)

        headers = {
            "repository": {
                "title": "Repository",
                "description": "Name of the repository",
                "scale": False,
                "modify": lambda x: f'<a href="{x}">{x}</a>',
            },
            "start": {
                "title": "Start",
                "description": "Start time of the workflow",
                "scale": False,
            },
            "complete": {
                "title": "Complete",
                "description": "End time of the workflow",
                "scale": False,
            },
            "cpuEfficiency": {
                "title": "CPU Efficiency",
                "description": "Percentage of CPU time used by the workflow",
                "format": "{:,.2f}",
                "scale": "RdYlGn",
            },
            "memoryEfficiency": {
                "title": "Memory Efficiency",
                "description": "Percentage of memory used by the workflow",
                "format": "{:,.2f}",
                "scale": "RdYlGn",
            },
            "cpuTime": {
                "title": "CPU Time",
                "description": "Total CPU time used by the workflow",
                "format": "{:,.2f}",
                "scale": "Greys",
                "suffix": " h",
                "modify": lambda x: x / 1000 / 3600,
            },
            "readBytes": {
                "title": "Read GB",
                "description": "Total gigabytes read by the workflow",
                "format": "{:,.2f}",
                "scale": "Blues",
                "suffix": " GB",
                "modify": lambda x: x / 1024 / 1024 / 1024,
            },
            "writeBytes": {
                "title": "Write GB",
                "description": "Total gigabytes written by the workflow",
                "format": "{:,.2f}",
                "scale": "Greens",
                "suffix": " GB",
                "modify": lambda x: x / 1024 / 1024 / 1024,
            },
            "cost": {
                "title": "Cost",
                "description": "Cost of the workflow",
                "format": "{:,.2f}",
                "scale": "Reds",
            },
        }

        self.add_section(
            name="Seqera Platform CLI",
            anchor="seqera-platform-cli",
            plot=table.plot(data_by_run, headers),
        )

#!/usr/bin/env python

""" MultiQC submodule to parse output from Samtools stats """
""" MultiQC submodule to parse output from SSDS stats """

import logging
from collections import OrderedDict
from multiqc import config, plots

# Initialise the logger
log = logging.getLogger(__name__)


def parse_reports(self):
    """ Find ssds stats logs and parse their data """

    self.ssds_stats = dict()
    for f in self.find_log_files(config.sp['ssds']['ssstats']):
        parsed_data = dict()
        for line in f['f'].splitlines():
            if not line.startswith("SN"):
                continue
            sections = line.split("\t")
            field = sections[1].strip()[:-1]
            field = field.replace(' ','_')
            value = float(sections[2].strip())
            parsed_data[field] = value
        if len(parsed_data) > 0:
            
            # Work out some percentages
            if 'total_fragments' in parsed_data:
                for k in list(parsed_data.keys()):
                    if k.startswith('reads_') and k != 'total_fragments':
                        parsed_data['{}_percent'.format(k)] = (parsed_data[k] / parsed_data['total_fragments']) * 100
            
            if f['s_name'] in self.ssds_stats:
                log.debug("Duplicate sample name found! Overwriting: {}".format(f['s_name']))
            self.add_data_source(f)
            self.ssds_stats[f['s_name']] = parsed_data

    if len(self.ssds_stats) > 0:

        # Write parsed report data to a file
        self.write_data_file(self.ssds_stats, 'multiqc_ssds_stats')

        # General Stats Table
        self.general_stats_headers['total_fragments'] = {
            'title': 'Total Fragments',
            'description': 'Count of 1st end reads in original BAM (millions)',
            'min': 0,
            'max': 100000,
            'scale': 'PuBu',
            'modify': lambda x: x / 1000000,
        }
        self.general_stats_headers['ssDNA_type1_fragments_percent'] = {
            'title': '% type1',
            'description': '% type 1 ssDNA ',
            'max': 100,
            'min': 0,
            'suffix': '%',
            'scale': 'RdYlGn',
            'format': '{:.2f}%'
        }
        self.general_stats_headers['ssDNA_type2_fragments_percent'] = {
            'title': '% type2',
            'description': '% type 2 ssDNA ',
            'max': 100,
            'min': 0,
            'suffix': '%',
            'scale': 'RdYlGn',
            'format': '{:.2f}%'
        }
        self.general_stats_headers['dsDNA_fragments_percent'] = {
            'title': '% dsDNA',
            'description': '% dsDNA ',
            'max': 100,
            'min': 0,
            'suffix': '%',
            'scale': 'RdYlGn',
            'format': '{:.2f}%'
        }
        self.general_stats_headers['unclassified_fragments_percent'] = {
            'title': '% unclassified',
            'description': '% unclassified',
            'max': 100,
            'min': 0,
            'suffix': '%',
            'scale': 'RdYlGn',
            'format': '{:.2f}%'
        }
        for s_name in self.ssds_stats:
            if s_name not in self.general_stats_data:
                self.general_stats_data[s_name] = dict()
            self.general_stats_data[s_name].update( self.ssds_stats[s_name] )
        
        # Make dot plot of counts
        keys = OrderedDict()
#        reads = {
#            'min': 0,
#            'modify': lambda x: float(x) / 1000000.0,
#            'decimalPlaces': 2,
#            'shared_key': 'read_count'
#        }
#        bases = {
#            'min': 0,
#            'modify': lambda x: float(x) / 1000000.0,
#            'decimalPlaces': 2,
#            'shared_key': 'base_count'
#        }
        keys['total_fragments'] = dict(reads, **{'title': 'Total fragments'})
        keys['ssDNA_type1_fragments'] = dict(reads, **{'title': 'ssDNA type1 fragments'})
        keys['ssDNA_type2_fragments'] = dict(reads, **{'title': 'ssDNA type2 fragments'})
        keys['dsDNA_fragments'] = dict(reads, **{'title': 'dsDNA fragments'})
        keys['unclassified_fragments'] = dict(reads, **{'title': 'unclassified fragments'})
        
        self.sections.append({
            'name': 'SSDS Stats',
            'anchor': 'ssds-stats',
            'content': '<p>This module parses the output from <code>SSDS stats</code>.</p>' + 
                        plots.beeswarm.plot(self.ssds_stats, keys, {'id': 'ssds-stats-dp'})
        })
    
    # Return the number of logs that were found
    return len(self.ssds_stats)



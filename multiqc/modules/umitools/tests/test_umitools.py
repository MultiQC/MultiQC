import pytest
from multiqc import report
from multiqc import config
from multiqc.modules.umitools import MultiqcModule


@pytest.fixture(autouse=True)
def reset_config():
    """Reset config state after each test."""
    original_preserve = config.preserve_module_raw_data
    yield
    config.preserve_module_raw_data = original_preserve


def test_parse_name(tmp_path):
    config.reset()

    f1 = tmp_path / "stdout.log"
    f1.write_text("""\
# output generated by extract -I INPUT.fastq.gz -S OUTPUT.fastq.gz
# stdin    : <_io.TextIOWrapper name='INPUT.fastq.gz' encoding='ascii'>
# stdout   : <_io.TextIOWrapper name='OUTPUT.fastq.gz' encoding='ascii'>
2024-06-05 19:57:52,145 INFO Input Reads: 50000
""")

    f2 = tmp_path / "stdin.log"
    f2.write_text("""\
# output generated by extract -I INPUT.fastq.gz
# stdin    : <_io.TextIOWrapper name='INPUT.fastq.gz' encoding='ascii'>
# stdout   : <_io.TextIOWrapper name='<stdout>' encoding='ascii'>
2024-06-05 19:57:52,145 INFO Input Reads: 50000
""")

    f3 = tmp_path / "filename.log"
    f3.write_text("""\
# output generated by extract
# stdin    : <_io.TextIOWrapper name='<stdin>' encoding='ascii'>
# stdout   : <_io.TextIOWrapper name='<stdout>' encoding='ascii'>
2024-06-05 19:57:52,145 INFO Input Reads: 50000
""")

    report.analysis_files = [f1, f2, f3]
    report.search_files(["umitools"])
    config.preserve_module_raw_data = True
    m = MultiqcModule()
    assert m.saved_raw_data is not None
    assert len(m.saved_raw_data) > 0
    assert set(m.saved_raw_data["multiqc_umitools_extract"].keys()) == {"OUTPUT", "INPUT", "filename"}


def test_parse_whitelist(tmp_path):
    config.reset()
    
    f1 = tmp_path / "whitelist.log"
    f1.write_text("""\
# UMI-tools version: 1.1.2
# output generated by whitelist -I INPUT.fastq.gz -S whitelist.txt
2024-06-05 19:57:52,145 INFO Input Reads: 100000
2024-06-05 19:57:52,145 INFO Reads with cell barcodes: 95000
2024-06-05 19:57:52,145 INFO Reads with whitelisted cell barcodes: 90000
2024-06-05 19:57:52,145 INFO Reads with cell barcodes error corrected to whitelisted cell barcodes: 3000
2024-06-05 19:57:52,145 INFO Number of unique cell barcodes: 12000
2024-06-05 19:57:52,145 INFO Number of whitelisted cell barcodes: 8000
""")

    report.analysis_files = [f1]
    report.search_files(["umitools"])
    config.preserve_module_raw_data = True
    m = MultiqcModule()
    assert m.saved_raw_data is not None
    assert "multiqc_umitools_whitelist" in m.saved_raw_data
    data = m.saved_raw_data["multiqc_umitools_whitelist"]["whitelist"]
    assert data["whitelist_input_reads"] == 100000
    assert data["reads_matched_barcode"] == 95000
    assert data["reads_matched_whitelisted"] == 90000
    assert data["reads_error_corrected"] == 3000
    assert data["unique_barcodes"] == 12000
    assert data["whitelisted_barcodes"] == 8000
    assert data["whitelist_percent_whitelisted"] == 90.0


def test_parse_count(tmp_path):
    config.reset()
    
    f1 = tmp_path / "count.log"
    f1.write_text("""\
# UMI-tools version: 1.1.2
# output generated by count -I INPUT.bam --extract-umi-method=umis --output=counts.txt
2024-06-05 19:57:52,145 INFO Input Reads: 50000
2024-06-05 19:57:52,145 INFO Number of reads out: 45000
2024-06-05 19:57:52,145 INFO Total genes: 15000
2024-06-05 19:57:52,145 INFO Total number of UMIs: 35000
2024-06-05 19:57:52,145 INFO Total number of positions deduplicated: 12000
2024-06-05 19:57:52,145 INFO Mean number of UMIs per gene: 2.33
""")

    report.analysis_files = [f1]
    report.search_files(["umitools"])
    config.preserve_module_raw_data = True
    m = MultiqcModule()
    assert m.saved_raw_data is not None
    assert "multiqc_umitools_count" in m.saved_raw_data
    data = m.saved_raw_data["multiqc_umitools_count"]["count"]
    assert data["count_input_reads"] == 50000
    assert data["count_output_reads"] == 45000
    assert data["genes_with_umis"] == 15000
    assert data["umis_deduplicated"] == 35000
    assert data["positions_deduplicated"] == 12000
    assert data["mean_umi_per_gene"] == 2.33
    assert data["count_percent_passing"] == 90.0
    assert data["count_removed_reads"] == 5000


def test_all_commands_together(tmp_path):
    """Test that all four commands can be parsed in one module instance"""
    config.reset()
    
    # Create log files for all commands
    f_dedup = tmp_path / "dedup.log"
    f_dedup.write_text("""\
# UMI-tools version: 1.1.2
# output generated by dedup -I INPUT.bam -S OUTPUT.bam
2024-06-05 19:57:52,145 INFO total_umis 25000
2024-06-05 19:57:52,145 INFO #umis 20000
2024-06-05 19:57:52,145 INFO Reads: Input Reads: 100000
2024-06-05 19:57:52,145 INFO Number of reads out: 85000
2024-06-05 19:57:52,145 INFO Total number of positions deduplicated: 15000
2024-06-05 19:57:52,145 INFO Mean number of unique UMIs per position: 1.67
2024-06-05 19:57:52,145 INFO Max. number of unique UMIs per position: 5
""")
    
    f_extract = tmp_path / "extract.log"
    f_extract.write_text("""\
# UMI-tools version: 1.1.2
# output generated by extract -I INPUT.fastq -S OUTPUT.fastq
2024-06-05 19:57:52,145 INFO Input Reads: 120000
2024-06-05 19:57:52,145 INFO Reads output: 115000
""")
    
    f_whitelist = tmp_path / "whitelist.log"
    f_whitelist.write_text("""\
# UMI-tools version: 1.1.2
# output generated by whitelist -I INPUT.fastq -S whitelist.txt
2024-06-05 19:57:52,145 INFO Input Reads: 150000
2024-06-05 19:57:52,145 INFO Reads with cell barcodes: 140000
2024-06-05 19:57:52,145 INFO Reads with whitelisted cell barcodes: 135000
""")
    
    f_count = tmp_path / "count.log"
    f_count.write_text("""\
# UMI-tools version: 1.1.2
# output generated by count -I INPUT.bam --output=counts.txt
2024-06-05 19:57:52,145 INFO Input Reads: 80000
2024-06-05 19:57:52,145 INFO Number of reads out: 75000
""")

    report.analysis_files = [f_dedup, f_extract, f_whitelist, f_count]
    report.search_files(["umitools"])
    config.preserve_module_raw_data = True
    m = MultiqcModule()
    
    # Check that all data types are present
    assert m.saved_raw_data is not None
    assert "multiqc_umitools_dedup" in m.saved_raw_data
    assert "multiqc_umitools_extract" in m.saved_raw_data
    assert "multiqc_umitools_whitelist" in m.saved_raw_data
    assert "multiqc_umitools_count" in m.saved_raw_data
    
    # Check that we have the expected sample names
    assert len(m.saved_raw_data["multiqc_umitools_dedup"]) == 1
    assert len(m.saved_raw_data["multiqc_umitools_extract"]) == 1
    assert len(m.saved_raw_data["multiqc_umitools_whitelist"]) == 1
    assert len(m.saved_raw_data["multiqc_umitools_count"]) == 1

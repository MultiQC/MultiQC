# MultiQC search patterns.
# Default configurations for how modules can find their log files.
# Loaded by the config module so that these patterns can be overwritten in user config files.

adapterRemoval:
    fn: '*.settings'
afterqc:
    fn: '*.json'
    contents: 'allow_mismatch_in_poly'
bamtools/stats:
    contents: 'Stats for BAM file(s):'
    shared: true
bcftools/stats:
    contents: 'This file was produced by bcftools stats'
    shared: true
bcl2fastq:
    - fn: 'Stats.json'
      contents: 'DemuxResults'
    - num_lines: 300
biobloomtools:
    contents: 'filter_id	hits	misses	shared	rate_hit	rate_miss	rate_shared'
    num_lines: 2
bismark/align:
    fn: '*_[SP]E_report.txt'
bismark/dedup:
    fn: '*.deduplication_report.txt'
bismark/meth_extract:
    fn: '*_splitting_report.txt'
bismark/m_bias:
    fn: '*M-bias.txt'
bismark/bam2nuc:
    fn: '*.nucleotide_stats.txt'
bowtie1:
    contents: '# reads processed:'
    shared: true
bowtie2:
    contents: 'reads; of these:'
    shared: true
busco:
    fn: 'short_summary_*'
custom_content:
    fn_re: '.+_mqc\.(yaml|yml|json|txt|csv|tsv|log|out)'
clusterflow/logs:
    fn: '*_clusterFlow.txt'
    shared: true
clusterflow/runfiles:
    fn: '*.run'
conpair/concordance:
    contents: 'markers (coverage per marker threshold : '
    num_lines: 3
conpair/contamination:
    contents: 'Tumor sample contamination level: '
    num_lines: 3
cutadapt:
    contents: 'This is cutadapt'
    # contents: 'cutadapt version' # Use this instead if using very old versions of cutadapt (eg. v1.2)
    shared: true
fastq_screen:
    fn: '*_screen.txt'
fastqc/data:
    fn: 'fastqc_data.txt'
fastqc/zip:
    fn: '*_fastqc.zip'
fastqc/theoretical_gc:
    fn: '*fastqc_theoretical_gc*'
featurecounts:
    fn: '*.summary'
flexbar:
    contents: 'Flexbar - flexible barcode and adapter removal'
    shared: true
gatk/varianteval:
    contents: '#:GATKTable:TiTvVariantEvaluator'
    shared: true
goleft_indexcov/roc:
    fn: '*-indexcov.roc'
goleft_indexcov/ped:
    fn: '*-indexcov.ped'
htseq:
    contents: '__too_low_aQual'
hicup:
    fn: 'HiCUP_summary_report*'
hisat2:
    contents: 'HISAT2 summary stats:'
    shared: true
homer/findpeaks:
    contents: '# HOMER Peaks'
    num_lines: 3
jellyfish:
    fn: '*_jf.hist'
kallisto:
    contents: '[quant] finding pseudoalignments for the reads'
    shared: true
leehom:
    contents: 'Adapter dimers/chimeras'
    shared: true
macs2:
    fn: '*_peaks.xls'
methylQA:
    fn: '*.report'
disambiguate:
    contents_re: '.*unique species A pairs.*'
peddy/summary_table:
    fn: '*.peddy.ped'
peddy/het_check:
    fn: '*.het_check.csv'
peddy/ped_check:
    fn: '*.ped_check.csv'
peddy/sex_check:
    fn: '*.sex_check.csv'
picard/alignment_metrics:
    contents: 'picard.analysis.AlignmentSummaryMetrics'
    shared: true
picard/basedistributionbycycle:
    contents: 'picard.analysis.BaseDistributionByCycleMetrics'
    shared: true
picard/gcbias:
    contents: 'picard.analysis.GcBias'
    shared: true
picard/hsmetrics:
    contents: 'picard.analysis.directed.HsMetrics'
    shared: true
picard/insertsize:
    contents: 'picard.analysis.InsertSizeMetrics'
    shared: true
picard/markdups:
    contents: 'picard.sam.DuplicationMetrics'
    shared: true
picard/oxogmetrics:
    contents: 'picard.analysis.CollectOxoGMetrics'
    shared: true
picard/pcr_metrics:
    contents: 'picard.analysis.directed.TargetedPcrMetrics'
    shared: true
picard/rnaseqmetrics:
    contents_re: '.*picard\.analysis\.Collect[Rr]na[Ss]eq[Mm]etrics.*'
    shared: true
picard/rrbs_metrics:
    contents: 'picard.analysis.RrbsSummaryMetrics'
    shared: true
picard/wgs_metrics:
    contents: 'picard.analysis.CollectWgsMetrics$WgsMetrics'
    shared: true
preseq:
    - contents: 'EXPECTED_DISTINCT'
      max_filesize: 500000
    - contents: 'distinct_reads'
      max_filesize: 500000
preseq/real_counts:
    fn: '*preseq_real_counts*'
prokka:
    contents: 'contigs:'
    num_lines: 2
qorts:
    contents: 'BENCHMARK_MinutesOnSamIteration'
    num_lines: 100
qualimap/bamqc/genome_results:
    fn: 'genome_results.txt'
qualimap/bamqc/coverage:
    fn: 'coverage_histogram.txt'
qualimap/bamqc/insert_size:
    fn: 'insert_size_histogram.txt'
qualimap/bamqc/genome_fraction:
    fn: 'genome_fraction_coverage.txt'
qualimap/bamqc/gc_dist:
    fn: 'mapped_reads_gc-content_distribution.txt'
qualimap/rnaseq/rnaseq_results:
    fn: 'rnaseq_qc_results.txt'
qualimap/rnaseq/coverage:
    fn: 'coverage_profile_along_genes_(total).txt'
quast:
    fn: 'report.tsv'
rna_seqc/metrics:
    fn: 'metrics.tsv'
rna_seqc/coverage:
    fn_re: 'meanCoverageNorm_(high|medium|low)\.txt'
rna_seqc/correlation:
    fn_re: 'corrMatrix(Pearson|Spearman)\.txt'
rseqc/bam_stat:
    contents: 'Proper-paired reads map to different chrom:'
    max_filesize: 500000
rseqc/gene_body_coverage:
    fn: '*.geneBodyCoverage.txt'
rseqc/inner_distance:
    fn: '*.inner_distance_freq.txt'
rseqc/junction_annotation:
    contents: 'Partial Novel Splicing Junctions:'
    max_filesize: 500000
rseqc/junction_saturation:
    fn: '*.junctionSaturation_plot.r'
rseqc/read_gc:
    fn: '*.GC.xls'
rseqc/read_distribution:
    contents: 'Group               Total_bases         Tag_count           Tags/Kb'
    max_filesize: 500000
rseqc/read_duplication_pos:
    fn: '*.pos.DupRate.xls'
rseqc/infer_experiment:
    - fn: '*infer_experiment.txt'
    - contents: 'Fraction of reads explained by'
      max_filesize: 500000
salmon/meta:
    fn: 'meta_info.json'
salmon/fld:
    fn: 'flenDist.txt'
samblaster:
    contents: 'samblaster: Version'
    shared: true
samtools/stats:
    contents: 'This file was produced by samtools stats'
    shared: true
samtools/flagstat:
    contents: 'in total (QC-passed reads + QC-failed reads)'
    shared: true
samtools/idxstats:
    fn: '*idxstat*'
samtools/rmdup:
    contents: '[bam_rmdup'
    shared: true
skewer:
    contents: 'maximum error ratio allowed (-r):'
    shared: true
slamdunk/summary:
    contents: '# slamdunk summary'
    num_lines: 1
slamdunk/PCA:
    contents: '# slamdunk PCA'
    num_lines: 1
slamdunk/rates:
    contents: '# slamdunk rates'
    num_lines: 1
slamdunk/utrrates:
    contents: '# slamdunk utrrates'
    num_lines: 1
slamdunk/tcperreadpos:
    contents: '# slamdunk tcperreadpos'
    num_lines: 1
slamdunk/tcperutrpos:
    contents: '# slamdunk tcperutr'
    num_lines: 1
snpeff:
    contents: 'SnpEff_version'
    max_filesize: 1000000
sortmerna:
    contents: 'Minimal SW score based on E-value'
    shared: true
star:
    fn: '*Log.final.out'
star/genecounts:
    fn: '*ReadsPerGene.out.tab'
theta2:
    fn: '*.BEST.results'
tophat:
    fn: '*align_summary.txt'
trimmomatic:
    contents: 'Trimmomatic'
    shared: true
vcftools/relatedness2:
    fn: '*.relatedness2'
vcftools/tstv_by_count:
    fn: '*.TsTv.count'
vcftools/tstv_by_qual:
    fn: '*.TsTv.qual'
vcftools/tstv_summary:
    fn: '*.TsTv.summary'
